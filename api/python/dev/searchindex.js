Search.setIndex({"alltitles": {"ABS": [[1262, "abs"]], "ACOS": [[1265, "acos"]], "ACOSD": [[1265, "acosd"]], "ARRAY_AGG": [[1259, "array-agg"]], "ARRAY_CONTAINS": [[1259, "array-contains"]], "ARRAY_GET": [[1259, "array-get"]], "ARRAY_LENGTH": [[1259, "array-length"]], "ARRAY_LOWER": [[1259, "array-lower"]], "ARRAY_MEAN": [[1259, "array-mean"]], "ARRAY_REVERSE": [[1259, "array-reverse"]], "ARRAY_SUM": [[1259, "array-sum"]], "ARRAY_TO_STRING": [[1259, "array-to-string"]], "ARRAY_UNIQUE": [[1259, "array-unique"]], "ARRAY_UPPER": [[1259, "array-upper"]], "ASIN": [[1265, "asin"]], "ASIND": [[1265, "asind"]], "ATAN": [[1265, "atan"]], "ATAN2": [[1265, "atan2"]], "ATAN2D": [[1265, "atan2d"]], "ATAND": [[1265, "atand"]], "AVG": [[1258, "avg"]], "Aggregate": [[1258, "aggregate"]], "Aggregation": [[169, "aggregation"], [316, "aggregation"], [787, "aggregation"], [890, "aggregation"]], "Aliases": [[1258, null], [1258, null], [1262, null], [1262, null], [1263, null], [1263, null]], "Array": [[765, "array"], [1234, "array"], [1259, "array"]], "Asserts": [[1271, "asserts"]], "Attributes": [[304, "attributes"], [879, "attributes"], [1235, "attributes"]], "Available registrations": [[1, "available-registrations"]], "Avro": [[786, "avro"]], "BIT_LENGTH": [[1263, "bit-length"]], "Binary": [[766, "binary"], [779, "binary"], [1236, "binary"]], "Boolean": [[767, "boolean"], [1237, "boolean"]], "CAST": [[1266, "cast"]], "CBRT": [[1262, "cbrt"]], "CEIL": [[1262, "ceil"]], "COALESCE": [[1260, "coalesce"]], "CONCAT": [[1263, "concat"]], "CONCAT_WS": [[1263, "concat-ws"]], "COS": [[1265, "cos"]], "COSD": [[1265, "cosd"]], "COT": [[1265, "cot"]], "COTD": [[1265, "cotd"]], "COUNT": [[1258, "count"]], "CREATE TABLE": [[1270, "create-table"]], "CSV": [[786, "csv"]], "Categories": [[768, "categories"], [1238, "categories"]], "Clipboard": [[786, "clipboard"]], "Columns / names": [[770, "columns-names"]], "Comparison": [[779, "comparison"]], "Computation": [[305, "computation"], [771, "computation"], [1239, "computation"]], "Conditional": [[1260, "conditional"]], "Config": [[168, "config"]], "Config load, save, state": [[168, "config-load-save-state"]], "Config options": [[168, "config-options"]], "Conjunction": [[779, "conjunction"]], "Conversion": [[784, "conversion"]], "DATE": [[1263, "date"]], "DATE_PART": [[1264, "date-part"]], "DEGREES": [[1265, "degrees"]], "DISTINCT": [[1257, "distinct"]], "DIV": [[1262, "div"]], "DROP TABLES": [[1270, "drop-tables"]], "Data types": [[314, "data-types"]], "DataFrame": [[309, "dataframe"]], "DataType": [[314, "datatype"]], "Database": [[786, "database"]], "Delta Lake": [[786, "delta-lake"]], "Descriptive": [[306, "descriptive"], [880, "descriptive"], [1240, "descriptive"]], "Documentation": [[1268, null], [1268, null], [1268, null]], "ENDS_WITH": [[1263, "ends-with"]], "EXCEPT": [[1269, "except"]], "EXP": [[1262, "exp"]], "EXPLAIN": [[1270, "explain"]], "EXTRACT": [[1264, "extract"]], "Errors": [[315, "errors"]], "Examples": [[1, "examples"], [312, "examples"], [889, "examples"], [1246, "examples"], [1271, "examples"]], "Excel / ODS": [[786, "excel-ods"]], "Exceptions": [[315, "exceptions"]], "Export": [[307, "export"], [1241, "export"]], "Expression SQL": [[1268, "expression-sql"]], "Expressions": [[773, "expressions"]], "Extending the API": [[1, "extending-the-api"]], "FIRST": [[1258, "first"]], "FLOOR": [[1262, "floor"]], "FROM": [[1257, "from"]], "Feather / IPC": [[786, "feather-ipc"]], "Frame SQL": [[1268, "frame-sql"]], "Functions": [[772, "functions"], [784, "functions"], [889, "functions"]], "GREATEST": [[1260, "greatest"]], "GROUP BY": [[1257, "group-by"]], "Global SQL": [[1268, "global-sql"]], "GroupBy": [[308, "groupby"], [881, "groupby"]], "HAVING": [[1257, "having"]], "IF": [[1260, "if"]], "IFNULL": [[1260, "ifnull"]], "INITCAP": [[1263, "initcap"]], "INTERSECT": [[1269, "intersect"]], "Iceberg": [[786, "iceberg"]], "Importing": [[889, "importing"]], "InProcessQuery": [[882, "inprocessquery"]], "Index": [[0, "index"]], "Input/output": [[786, "input-output"]], "Introduction": [[1268, "introduction"]], "JOIN": [[1257, "join"]], "JSON": [[786, "json"]], "LAST": [[1258, "last"]], "LEAST": [[1260, "least"]], "LEFT": [[1263, "left"]], "LENGTH": [[1263, "length"]], "LIMIT": [[1257, "limit"]], "LN": [[1262, "ln"]], "LOG": [[1262, "log"]], "LOG10": [[1262, "log10"]], "LOG1P": [[1262, "log1p"]], "LOG2": [[1262, "log2"]], "LOWER": [[1263, "lower"]], "LTRIM": [[1263, "ltrim"]], "LazyFrame": [[883, "lazyframe"]], "List": [[774, "list"], [1243, "list"]], "MAX": [[1258, "max"]], "MEDIAN": [[1258, "median"]], "MIN": [[1258, "min"]], "MOD": [[1262, "mod"]], "Manipulation/selection": [[311, "manipulation-selection"], [777, "manipulation-selection"], [885, "manipulation-selection"], [1245, "manipulation-selection"]], "Math": [[1262, "math"]], "Meta": [[775, "meta"]], "Metadata": [[886, "metadata"]], "Methods": [[1268, "methods"]], "Miscellaneous": [[310, "miscellaneous"], [776, "miscellaneous"], [784, "miscellaneous"], [884, "miscellaneous"], [1244, "miscellaneous"]], "NULLIF": [[1260, "nullif"]], "Name": [[778, "name"]], "Nested": [[314, "nested"]], "Numeric": [[314, "numeric"], [779, "numeric"]], "OCTET_LENGTH": [[1263, "octet-length"]], "OFFSET": [[1257, "offset"]], "ORDER BY": [[1257, "order-by"]], "Operators": [[779, "operators"]], "Other": [[314, "other"]], "PI": [[1262, "pi"]], "POW": [[1262, "pow"]], "Panic": [[315, "panic"]], "Parallelization": [[784, "parallelization"]], "Parametric testing": [[1271, "parametric-testing"]], "Parquet": [[786, "parquet"]], "Plot": [[312, "plot"], [1246, "plot"]], "Plugins": [[887, "plugins"]], "Polars strategies": [[1271, "polars-strategies"]], "Profiles": [[1271, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[786, "pyarrow-datasets"]], "Python API": [[1268, "python-api"]], "Python API reference": [[785, "python-api-reference"]], "Querying": [[1268, "querying"]], "RADIANS": [[1265, "radians"]], "REGEXP_LIKE": [[1263, "regexp-like"]], "REPLACE": [[1263, "replace"]], "REVERSE": [[1263, "reverse"]], "RIGHT": [[1263, "right"]], "ROUND": [[1262, "round"]], "RTRIM": [[1263, "rtrim"]], "Random": [[784, "random"]], "SELECT": [[1257, "select"]], "SHOW TABLES": [[1270, "show-tables"]], "SIGN": [[1262, "sign"]], "SIN": [[1265, "sin"]], "SIND": [[1265, "sind"]], "SQL Clauses": [[1257, "sql-clauses"]], "SQL Functions": [[1261, "sql-functions"]], "SQL Interface": [[1267, "sql-interface"]], "SQLContext": [[1268, "sqlcontext"]], "SQRT": [[1262, "sqrt"]], "STARTS_WITH": [[1263, "starts-with"]], "STDDEV": [[1258, "stddev"]], "STRFTIME": [[1264, "strftime"]], "STRPOS": [[1263, "strpos"]], "STRPTIME": [[1263, "strptime"]], "SUBSTRING": [[1263, "substring"]], "SUM": [[1258, "sum"]], "Schema": [[888, "schema"]], "Selectors": [[889, "selectors"]], "Serialization": [[310, "serialization"], [884, "serialization"]], "Series": [[1242, "series"]], "Set Operations": [[1269, "set-operations"]], "Set operations": [[889, "set-operations"]], "Strategy helpers": [[1271, "strategy-helpers"]], "String": [[314, "string"], [780, "string"], [1247, "string"], [1263, "string"]], "StringCache": [[784, "stringcache"]], "Struct": [[781, "struct"], [1248, "struct"]], "Style": [[313, "style"]], "TAN": [[1265, "tan"]], "TAND": [[1265, "tand"]], "TIMESTAMP": [[1263, "timestamp"]], "TRUNCATE": [[1270, "truncate"]], "TRY_CAST": [[1266, "try-cast"]], "Table Operations": [[1270, "table-operations"]], "Temporal": [[314, "temporal"], [782, "temporal"], [1249, "temporal"], [1264, "temporal"]], "Testing": [[1271, "testing"]], "Trigonometry": [[1265, "trigonometry"]], "Types": [[1266, "types"]], "UNION": [[1269, "union"]], "UNION ALL": [[1269, "union-all"]], "UNION BY NAME": [[1269, "union-by-name"]], "UNNEST": [[1259, "unnest"], [1270, "unnest"]], "UPPER": [[1263, "upper"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "VARIANCE": [[1258, "variance"]], "WHERE": [[1257, "where"]], "Warnings": [[315, "warnings"]], "Window": [[783, "window"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.__dataframe__": [[170, "polars-dataframe-dataframe"]], "polars.DataFrame.approx_n_unique": [[171, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.bottom_k": [[172, "polars-dataframe-bottom-k"]], "polars.DataFrame.cast": [[173, "polars-dataframe-cast"]], "polars.DataFrame.clear": [[174, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[175, "polars-dataframe-clone"]], "polars.DataFrame.collect_schema": [[176, "polars-dataframe-collect-schema"]], "polars.DataFrame.columns": [[177, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[178, "polars-dataframe-corr"]], "polars.DataFrame.count": [[179, "polars-dataframe-count"]], "polars.DataFrame.describe": [[180, "polars-dataframe-describe"]], "polars.DataFrame.deserialize": [[181, "polars-dataframe-deserialize"]], "polars.DataFrame.drop": [[182, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[183, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[184, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[185, "polars-dataframe-dtypes"]], "polars.DataFrame.equals": [[186, "polars-dataframe-equals"]], "polars.DataFrame.estimated_size": [[187, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[188, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[189, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[190, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[191, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[192, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[193, "polars-dataframe-flags"]], "polars.DataFrame.fold": [[194, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[195, "polars-dataframe-gather-every"]], "polars.DataFrame.get_column": [[196, "polars-dataframe-get-column"]], "polars.DataFrame.get_column_index": [[197, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[198, "polars-dataframe-get-columns"]], "polars.DataFrame.glimpse": [[199, "polars-dataframe-glimpse"]], "polars.DataFrame.group_by": [[200, "polars-dataframe-group-by"]], "polars.DataFrame.group_by_dynamic": [[201, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[202, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[203, "polars-dataframe-head"]], "polars.DataFrame.height": [[204, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[205, "polars-dataframe-hstack"]], "polars.DataFrame.insert_column": [[206, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[207, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[208, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[209, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[210, "polars-dataframe-is-unique"]], "polars.DataFrame.item": [[211, "polars-dataframe-item"]], "polars.DataFrame.iter_columns": [[212, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[213, "polars-dataframe-iter-rows"]], "polars.DataFrame.iter_slices": [[214, "polars-dataframe-iter-slices"]], "polars.DataFrame.join": [[215, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[216, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[217, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[218, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[219, "polars-dataframe-map-rows"]], "polars.DataFrame.max": [[220, "polars-dataframe-max"]], "polars.DataFrame.max_horizontal": [[221, "polars-dataframe-max-horizontal"]], "polars.DataFrame.mean": [[222, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[223, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.median": [[224, "polars-dataframe-median"]], "polars.DataFrame.melt": [[225, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[226, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[227, "polars-dataframe-min"]], "polars.DataFrame.min_horizontal": [[228, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_chunks": [[229, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[230, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[231, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[232, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[233, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[234, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[235, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[236, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[237, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[238, "polars-dataframe-rename"]], "polars.DataFrame.replace_column": [[239, "polars-dataframe-replace-column"]], "polars.DataFrame.reverse": [[240, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[241, "polars-dataframe-rolling"]], "polars.DataFrame.row": [[242, "polars-dataframe-row"]], "polars.DataFrame.rows": [[243, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[244, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sample": [[245, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[246, "polars-dataframe-schema"]], "polars.DataFrame.select": [[247, "polars-dataframe-select"]], "polars.DataFrame.select_seq": [[248, "polars-dataframe-select-seq"]], "polars.DataFrame.serialize": [[249, "polars-dataframe-serialize"]], "polars.DataFrame.set_sorted": [[250, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[251, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[252, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[253, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[254, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[255, "polars-dataframe-sort"]], "polars.DataFrame.sql": [[256, "polars-dataframe-sql"]], "polars.DataFrame.std": [[257, "polars-dataframe-std"]], "polars.DataFrame.sum": [[258, "polars-dataframe-sum"]], "polars.DataFrame.sum_horizontal": [[259, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.tail": [[260, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[261, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[262, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[263, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[264, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[265, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_jax": [[266, "polars-dataframe-to-jax"]], "polars.DataFrame.to_numpy": [[267, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[268, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[269, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[270, "polars-dataframe-to-struct"]], "polars.DataFrame.to_torch": [[271, "polars-dataframe-to-torch"]], "polars.DataFrame.top_k": [[272, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[273, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[274, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[275, "polars-dataframe-unnest"]], "polars.DataFrame.unpivot": [[276, "polars-dataframe-unpivot"]], "polars.DataFrame.unstack": [[277, "polars-dataframe-unstack"]], "polars.DataFrame.update": [[278, "polars-dataframe-update"]], "polars.DataFrame.upsample": [[279, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[280, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[281, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[282, "polars-dataframe-width"]], "polars.DataFrame.with_columns": [[283, "polars-dataframe-with-columns"]], "polars.DataFrame.with_columns_seq": [[284, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_row_count": [[285, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_row_index": [[286, "polars-dataframe-with-row-index"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Expr.abs": [[317, "polars-expr-abs"]], "polars.Expr.add": [[318, "polars-expr-add"]], "polars.Expr.agg_groups": [[319, "polars-expr-agg-groups"]], "polars.Expr.alias": [[320, "polars-expr-alias"]], "polars.Expr.all": [[321, "polars-expr-all"]], "polars.Expr.and_": [[322, "polars-expr-and"]], "polars.Expr.any": [[323, "polars-expr-any"]], "polars.Expr.append": [[324, "polars-expr-append"]], "polars.Expr.approx_n_unique": [[325, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[326, "polars-expr-arccos"]], "polars.Expr.arccosh": [[327, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[328, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[329, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[330, "polars-expr-arctan"]], "polars.Expr.arctanh": [[331, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[332, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[333, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[334, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[335, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[336, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[337, "polars-expr-arr-all"]], "polars.Expr.arr.any": [[338, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[339, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[340, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[341, "polars-expr-arr-contains"]], "polars.Expr.arr.count_matches": [[342, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[343, "polars-expr-arr-explode"]], "polars.Expr.arr.first": [[344, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[345, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[346, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[347, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[348, "polars-expr-arr-max"]], "polars.Expr.arr.median": [[349, "polars-expr-arr-median"]], "polars.Expr.arr.min": [[350, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[351, "polars-expr-arr-n-unique"]], "polars.Expr.arr.reverse": [[352, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[353, "polars-expr-arr-shift"]], "polars.Expr.arr.sort": [[354, "polars-expr-arr-sort"]], "polars.Expr.arr.std": [[355, "polars-expr-arr-std"]], "polars.Expr.arr.sum": [[356, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[357, "polars-expr-arr-to-list"]], "polars.Expr.arr.to_struct": [[358, "polars-expr-arr-to-struct"]], "polars.Expr.arr.unique": [[359, "polars-expr-arr-unique"]], "polars.Expr.arr.var": [[360, "polars-expr-arr-var"]], "polars.Expr.backward_fill": [[361, "polars-expr-backward-fill"]], "polars.Expr.bin.contains": [[362, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[363, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[364, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[365, "polars-expr-bin-ends-with"]], "polars.Expr.bin.starts_with": [[366, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[367, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[368, "polars-expr-bottom-k-by"]], "polars.Expr.cast": [[369, "polars-expr-cast"]], "polars.Expr.cat.get_categories": [[370, "polars-expr-cat-get-categories"]], "polars.Expr.cbrt": [[371, "polars-expr-cbrt"]], "polars.Expr.ceil": [[372, "polars-expr-ceil"]], "polars.Expr.clip": [[373, "polars-expr-clip"]], "polars.Expr.cos": [[374, "polars-expr-cos"]], "polars.Expr.cosh": [[375, "polars-expr-cosh"]], "polars.Expr.cot": [[376, "polars-expr-cot"]], "polars.Expr.count": [[377, "polars-expr-count"]], "polars.Expr.cum_count": [[378, "polars-expr-cum-count"]], "polars.Expr.cum_max": [[379, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[380, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[381, "polars-expr-cum-prod"]], "polars.Expr.cum_sum": [[382, "polars-expr-cum-sum"]], "polars.Expr.cumulative_eval": [[383, "polars-expr-cumulative-eval"]], "polars.Expr.cut": [[384, "polars-expr-cut"]], "polars.Expr.degrees": [[385, "polars-expr-degrees"]], "polars.Expr.deserialize": [[386, "polars-expr-deserialize"]], "polars.Expr.diff": [[387, "polars-expr-diff"]], "polars.Expr.dot": [[388, "polars-expr-dot"]], "polars.Expr.drop_nans": [[389, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[390, "polars-expr-drop-nulls"]], "polars.Expr.dt.add_business_days": [[391, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[392, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.cast_time_unit": [[393, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.century": [[394, "polars-expr-dt-century"]], "polars.Expr.dt.combine": [[395, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[396, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.date": [[397, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[398, "polars-expr-dt-datetime"]], "polars.Expr.dt.day": [[399, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[400, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[401, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[402, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[403, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.iso_year": [[404, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[405, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millennium": [[406, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[407, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[408, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[409, "polars-expr-dt-month"]], "polars.Expr.dt.month_end": [[410, "polars-expr-dt-month-end"]], "polars.Expr.dt.month_start": [[411, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanosecond": [[412, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[413, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[414, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[415, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[416, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[417, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[418, "polars-expr-dt-second"]], "polars.Expr.dt.strftime": [[419, "polars-expr-dt-strftime"]], "polars.Expr.dt.time": [[420, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[421, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[422, "polars-expr-dt-to-string"]], "polars.Expr.dt.total_days": [[423, "polars-expr-dt-total-days"]], "polars.Expr.dt.total_hours": [[424, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[425, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_milliseconds": [[426, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[427, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_nanoseconds": [[428, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_seconds": [[429, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.truncate": [[430, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[431, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[432, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[433, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[434, "polars-expr-dt-year"]], "polars.Expr.entropy": [[435, "polars-expr-entropy"]], "polars.Expr.eq": [[436, "polars-expr-eq"]], "polars.Expr.eq_missing": [[437, "polars-expr-eq-missing"]], "polars.Expr.ewm_mean": [[438, "polars-expr-ewm-mean"]], "polars.Expr.ewm_mean_by": [[439, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_std": [[440, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[441, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[442, "polars-expr-exclude"]], "polars.Expr.exp": [[443, "polars-expr-exp"]], "polars.Expr.explode": [[444, "polars-expr-explode"]], "polars.Expr.extend_constant": [[445, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[446, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[447, "polars-expr-fill-null"]], "polars.Expr.filter": [[448, "polars-expr-filter"]], "polars.Expr.first": [[449, "polars-expr-first"]], "polars.Expr.flatten": [[450, "polars-expr-flatten"]], "polars.Expr.floor": [[451, "polars-expr-floor"]], "polars.Expr.floordiv": [[452, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[453, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[454, "polars-expr-from-json"]], "polars.Expr.gather": [[455, "polars-expr-gather"]], "polars.Expr.gather_every": [[456, "polars-expr-gather-every"]], "polars.Expr.ge": [[457, "polars-expr-ge"]], "polars.Expr.get": [[458, "polars-expr-get"]], "polars.Expr.gt": [[459, "polars-expr-gt"]], "polars.Expr.has_nulls": [[460, "polars-expr-has-nulls"]], "polars.Expr.hash": [[461, "polars-expr-hash"]], "polars.Expr.head": [[462, "polars-expr-head"]], "polars.Expr.hist": [[463, "polars-expr-hist"]], "polars.Expr.implode": [[464, "polars-expr-implode"]], "polars.Expr.inspect": [[465, "polars-expr-inspect"]], "polars.Expr.interpolate": [[466, "polars-expr-interpolate"]], "polars.Expr.interpolate_by": [[467, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[468, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[469, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[470, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[471, "polars-expr-is-first-distinct"]], "polars.Expr.is_in": [[472, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[473, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[474, "polars-expr-is-last-distinct"]], "polars.Expr.is_nan": [[475, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[476, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[477, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[478, "polars-expr-is-null"]], "polars.Expr.is_unique": [[479, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[480, "polars-expr-kurtosis"]], "polars.Expr.last": [[481, "polars-expr-last"]], "polars.Expr.le": [[482, "polars-expr-le"]], "polars.Expr.len": [[483, "polars-expr-len"]], "polars.Expr.limit": [[484, "polars-expr-limit"]], "polars.Expr.list.all": [[485, "polars-expr-list-all"]], "polars.Expr.list.any": [[486, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[487, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[488, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[489, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[490, "polars-expr-list-contains"]], "polars.Expr.list.count_matches": [[491, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[492, "polars-expr-list-diff"]], "polars.Expr.list.drop_nulls": [[493, "polars-expr-list-drop-nulls"]], "polars.Expr.list.eval": [[494, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[495, "polars-expr-list-explode"]], "polars.Expr.list.first": [[496, "polars-expr-list-first"]], "polars.Expr.list.gather": [[497, "polars-expr-list-gather"]], "polars.Expr.list.gather_every": [[498, "polars-expr-list-gather-every"]], "polars.Expr.list.get": [[499, "polars-expr-list-get"]], "polars.Expr.list.head": [[500, "polars-expr-list-head"]], "polars.Expr.list.join": [[501, "polars-expr-list-join"]], "polars.Expr.list.last": [[502, "polars-expr-list-last"]], "polars.Expr.list.len": [[503, "polars-expr-list-len"]], "polars.Expr.list.max": [[504, "polars-expr-list-max"]], "polars.Expr.list.mean": [[505, "polars-expr-list-mean"]], "polars.Expr.list.median": [[506, "polars-expr-list-median"]], "polars.Expr.list.min": [[507, "polars-expr-list-min"]], "polars.Expr.list.n_unique": [[508, "polars-expr-list-n-unique"]], "polars.Expr.list.reverse": [[509, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[510, "polars-expr-list-sample"]], "polars.Expr.list.set_difference": [[511, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[512, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_symmetric_difference": [[513, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[514, "polars-expr-list-set-union"]], "polars.Expr.list.shift": [[515, "polars-expr-list-shift"]], "polars.Expr.list.slice": [[516, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[517, "polars-expr-list-sort"]], "polars.Expr.list.std": [[518, "polars-expr-list-std"]], "polars.Expr.list.sum": [[519, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[520, "polars-expr-list-tail"]], "polars.Expr.list.to_array": [[521, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[522, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[523, "polars-expr-list-unique"]], "polars.Expr.list.var": [[524, "polars-expr-list-var"]], "polars.Expr.log": [[525, "polars-expr-log"]], "polars.Expr.log10": [[526, "polars-expr-log10"]], "polars.Expr.log1p": [[527, "polars-expr-log1p"]], "polars.Expr.lower_bound": [[528, "polars-expr-lower-bound"]], "polars.Expr.lt": [[529, "polars-expr-lt"]], "polars.Expr.map_batches": [[530, "polars-expr-map-batches"]], "polars.Expr.map_elements": [[531, "polars-expr-map-elements"]], "polars.Expr.max": [[532, "polars-expr-max"]], "polars.Expr.mean": [[533, "polars-expr-mean"]], "polars.Expr.median": [[534, "polars-expr-median"]], "polars.Expr.meta.eq": [[535, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[536, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.is_column_selection": [[537, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.is_regex_projection": [[538, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[539, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[540, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[541, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[542, "polars-expr-meta-root-names"]], "polars.Expr.meta.serialize": [[543, "polars-expr-meta-serialize"]], "polars.Expr.meta.tree_format": [[544, "polars-expr-meta-tree-format"]], "polars.Expr.meta.undo_aliases": [[545, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[546, "polars-expr-meta-write-json"]], "polars.Expr.min": [[547, "polars-expr-min"]], "polars.Expr.mod": [[548, "polars-expr-mod"]], "polars.Expr.mode": [[549, "polars-expr-mode"]], "polars.Expr.mul": [[550, "polars-expr-mul"]], "polars.Expr.n_unique": [[551, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[552, "polars-expr-name-keep"]], "polars.Expr.name.map": [[553, "polars-expr-name-map"]], "polars.Expr.name.map_fields": [[554, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix": [[555, "polars-expr-name-prefix"]], "polars.Expr.name.prefix_fields": [[556, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[557, "polars-expr-name-suffix"]], "polars.Expr.name.suffix_fields": [[558, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_lowercase": [[559, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[560, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_max": [[561, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[562, "polars-expr-nan-min"]], "polars.Expr.ne": [[563, "polars-expr-ne"]], "polars.Expr.ne_missing": [[564, "polars-expr-ne-missing"]], "polars.Expr.neg": [[565, "polars-expr-neg"]], "polars.Expr.not_": [[566, "polars-expr-not"]], "polars.Expr.null_count": [[567, "polars-expr-null-count"]], "polars.Expr.or_": [[568, "polars-expr-or"]], "polars.Expr.over": [[569, "polars-expr-over"]], "polars.Expr.pct_change": [[570, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[571, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[572, "polars-expr-peak-min"]], "polars.Expr.pipe": [[573, "polars-expr-pipe"]], "polars.Expr.pow": [[574, "polars-expr-pow"]], "polars.Expr.product": [[575, "polars-expr-product"]], "polars.Expr.qcut": [[576, "polars-expr-qcut"]], "polars.Expr.quantile": [[577, "polars-expr-quantile"]], "polars.Expr.radians": [[578, "polars-expr-radians"]], "polars.Expr.rank": [[579, "polars-expr-rank"]], "polars.Expr.rechunk": [[580, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[581, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[582, "polars-expr-repeat-by"]], "polars.Expr.replace": [[583, "polars-expr-replace"]], "polars.Expr.replace_strict": [[584, "polars-expr-replace-strict"]], "polars.Expr.reshape": [[585, "polars-expr-reshape"]], "polars.Expr.reverse": [[586, "polars-expr-reverse"]], "polars.Expr.rle": [[587, "polars-expr-rle"]], "polars.Expr.rle_id": [[588, "polars-expr-rle-id"]], "polars.Expr.rolling": [[589, "polars-expr-rolling"]], "polars.Expr.rolling_map": [[590, "polars-expr-rolling-map"]], "polars.Expr.rolling_max": [[591, "polars-expr-rolling-max"]], "polars.Expr.rolling_max_by": [[592, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_mean": [[593, "polars-expr-rolling-mean"]], "polars.Expr.rolling_mean_by": [[594, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[595, "polars-expr-rolling-median"]], "polars.Expr.rolling_median_by": [[596, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_min": [[597, "polars-expr-rolling-min"]], "polars.Expr.rolling_min_by": [[598, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_quantile": [[599, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_quantile_by": [[600, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_skew": [[601, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[602, "polars-expr-rolling-std"]], "polars.Expr.rolling_std_by": [[603, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_sum": [[604, "polars-expr-rolling-sum"]], "polars.Expr.rolling_sum_by": [[605, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_var": [[606, "polars-expr-rolling-var"]], "polars.Expr.rolling_var_by": [[607, "polars-expr-rolling-var-by"]], "polars.Expr.round": [[608, "polars-expr-round"]], "polars.Expr.round_sig_figs": [[609, "polars-expr-round-sig-figs"]], "polars.Expr.sample": [[610, "polars-expr-sample"]], "polars.Expr.search_sorted": [[611, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[612, "polars-expr-set-sorted"]], "polars.Expr.shift": [[613, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[614, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[615, "polars-expr-shuffle"]], "polars.Expr.sign": [[616, "polars-expr-sign"]], "polars.Expr.sin": [[617, "polars-expr-sin"]], "polars.Expr.sinh": [[618, "polars-expr-sinh"]], "polars.Expr.skew": [[619, "polars-expr-skew"]], "polars.Expr.slice": [[620, "polars-expr-slice"]], "polars.Expr.sort": [[621, "polars-expr-sort"]], "polars.Expr.sort_by": [[622, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[623, "polars-expr-sqrt"]], "polars.Expr.std": [[624, "polars-expr-std"]], "polars.Expr.str.concat": [[625, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[626, "polars-expr-str-contains"]], "polars.Expr.str.contains_any": [[627, "polars-expr-str-contains-any"]], "polars.Expr.str.count_matches": [[628, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[629, "polars-expr-str-decode"]], "polars.Expr.str.encode": [[630, "polars-expr-str-encode"]], "polars.Expr.str.ends_with": [[631, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[632, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[633, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[634, "polars-expr-str-extract-all"]], "polars.Expr.str.extract_groups": [[635, "polars-expr-str-extract-groups"]], "polars.Expr.str.extract_many": [[636, "polars-expr-str-extract-many"]], "polars.Expr.str.find": [[637, "polars-expr-str-find"]], "polars.Expr.str.head": [[638, "polars-expr-str-head"]], "polars.Expr.str.join": [[639, "polars-expr-str-join"]], "polars.Expr.str.json_decode": [[640, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[641, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_bytes": [[642, "polars-expr-str-len-bytes"]], "polars.Expr.str.len_chars": [[643, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_end": [[644, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[645, "polars-expr-str-pad-start"]], "polars.Expr.str.replace": [[646, "polars-expr-str-replace"]], "polars.Expr.str.replace_all": [[647, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[648, "polars-expr-str-replace-many"]], "polars.Expr.str.reverse": [[649, "polars-expr-str-reverse"]], "polars.Expr.str.slice": [[650, "polars-expr-str-slice"]], "polars.Expr.str.split": [[651, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[652, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[653, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[654, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_chars": [[655, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_chars_end": [[656, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars_start": [[657, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[658, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_suffix": [[659, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[660, "polars-expr-str-strptime"]], "polars.Expr.str.tail": [[661, "polars-expr-str-tail"]], "polars.Expr.str.to_date": [[662, "polars-expr-str-to-date"]], "polars.Expr.str.to_datetime": [[663, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[664, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[665, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[666, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[667, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[668, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_uppercase": [[669, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[670, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[671, "polars-expr-struct-field"]], "polars.Expr.struct.json_encode": [[672, "polars-expr-struct-json-encode"]], "polars.Expr.struct.rename_fields": [[673, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.with_fields": [[674, "polars-expr-struct-with-fields"]], "polars.Expr.sub": [[675, "polars-expr-sub"]], "polars.Expr.sum": [[676, "polars-expr-sum"]], "polars.Expr.tail": [[677, "polars-expr-tail"]], "polars.Expr.tan": [[678, "polars-expr-tan"]], "polars.Expr.tanh": [[679, "polars-expr-tanh"]], "polars.Expr.to_physical": [[680, "polars-expr-to-physical"]], "polars.Expr.top_k": [[681, "polars-expr-top-k"]], "polars.Expr.top_k_by": [[682, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[683, "polars-expr-truediv"]], "polars.Expr.unique": [[684, "polars-expr-unique"]], "polars.Expr.unique_counts": [[685, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[686, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[687, "polars-expr-value-counts"]], "polars.Expr.var": [[688, "polars-expr-var"]], "polars.Expr.where": [[689, "polars-expr-where"]], "polars.Expr.xor": [[690, "polars-expr-xor"]], "polars.LazyFrame.approx_n_unique": [[788, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[789, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[790, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[791, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[792, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[793, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[794, "polars-lazyframe-collect"]], "polars.LazyFrame.collect_async": [[795, "polars-lazyframe-collect-async"]], "polars.LazyFrame.collect_schema": [[796, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.columns": [[797, "polars-lazyframe-columns"]], "polars.LazyFrame.count": [[798, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[799, "polars-lazyframe-describe"]], "polars.LazyFrame.deserialize": [[800, "polars-lazyframe-deserialize"]], "polars.LazyFrame.drop": [[801, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[802, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[803, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explain": [[804, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[805, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[806, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[807, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[808, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[809, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[810, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[811, "polars-lazyframe-group-by"]], "polars.LazyFrame.group_by_dynamic": [[812, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.head": [[813, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[814, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[815, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[816, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[817, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[818, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[819, "polars-lazyframe-lazy"]], "polars.LazyFrame.limit": [[820, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[821, "polars-lazyframe-map-batches"]], "polars.LazyFrame.max": [[822, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[823, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[824, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[825, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[826, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.min": [[827, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[828, "polars-lazyframe-null-count"]], "polars.LazyFrame.pipe": [[829, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[830, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[831, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[832, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[833, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[834, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[835, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[836, "polars-lazyframe-select"]], "polars.LazyFrame.select_seq": [[837, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[838, "polars-lazyframe-serialize"]], "polars.LazyFrame.set_sorted": [[839, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[840, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[841, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.slice": [[842, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[843, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[844, "polars-lazyframe-sql"]], "polars.LazyFrame.std": [[845, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[846, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[847, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[848, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[849, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[850, "polars-lazyframe-unnest"]], "polars.LazyFrame.unpivot": [[851, "polars-lazyframe-unpivot"]], "polars.LazyFrame.update": [[852, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[853, "polars-lazyframe-var"]], "polars.LazyFrame.width": [[854, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[855, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_columns_seq": [[856, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_context": [[857, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[858, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[859, "polars-lazyframe-with-row-index"]], "polars.SQLContext.execute": [[1250, "polars-sqlcontext-execute"]], "polars.SQLContext.execute_global": [[1251, "polars-sqlcontext-execute-global"]], "polars.SQLContext.register": [[1252, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[1253, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[1254, "polars-sqlcontext-register-many"]], "polars.SQLContext.tables": [[1255, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[1256, "polars-sqlcontext-unregister"]], "polars.Series.abs": [[891, "polars-series-abs"]], "polars.Series.alias": [[892, "polars-series-alias"]], "polars.Series.all": [[893, "polars-series-all"]], "polars.Series.any": [[894, "polars-series-any"]], "polars.Series.append": [[895, "polars-series-append"]], "polars.Series.arccos": [[896, "polars-series-arccos"]], "polars.Series.arccosh": [[897, "polars-series-arccosh"]], "polars.Series.arcsin": [[898, "polars-series-arcsin"]], "polars.Series.arcsinh": [[899, "polars-series-arcsinh"]], "polars.Series.arctan": [[900, "polars-series-arctan"]], "polars.Series.arctanh": [[901, "polars-series-arctanh"]], "polars.Series.arg_max": [[902, "polars-series-arg-max"]], "polars.Series.arg_min": [[903, "polars-series-arg-min"]], "polars.Series.arg_sort": [[904, "polars-series-arg-sort"]], "polars.Series.arg_true": [[905, "polars-series-arg-true"]], "polars.Series.arg_unique": [[906, "polars-series-arg-unique"]], "polars.Series.arr.all": [[907, "polars-series-arr-all"]], "polars.Series.arr.any": [[908, "polars-series-arr-any"]], "polars.Series.arr.arg_max": [[909, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[910, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[911, "polars-series-arr-contains"]], "polars.Series.arr.count_matches": [[912, "polars-series-arr-count-matches"]], "polars.Series.arr.explode": [[913, "polars-series-arr-explode"]], "polars.Series.arr.first": [[914, "polars-series-arr-first"]], "polars.Series.arr.get": [[915, "polars-series-arr-get"]], "polars.Series.arr.join": [[916, "polars-series-arr-join"]], "polars.Series.arr.last": [[917, "polars-series-arr-last"]], "polars.Series.arr.max": [[918, "polars-series-arr-max"]], "polars.Series.arr.median": [[919, "polars-series-arr-median"]], "polars.Series.arr.min": [[920, "polars-series-arr-min"]], "polars.Series.arr.n_unique": [[921, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[922, "polars-series-arr-reverse"]], "polars.Series.arr.shift": [[923, "polars-series-arr-shift"]], "polars.Series.arr.sort": [[924, "polars-series-arr-sort"]], "polars.Series.arr.std": [[925, "polars-series-arr-std"]], "polars.Series.arr.sum": [[926, "polars-series-arr-sum"]], "polars.Series.arr.to_list": [[927, "polars-series-arr-to-list"]], "polars.Series.arr.to_struct": [[928, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[929, "polars-series-arr-unique"]], "polars.Series.arr.var": [[930, "polars-series-arr-var"]], "polars.Series.bin.contains": [[931, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[932, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[933, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[934, "polars-series-bin-ends-with"]], "polars.Series.bin.starts_with": [[935, "polars-series-bin-starts-with"]], "polars.Series.bottom_k": [[936, "polars-series-bottom-k"]], "polars.Series.cast": [[937, "polars-series-cast"]], "polars.Series.cat.get_categories": [[938, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[939, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[940, "polars-series-cat-to-local"]], "polars.Series.cat.uses_lexical_ordering": [[941, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cbrt": [[942, "polars-series-cbrt"]], "polars.Series.ceil": [[943, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[944, "polars-series-chunk-lengths"]], "polars.Series.clear": [[945, "polars-series-clear"]], "polars.Series.clip": [[946, "polars-series-clip"]], "polars.Series.clone": [[947, "polars-series-clone"]], "polars.Series.cos": [[948, "polars-series-cos"]], "polars.Series.cosh": [[949, "polars-series-cosh"]], "polars.Series.cot": [[950, "polars-series-cot"]], "polars.Series.cum_count": [[951, "polars-series-cum-count"]], "polars.Series.cum_max": [[952, "polars-series-cum-max"]], "polars.Series.cum_min": [[953, "polars-series-cum-min"]], "polars.Series.cum_prod": [[954, "polars-series-cum-prod"]], "polars.Series.cum_sum": [[955, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[956, "polars-series-cumulative-eval"]], "polars.Series.cut": [[957, "polars-series-cut"]], "polars.Series.describe": [[958, "polars-series-describe"]], "polars.Series.diff": [[959, "polars-series-diff"]], "polars.Series.dot": [[960, "polars-series-dot"]], "polars.Series.drop_nans": [[961, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[962, "polars-series-drop-nulls"]], "polars.Series.dt.add_business_days": [[963, "polars-series-dt-add-business-days"]], "polars.Series.dt.base_utc_offset": [[964, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[965, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.century": [[966, "polars-series-dt-century"]], "polars.Series.dt.combine": [[967, "polars-series-dt-combine"]], "polars.Series.dt.convert_time_zone": [[968, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.date": [[969, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[970, "polars-series-dt-datetime"]], "polars.Series.dt.day": [[971, "polars-series-dt-day"]], "polars.Series.dt.dst_offset": [[972, "polars-series-dt-dst-offset"]], "polars.Series.dt.epoch": [[973, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[974, "polars-series-dt-hour"]], "polars.Series.dt.is_leap_year": [[975, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[976, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[977, "polars-series-dt-max"]], "polars.Series.dt.mean": [[978, "polars-series-dt-mean"]], "polars.Series.dt.median": [[979, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[980, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[981, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[982, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[983, "polars-series-dt-min"]], "polars.Series.dt.minute": [[984, "polars-series-dt-minute"]], "polars.Series.dt.month": [[985, "polars-series-dt-month"]], "polars.Series.dt.month_end": [[986, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[987, "polars-series-dt-month-start"]], "polars.Series.dt.nanosecond": [[988, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[989, "polars-series-dt-offset-by"]], "polars.Series.dt.ordinal_day": [[990, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[991, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[992, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.round": [[993, "polars-series-dt-round"]], "polars.Series.dt.second": [[994, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[995, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[996, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[997, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[998, "polars-series-dt-to-string"]], "polars.Series.dt.total_days": [[999, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[1000, "polars-series-dt-total-hours"]], "polars.Series.dt.total_microseconds": [[1001, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[1002, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1003, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[1004, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.total_seconds": [[1005, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[1006, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[1007, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[1008, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1009, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1010, "polars-series-dt-year"]], "polars.Series.dtype": [[1011, "polars-series-dtype"]], "polars.Series.entropy": [[1012, "polars-series-entropy"]], "polars.Series.equals": [[1013, "polars-series-equals"]], "polars.Series.estimated_size": [[1014, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[1015, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1016, "polars-series-ewm-mean-by"]], "polars.Series.ewm_std": [[1017, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[1018, "polars-series-ewm-var"]], "polars.Series.exp": [[1019, "polars-series-exp"]], "polars.Series.explode": [[1020, "polars-series-explode"]], "polars.Series.extend": [[1021, "polars-series-extend"]], "polars.Series.extend_constant": [[1022, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[1023, "polars-series-fill-nan"]], "polars.Series.fill_null": [[1024, "polars-series-fill-null"]], "polars.Series.filter": [[1025, "polars-series-filter"]], "polars.Series.flags": [[1026, "polars-series-flags"]], "polars.Series.floor": [[1027, "polars-series-floor"]], "polars.Series.gather": [[1028, "polars-series-gather"]], "polars.Series.gather_every": [[1029, "polars-series-gather-every"]], "polars.Series.get_chunks": [[1030, "polars-series-get-chunks"]], "polars.Series.has_nulls": [[1031, "polars-series-has-nulls"]], "polars.Series.has_validity": [[1032, "polars-series-has-validity"]], "polars.Series.hash": [[1033, "polars-series-hash"]], "polars.Series.head": [[1034, "polars-series-head"]], "polars.Series.hist": [[1035, "polars-series-hist"]], "polars.Series.implode": [[1036, "polars-series-implode"]], "polars.Series.interpolate": [[1037, "polars-series-interpolate"]], "polars.Series.interpolate_by": [[1038, "polars-series-interpolate-by"]], "polars.Series.is_between": [[1039, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1040, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1041, "polars-series-is-empty"]], "polars.Series.is_finite": [[1042, "polars-series-is-finite"]], "polars.Series.is_first_distinct": [[1043, "polars-series-is-first-distinct"]], "polars.Series.is_in": [[1044, "polars-series-is-in"]], "polars.Series.is_infinite": [[1045, "polars-series-is-infinite"]], "polars.Series.is_last_distinct": [[1046, "polars-series-is-last-distinct"]], "polars.Series.is_nan": [[1047, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[1048, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1049, "polars-series-is-not-null"]], "polars.Series.is_null": [[1050, "polars-series-is-null"]], "polars.Series.is_sorted": [[1051, "polars-series-is-sorted"]], "polars.Series.is_unique": [[1052, "polars-series-is-unique"]], "polars.Series.item": [[1053, "polars-series-item"]], "polars.Series.kurtosis": [[1054, "polars-series-kurtosis"]], "polars.Series.len": [[1055, "polars-series-len"]], "polars.Series.limit": [[1056, "polars-series-limit"]], "polars.Series.list.all": [[1057, "polars-series-list-all"]], "polars.Series.list.any": [[1058, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1059, "polars-series-list-arg-max"]], "polars.Series.list.arg_min": [[1060, "polars-series-list-arg-min"]], "polars.Series.list.concat": [[1061, "polars-series-list-concat"]], "polars.Series.list.contains": [[1062, "polars-series-list-contains"]], "polars.Series.list.count_matches": [[1063, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1064, "polars-series-list-diff"]], "polars.Series.list.drop_nulls": [[1065, "polars-series-list-drop-nulls"]], "polars.Series.list.eval": [[1066, "polars-series-list-eval"]], "polars.Series.list.explode": [[1067, "polars-series-list-explode"]], "polars.Series.list.first": [[1068, "polars-series-list-first"]], "polars.Series.list.gather": [[1069, "polars-series-list-gather"]], "polars.Series.list.gather_every": [[1070, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1071, "polars-series-list-get"]], "polars.Series.list.head": [[1072, "polars-series-list-head"]], "polars.Series.list.join": [[1073, "polars-series-list-join"]], "polars.Series.list.last": [[1074, "polars-series-list-last"]], "polars.Series.list.len": [[1075, "polars-series-list-len"]], "polars.Series.list.max": [[1076, "polars-series-list-max"]], "polars.Series.list.mean": [[1077, "polars-series-list-mean"]], "polars.Series.list.median": [[1078, "polars-series-list-median"]], "polars.Series.list.min": [[1079, "polars-series-list-min"]], "polars.Series.list.n_unique": [[1080, "polars-series-list-n-unique"]], "polars.Series.list.reverse": [[1081, "polars-series-list-reverse"]], "polars.Series.list.sample": [[1082, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1083, "polars-series-list-set-difference"]], "polars.Series.list.set_intersection": [[1084, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1085, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[1086, "polars-series-list-set-union"]], "polars.Series.list.shift": [[1087, "polars-series-list-shift"]], "polars.Series.list.slice": [[1088, "polars-series-list-slice"]], "polars.Series.list.sort": [[1089, "polars-series-list-sort"]], "polars.Series.list.std": [[1090, "polars-series-list-std"]], "polars.Series.list.sum": [[1091, "polars-series-list-sum"]], "polars.Series.list.tail": [[1092, "polars-series-list-tail"]], "polars.Series.list.to_array": [[1093, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1094, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1095, "polars-series-list-unique"]], "polars.Series.list.var": [[1096, "polars-series-list-var"]], "polars.Series.log": [[1097, "polars-series-log"]], "polars.Series.log10": [[1098, "polars-series-log10"]], "polars.Series.log1p": [[1099, "polars-series-log1p"]], "polars.Series.lower_bound": [[1100, "polars-series-lower-bound"]], "polars.Series.map_elements": [[1101, "polars-series-map-elements"]], "polars.Series.max": [[1102, "polars-series-max"]], "polars.Series.mean": [[1103, "polars-series-mean"]], "polars.Series.median": [[1104, "polars-series-median"]], "polars.Series.min": [[1105, "polars-series-min"]], "polars.Series.mode": [[1106, "polars-series-mode"]], "polars.Series.n_chunks": [[1107, "polars-series-n-chunks"]], "polars.Series.n_unique": [[1108, "polars-series-n-unique"]], "polars.Series.name": [[1109, "polars-series-name"]], "polars.Series.nan_max": [[1110, "polars-series-nan-max"]], "polars.Series.nan_min": [[1111, "polars-series-nan-min"]], "polars.Series.new_from_index": [[1112, "polars-series-new-from-index"]], "polars.Series.not_": [[1113, "polars-series-not"]], "polars.Series.null_count": [[1114, "polars-series-null-count"]], "polars.Series.pct_change": [[1115, "polars-series-pct-change"]], "polars.Series.peak_max": [[1116, "polars-series-peak-max"]], "polars.Series.peak_min": [[1117, "polars-series-peak-min"]], "polars.Series.product": [[1118, "polars-series-product"]], "polars.Series.qcut": [[1119, "polars-series-qcut"]], "polars.Series.quantile": [[1120, "polars-series-quantile"]], "polars.Series.rank": [[1121, "polars-series-rank"]], "polars.Series.rechunk": [[1122, "polars-series-rechunk"]], "polars.Series.reinterpret": [[1123, "polars-series-reinterpret"]], "polars.Series.rename": [[1124, "polars-series-rename"]], "polars.Series.replace": [[1125, "polars-series-replace"]], "polars.Series.replace_strict": [[1126, "polars-series-replace-strict"]], "polars.Series.reshape": [[1127, "polars-series-reshape"]], "polars.Series.reverse": [[1128, "polars-series-reverse"]], "polars.Series.rle": [[1129, "polars-series-rle"]], "polars.Series.rle_id": [[1130, "polars-series-rle-id"]], "polars.Series.rolling_map": [[1131, "polars-series-rolling-map"]], "polars.Series.rolling_max": [[1132, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1133, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[1134, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[1135, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[1136, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[1137, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[1138, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1139, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[1140, "polars-series-rolling-var"]], "polars.Series.round": [[1141, "polars-series-round"]], "polars.Series.round_sig_figs": [[1142, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1143, "polars-series-sample"]], "polars.Series.scatter": [[1144, "polars-series-scatter"]], "polars.Series.search_sorted": [[1145, "polars-series-search-sorted"]], "polars.Series.set": [[1146, "polars-series-set"]], "polars.Series.set_sorted": [[1147, "polars-series-set-sorted"]], "polars.Series.shape": [[1148, "polars-series-shape"]], "polars.Series.shift": [[1149, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1150, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1151, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[1152, "polars-series-shuffle"]], "polars.Series.sign": [[1153, "polars-series-sign"]], "polars.Series.sin": [[1154, "polars-series-sin"]], "polars.Series.sinh": [[1155, "polars-series-sinh"]], "polars.Series.skew": [[1156, "polars-series-skew"]], "polars.Series.slice": [[1157, "polars-series-slice"]], "polars.Series.sort": [[1158, "polars-series-sort"]], "polars.Series.sqrt": [[1159, "polars-series-sqrt"]], "polars.Series.std": [[1160, "polars-series-std"]], "polars.Series.str.concat": [[1161, "polars-series-str-concat"]], "polars.Series.str.contains": [[1162, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1163, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1164, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1165, "polars-series-str-decode"]], "polars.Series.str.encode": [[1166, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1167, "polars-series-str-ends-with"]], "polars.Series.str.explode": [[1168, "polars-series-str-explode"]], "polars.Series.str.extract": [[1169, "polars-series-str-extract"]], "polars.Series.str.extract_all": [[1170, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1171, "polars-series-str-extract-groups"]], "polars.Series.str.extract_many": [[1172, "polars-series-str-extract-many"]], "polars.Series.str.find": [[1173, "polars-series-str-find"]], "polars.Series.str.head": [[1174, "polars-series-str-head"]], "polars.Series.str.join": [[1175, "polars-series-str-join"]], "polars.Series.str.json_decode": [[1176, "polars-series-str-json-decode"]], "polars.Series.str.json_path_match": [[1177, "polars-series-str-json-path-match"]], "polars.Series.str.len_bytes": [[1178, "polars-series-str-len-bytes"]], "polars.Series.str.len_chars": [[1179, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1180, "polars-series-str-pad-end"]], "polars.Series.str.pad_start": [[1181, "polars-series-str-pad-start"]], "polars.Series.str.replace": [[1182, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[1183, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1184, "polars-series-str-replace-many"]], "polars.Series.str.reverse": [[1185, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1186, "polars-series-str-slice"]], "polars.Series.str.split": [[1187, "polars-series-str-split"]], "polars.Series.str.split_exact": [[1188, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1189, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1190, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars": [[1191, "polars-series-str-strip-chars"]], "polars.Series.str.strip_chars_end": [[1192, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1193, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip_prefix": [[1194, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1195, "polars-series-str-strip-suffix"]], "polars.Series.str.strptime": [[1196, "polars-series-str-strptime"]], "polars.Series.str.tail": [[1197, "polars-series-str-tail"]], "polars.Series.str.to_date": [[1198, "polars-series-str-to-date"]], "polars.Series.str.to_datetime": [[1199, "polars-series-str-to-datetime"]], "polars.Series.str.to_decimal": [[1200, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1201, "polars-series-str-to-integer"]], "polars.Series.str.to_lowercase": [[1202, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1203, "polars-series-str-to-time"]], "polars.Series.str.to_titlecase": [[1204, "polars-series-str-to-titlecase"]], "polars.Series.str.to_uppercase": [[1205, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1206, "polars-series-str-zfill"]], "polars.Series.struct.field": [[1207, "polars-series-struct-field"]], "polars.Series.struct.fields": [[1208, "polars-series-struct-fields"]], "polars.Series.struct.json_encode": [[1209, "polars-series-struct-json-encode"]], "polars.Series.struct.rename_fields": [[1210, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1211, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1212, "polars-series-struct-unnest"]], "polars.Series.sum": [[1213, "polars-series-sum"]], "polars.Series.tail": [[1214, "polars-series-tail"]], "polars.Series.tan": [[1215, "polars-series-tan"]], "polars.Series.tanh": [[1216, "polars-series-tanh"]], "polars.Series.to_arrow": [[1217, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[1218, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1219, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1220, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1221, "polars-series-to-jax"]], "polars.Series.to_list": [[1222, "polars-series-to-list"]], "polars.Series.to_numpy": [[1223, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[1224, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1225, "polars-series-to-physical"]], "polars.Series.to_torch": [[1226, "polars-series-to-torch"]], "polars.Series.top_k": [[1227, "polars-series-top-k"]], "polars.Series.unique": [[1228, "polars-series-unique"]], "polars.Series.unique_counts": [[1229, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1230, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1231, "polars-series-value-counts"]], "polars.Series.var": [[1232, "polars-series-var"]], "polars.Series.zip_with": [[1233, "polars-series-zip-with"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.all": [[691, "polars-all"]], "polars.all_horizontal": [[692, "polars-all-horizontal"]], "polars.any": [[693, "polars-any"]], "polars.any_horizontal": [[694, "polars-any-horizontal"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.approx_n_unique": [[695, "polars-approx-n-unique"]], "polars.arange": [[696, "polars-arange"]], "polars.arctan2": [[697, "polars-arctan2"]], "polars.arctan2d": [[698, "polars-arctan2d"]], "polars.arg_sort_by": [[699, "polars-arg-sort-by"]], "polars.arg_where": [[700, "polars-arg-where"]], "polars.build_info": [[52, "polars-build-info"]], "polars.business_day_count": [[701, "polars-business-day-count"]], "polars.coalesce": [[702, "polars-coalesce"]], "polars.col": [[769, "polars-col"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.concat": [[55, "polars-concat"]], "polars.concat_list": [[703, "polars-concat-list"]], "polars.concat_str": [[704, "polars-concat-str"]], "polars.corr": [[705, "polars-corr"]], "polars.count": [[706, "polars-count"]], "polars.cov": [[707, "polars-cov"]], "polars.cum_count": [[708, "polars-cum-count"]], "polars.cum_fold": [[709, "polars-cum-fold"]], "polars.cum_reduce": [[710, "polars-cum-reduce"]], "polars.cum_sum": [[711, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[712, "polars-cum-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.__iter__": [[287, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[288, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.all": [[289, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.count": [[290, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[291, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[292, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.last": [[293, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.len": [[294, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.map_groups": [[295, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[296, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[297, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.median": [[298, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[299, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[300, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[301, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[302, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[303, "polars-dataframe-group-by-groupby-tail"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.date": [[713, "polars-date"]], "polars.date_range": [[714, "polars-date-range"]], "polars.date_ranges": [[715, "polars-date-ranges"]], "polars.datetime": [[716, "polars-datetime"]], "polars.datetime_range": [[717, "polars-datetime-range"]], "polars.datetime_ranges": [[718, "polars-datetime-ranges"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.duration": [[719, "polars-duration"]], "polars.element": [[720, "polars-element"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.exclude": [[721, "polars-exclude"]], "polars.first": [[722, "polars-first"]], "polars.fold": [[723, "polars-fold"]], "polars.format": [[724, "polars-format"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_epoch": [[725, "polars-from-epoch"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.from_records": [[122, "polars-from-records"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.groups": [[726, "polars-groups"]], "polars.head": [[727, "polars-head"]], "polars.implode": [[728, "polars-implode"]], "polars.int_range": [[729, "polars-int-range"]], "polars.int_ranges": [[730, "polars-int-ranges"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.last": [[731, "polars-last"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[860, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[861, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[862, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[863, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[864, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[865, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[866, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[867, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[868, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[869, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[870, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[871, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[872, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[873, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[874, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[875, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[876, "polars-lazyframe-in-process-inprocessquery-cancel"]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[877, "polars-lazyframe-in-process-inprocessquery-fetch"]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[878, "polars-lazyframe-in-process-inprocessquery-fetch-blocking"]], "polars.len": [[732, "polars-len"]], "polars.lit": [[733, "polars-lit"]], "polars.map_batches": [[734, "polars-map-batches"]], "polars.map_groups": [[735, "polars-map-groups"]], "polars.max": [[736, "polars-max"]], "polars.max_horizontal": [[737, "polars-max-horizontal"]], "polars.mean": [[738, "polars-mean"]], "polars.mean_horizontal": [[739, "polars-mean-horizontal"]], "polars.median": [[740, "polars-median"]], "polars.min": [[741, "polars-min"]], "polars.min_horizontal": [[742, "polars-min-horizontal"]], "polars.n_unique": [[743, "polars-n-unique"]], "polars.nth": [[744, "polars-nth"]], "polars.ones": [[745, "polars-ones"]], "polars.quantile": [[746, "polars-quantile"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.read_database": [[131, "polars-read-database"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_json": [[138, "polars-read-json"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.reduce": [[747, "polars-reduce"]], "polars.repeat": [[748, "polars-repeat"]], "polars.rolling_corr": [[749, "polars-rolling-corr"]], "polars.rolling_cov": [[750, "polars-rolling-cov"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.select": [[751, "polars-select"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.sql": [[752, "polars-sql"]], "polars.sql_expr": [[753, "polars-sql-expr"]], "polars.std": [[754, "polars-std"]], "polars.struct": [[755, "polars-struct"]], "polars.sum": [[756, "polars-sum"]], "polars.sum_horizontal": [[757, "polars-sum-horizontal"]], "polars.tail": [[758, "polars-tail"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.time": [[759, "polars-time"]], "polars.time_range": [[760, "polars-time-range"]], "polars.time_ranges": [[761, "polars-time-ranges"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.var": [[762, "polars-var"]], "polars.when": [[763, "polars-when"]], "polars.zeros": [[764, "polars-zeros"]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__dataframe__() (polars.dataframe method)": [[170, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1268, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1268, "polars.SQLContext.__exit__", false]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.sqlcontext method)": [[1268, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[317, "polars.Expr.abs", false]], "abs() (polars.series method)": [[891, "polars.Series.abs", false]], "add() (polars.expr method)": [[318, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[391, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[963, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[860, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[319, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[320, "polars.Expr.alias", false]], "alias() (polars.series method)": [[892, "polars.Series.alias", false]], "align_frames() (in module polars)": [[47, "polars.align_frames", false]], "all() (in module polars)": [[691, "polars.all", false]], "all() (in module polars.selectors)": [[889, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[321, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[337, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[485, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[861, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[893, "polars.Series.all", false]], "all() (polars.series.arr method)": [[907, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1057, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[692, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[889, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[889, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[322, "polars.Expr.and_", false]], "any() (in module polars)": [[693, "polars.any", false]], "any() (polars.expr method)": [[323, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[338, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[486, "polars.Expr.list.any", false]], "any() (polars.series method)": [[894, "polars.Series.any", false]], "any() (polars.series.arr method)": [[908, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1058, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[694, "polars.any_horizontal", false]], "append() (polars.expr method)": [[324, "polars.Expr.append", false]], "append() (polars.series method)": [[895, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[695, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[171, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[325, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[788, "polars.LazyFrame.approx_n_unique", false]], "arange() (in module polars)": [[696, "polars.arange", false]], "arccos() (polars.expr method)": [[326, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[896, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[327, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[897, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[328, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[898, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[329, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[899, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[330, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[900, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[697, "polars.arctan2", false]], "arctan2d() (in module polars)": [[698, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[331, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[901, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[332, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[339, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[487, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[902, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[909, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1059, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[333, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[340, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[488, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[903, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[910, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1060, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[334, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[904, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[699, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[335, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[905, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[336, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[906, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[700, "polars.arg_where", false]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[361, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[392, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[964, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[889, "polars.selectors.binary", false]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[889, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[172, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[367, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[789, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[936, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[368, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[52, "polars.build_info", false]], "business_day_count() (in module polars)": [[701, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[889, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[889, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[889, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[790, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[876, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[173, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[369, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[791, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[937, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[393, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[965, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[889, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[371, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[942, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[372, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[943, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[394, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[966, "polars.Series.dt.century", false]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[944, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[174, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[792, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[945, "polars.Series.clear", false]], "clip() (polars.expr method)": [[373, "polars.Expr.clip", false]], "clip() (polars.series method)": [[946, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[175, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[793, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[947, "polars.Series.clone", false]], "coalesce() (in module polars)": [[702, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[794, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[53, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[795, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[176, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[796, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column", false]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[177, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[797, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[395, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[967, "polars.Series.dt.combine", false]], "computeerror": [[89, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[55, "polars.concat", false]], "concat() (polars.expr.list method)": [[489, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[625, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1061, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1161, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[703, "polars.concat_list", false]], "concat_str() (in module polars)": [[704, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[889, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[341, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[362, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[490, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[626, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[911, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[931, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1062, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1162, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[627, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1163, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[396, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[968, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[705, "polars.corr", false]], "corr() (polars.dataframe method)": [[178, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[374, "polars.Expr.cos", false]], "cos() (polars.series method)": [[948, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[375, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[949, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[376, "polars.Expr.cot", false]], "cot() (polars.series method)": [[950, "polars.Series.cot", false]], "count() (in module polars)": [[706, "polars.count", false]], "count() (polars.dataframe method)": [[179, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[377, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[798, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count_matches() (polars.expr.arr method)": [[342, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[491, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[628, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[912, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1063, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1164, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[707, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy", false]], "cum_count() (in module polars)": [[708, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[378, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[951, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[709, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[379, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[952, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[380, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[953, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[381, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[954, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[710, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[711, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[382, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[955, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[712, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[383, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[956, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[384, "polars.Expr.cut", false]], "cut() (polars.series method)": [[957, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date", false]], "date() (in module polars)": [[713, "polars.date", false]], "date() (in module polars.selectors)": [[889, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[397, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[969, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[714, "polars.date_range", false]], "date_ranges() (in module polars)": [[715, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[716, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[889, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[398, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[970, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[717, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[718, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[399, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[971, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[889, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[363, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[629, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[932, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1165, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[385, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[180, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[799, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[958, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[181, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[386, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[800, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[387, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[492, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[959, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1064, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[889, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[388, "polars.Expr.dot", false]], "dot() (polars.series method)": [[960, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[182, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[801, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[183, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[389, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[961, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[184, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[390, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[493, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[802, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[962, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1065, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[400, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[972, "polars.Series.dt.dst_offset", false]], "dtype (polars.series attribute)": [[1011, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[185, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[803, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[92, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[719, "polars.duration", false]], "duration() (in module polars.selectors)": [[889, "polars.selectors.duration", false]], "element() (in module polars)": [[720, "polars.element", false]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[364, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[630, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[933, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1166, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[889, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[365, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[631, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[934, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1167, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[435, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1012, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[401, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[973, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[436, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[535, "polars.Expr.meta.eq", false]], "eq_missing() (polars.expr method)": [[437, "polars.Expr.eq_missing", false]], "equals() (polars.dataframe method)": [[186, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1013, "polars.Series.equals", false]], "estimated_size() (polars.dataframe method)": [[187, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1014, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[494, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1066, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[438, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1015, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[439, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1016, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[440, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1017, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[441, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1018, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[721, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[889, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[442, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1250, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1251, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[443, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1019, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[889, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[804, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[188, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[444, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[343, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[495, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[632, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[805, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1020, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[913, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1067, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1168, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[189, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1021, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[445, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1022, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[633, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1169, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[634, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1170, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[635, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1171, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[636, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1172, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[877, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[878, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[671, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1207, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1208, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[190, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[446, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[806, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1023, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[191, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[447, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[807, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1024, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[192, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[448, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[808, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1025, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[637, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1173, "polars.Series.str.find", false]], "first() (in module polars)": [[722, "polars.first", false]], "first() (in module polars.selectors)": [[889, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[449, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[344, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[496, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[809, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series.arr method)": [[914, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1068, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[193, "polars.DataFrame.flags", false]], "flags (polars.series attribute)": [[1026, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[450, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[889, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[451, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1027, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[452, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[723, "polars.fold", false]], "fold() (polars.dataframe method)": [[194, "polars.DataFrame.fold", false]], "format() (in module polars)": [[724, "polars.format", false]], "forward_fill() (polars.expr method)": [[453, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[116, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[118, "polars.from_dict", false]], "from_dicts() (in module polars)": [[119, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[725, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[454, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[120, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[121, "polars.from_pandas", false]], "from_records() (in module polars)": [[122, "polars.from_records", false]], "from_repr() (in module polars)": [[123, "polars.from_repr", false]], "gather() (polars.expr method)": [[455, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[497, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1028, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1069, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[195, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[456, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[498, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[810, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1029, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1070, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[457, "polars.Expr.ge", false]], "get() (polars.expr method)": [[458, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[345, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[499, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[915, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1071, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[370, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[938, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1030, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[196, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[197, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[198, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[124, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[199, "polars.DataFrame.glimpse", false]], "group_by() (polars.dataframe method)": [[200, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[811, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[201, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[812, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[726, "polars.groups", false]], "gt() (polars.expr method)": [[459, "polars.Expr.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[536, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[460, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1031, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1032, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[461, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1033, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[202, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[727, "polars.head", false]], "head() (polars.dataframe method)": [[203, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[462, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[500, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[638, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[813, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1034, "polars.Series.head", false]], "head() (polars.series.list method)": [[1072, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1174, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[204, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[463, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1035, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[402, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[974, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[205, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[728, "polars.implode", false]], "implode() (polars.expr method)": [[464, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1036, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[206, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[465, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[814, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[729, "polars.int_range", false]], "int_ranges() (in module polars)": [[730, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[889, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[207, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[466, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[815, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1037, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[467, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1038, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[468, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1039, "polars.Series.is_between", false]], "is_column_selection() (polars.expr.meta method)": [[537, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[208, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[469, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1040, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[209, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1041, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[470, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1042, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[471, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1043, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[472, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1044, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[473, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1045, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[474, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1046, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[403, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[975, "polars.Series.dt.is_leap_year", false]], "is_local() (polars.series.cat method)": [[939, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[475, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1047, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[476, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1048, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[477, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1049, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[478, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1050, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[538, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[889, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1051, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[210, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[479, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1052, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[404, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[976, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[211, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1053, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[212, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[213, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[214, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[215, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[346, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[501, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[639, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[816, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[916, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1073, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1175, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[216, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[817, "polars.LazyFrame.join_asof", false]], "json_decode() (polars.expr.str method)": [[640, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1176, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[672, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1209, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[126, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[641, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1177, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[552, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[480, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1054, "polars.Series.kurtosis", false]], "last() (in module polars)": [[731, "polars.last", false]], "last() (in module polars.selectors)": [[889, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[481, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[347, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[502, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[818, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series.arr method)": [[917, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1074, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[217, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[819, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[482, "polars.Expr.le", false]], "len() (in module polars)": [[732, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[483, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[503, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1055, "polars.Series.len", false]], "len() (polars.series.list method)": [[1075, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[642, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1178, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[643, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1179, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[218, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[484, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[820, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1056, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[733, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[525, "polars.Expr.log", false]], "log() (polars.series method)": [[1097, "polars.Series.log", false]], "log10() (polars.expr method)": [[526, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1098, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[527, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1099, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[528, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1100, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[529, "polars.Expr.lt", false]], "map() (polars.expr.name method)": [[553, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[734, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[530, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[821, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[531, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1101, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[554, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[735, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[219, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[889, "polars.selectors.matches", false]], "max() (in module polars)": [[736, "polars.max", false]], "max() (polars.dataframe method)": [[220, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[532, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[348, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[504, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[822, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1102, "polars.Series.max", false]], "max() (polars.series.arr method)": [[918, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[977, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1076, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[737, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[221, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[738, "polars.mean", false]], "mean() (polars.dataframe method)": [[222, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[533, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[505, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[823, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1103, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[978, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1077, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[739, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[223, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[740, "polars.median", false]], "median() (polars.dataframe method)": [[224, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[534, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[349, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[506, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[824, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1104, "polars.Series.median", false]], "median() (polars.series.arr method)": [[919, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[979, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1078, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[225, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[825, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[226, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[826, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[405, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[980, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[406, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[981, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[407, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[982, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[741, "polars.min", false]], "min() (polars.dataframe method)": [[227, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[547, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[350, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[507, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[827, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1105, "polars.Series.min", false]], "min() (polars.series.arr method)": [[920, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[983, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1079, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[742, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[228, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[408, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[984, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[548, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[549, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1106, "polars.Series.mode", false]], "module": [[887, "module-polars.plugins", false], [889, "module-polars.selectors", false]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[409, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[985, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[410, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[986, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[411, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[987, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[550, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[229, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1107, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[743, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[230, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[551, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[351, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[508, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1108, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[921, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1080, "polars.Series.list.n_unique", false]], "name (polars.series attribute)": [[1109, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[561, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1110, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[562, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1111, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[412, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[988, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[563, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[539, "polars.Expr.meta.ne", false]], "ne_missing() (polars.expr method)": [[564, "polars.Expr.ne_missing", false]], "neg() (polars.expr method)": [[565, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1112, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[96, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[566, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1113, "polars.Series.not_", false]], "nth() (in module polars)": [[744, "polars.nth", false]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[231, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[567, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[828, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1114, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[889, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[413, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[989, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[745, "polars.ones", false]], "or_() (polars.expr method)": [[568, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[414, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[990, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[540, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[569, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[644, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1180, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[645, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1181, "polars.Series.str.pad_start", false]], "panicexception": [[99, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[232, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[570, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1115, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[571, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1116, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[572, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1117, "polars.Series.peak_min", false]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[233, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[573, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[829, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[234, "polars.DataFrame.pivot", false]], "polars.plugins": [[887, "module-polars.plugins", false]], "polars.selectors": [[889, "module-polars.selectors", false]], "polarserror": [[102, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[104, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[541, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[574, "polars.Expr.pow", false]], "prefix() (polars.expr.name method)": [[555, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[556, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[235, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[575, "polars.Expr.product", false]], "product() (polars.series method)": [[1118, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[830, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[576, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1119, "polars.Series.qcut", false]], "quantile() (in module polars)": [[746, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[236, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[577, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[831, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[873, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1120, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[415, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[991, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[578, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[579, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1121, "polars.Series.rank", false]], "read_avro() (in module polars)": [[127, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[129, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[131, "polars.read_database", false]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[133, "polars.read_delta", false]], "read_excel() (in module polars)": [[134, "polars.read_excel", false]], "read_ipc() (in module polars)": [[135, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[138, "polars.read_json", false]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[140, "polars.read_ods", false]], "read_parquet() (in module polars)": [[141, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[237, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[580, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1122, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[747, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1252, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1253, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1254, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[887, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[581, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1123, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[238, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[832, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1124, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[673, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1210, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[748, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[582, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[583, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[646, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1125, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1182, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[647, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1183, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[239, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[648, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1184, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[584, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1126, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[416, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[992, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[585, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1127, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[240, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[586, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[352, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[509, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[649, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[833, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1128, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[922, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1081, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1185, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[587, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1129, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[588, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1130, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[241, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[589, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[834, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[749, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[750, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[590, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1131, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[591, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1132, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[592, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[593, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1133, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[594, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[595, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1134, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[596, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[597, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1135, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[598, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[599, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1136, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[600, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[601, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1137, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[602, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1138, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[603, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[604, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1139, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[605, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[606, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1140, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[607, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[542, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[608, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[417, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1141, "polars.Series.round", false]], "round() (polars.series.dt method)": [[993, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[609, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1142, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[242, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[243, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[244, "polars.DataFrame.rows_by_key", false]], "rowserror": [[105, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[245, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[610, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[510, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1143, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1082, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[143, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[144, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1144, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[246, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[835, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1211, "polars.Series.struct.schema", false]], "schemaerror": [[108, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[611, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1145, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[418, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[994, "polars.Series.dt.second", false]], "select() (in module polars)": [[751, "polars.select", false]], "select() (polars.dataframe method)": [[247, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[836, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[248, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[837, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[249, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[543, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[838, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1146, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[511, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1083, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[512, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1084, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[250, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[612, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[839, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1147, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[513, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1085, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[514, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1086, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[251, "polars.DataFrame.shape", false]], "shape (polars.series attribute)": [[1148, "polars.Series.shape", false]], "shapeerror": [[110, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[252, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[613, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[353, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[515, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[840, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1149, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[923, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1087, "polars.Series.list.shift", false]], "show_graph() (polars.lazyframe method)": [[841, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[151, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[614, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1150, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[253, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1151, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[615, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1152, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[616, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1153, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[889, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[617, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1154, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[618, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1155, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet", false]], "skew() (polars.expr method)": [[619, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1156, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[254, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[620, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[516, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[650, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[842, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1157, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1088, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1186, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[255, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[621, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[354, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[517, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[843, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1158, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[924, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1089, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[622, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[651, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1187, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[652, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1188, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[653, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1189, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[752, "polars.sql", false]], "sql() (polars.dataframe method)": [[256, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[844, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[753, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1268, "polars.SQLContext", false]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[623, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1159, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[889, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[366, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[654, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[935, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1190, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[754, "polars.std", false]], "std() (polars.dataframe method)": [[257, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[624, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[355, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[518, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[845, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1160, "polars.Series.std", false]], "std() (polars.series.arr method)": [[925, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1090, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[419, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[995, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[889, "polars.selectors.string", false]], "stringcache (class in polars)": [[46, "polars.StringCache", false]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[655, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1191, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[656, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1192, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[657, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1193, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[658, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1194, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[659, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1195, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[660, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1196, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[755, "polars.struct", false]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[313, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[675, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[557, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[558, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[756, "polars.sum", false]], "sum() (polars.dataframe method)": [[258, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[676, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[356, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[519, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[846, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[874, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1213, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[926, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1091, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[757, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[259, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1255, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[758, "polars.tail", false]], "tail() (polars.dataframe method)": [[260, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[677, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[520, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[661, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[847, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1214, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1092, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1197, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[678, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1215, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[679, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1216, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[889, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time", false]], "time() (in module polars)": [[759, "polars.time", false]], "time() (in module polars.selectors)": [[889, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[420, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[996, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[760, "polars.time_range", false]], "time_ranges() (in module polars)": [[761, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[421, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[997, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[521, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1093, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[261, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1217, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[662, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1198, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[663, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1199, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[664, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1200, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[262, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[263, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[264, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1218, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1219, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[265, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1220, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[665, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1201, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[266, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1221, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[357, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1222, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[927, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[940, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[559, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[666, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1202, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[267, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1223, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[268, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1224, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[680, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1225, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[269, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[422, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[998, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[270, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[358, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[522, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[928, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1094, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[667, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1203, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[668, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1204, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[271, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1226, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[560, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[669, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1205, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[272, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[681, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[848, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1227, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[682, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[423, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[999, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[424, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1000, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[425, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1001, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[426, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1002, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1003, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[428, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1004, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[429, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1005, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[273, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[544, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[683, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[430, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1006, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[545, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[274, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[684, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[359, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[523, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[849, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1228, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[929, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1095, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[685, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1229, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[275, "polars.DataFrame.unnest", false]], "unnest() (polars.lazyframe method)": [[850, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1212, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[276, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[851, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1256, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[889, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[277, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[278, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[852, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[686, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1230, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[279, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[941, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[687, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1231, "polars.Series.value_counts", false]], "var() (in module polars)": [[762, "polars.var", false]], "var() (polars.dataframe method)": [[280, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[688, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[360, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[524, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[853, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1232, "polars.Series.var", false]], "var() (polars.series.arr method)": [[930, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1096, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[281, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[431, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1007, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[432, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1008, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[763, "polars.when", false]], "where() (polars.expr method)": [[689, "polars.Expr.where", false]], "width (polars.dataframe property)": [[282, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[854, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[283, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[855, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[284, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[856, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[857, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[674, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[285, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[858, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[286, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[859, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[433, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1009, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[546, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[690, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[434, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1010, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[764, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[670, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1206, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1233, "polars.Series.zip_with", false]]}, "objects": {"polars": [[1268, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [691, 4, 1, "", "all"], [692, 4, 1, "", "all_horizontal"], [693, 4, 1, "", "any"], [694, 4, 1, "", "any_horizontal"], [695, 4, 1, "", "approx_n_unique"], [696, 4, 1, "", "arange"], [697, 4, 1, "", "arctan2"], [698, 4, 1, "", "arctan2d"], [699, 4, 1, "", "arg_sort_by"], [700, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [701, 4, 1, "", "business_day_count"], [702, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [703, 4, 1, "", "concat_list"], [704, 4, 1, "", "concat_str"], [705, 4, 1, "", "corr"], [706, 4, 1, "", "count"], [707, 4, 1, "", "cov"], [708, 4, 1, "", "cum_count"], [709, 4, 1, "", "cum_fold"], [710, 4, 1, "", "cum_reduce"], [711, 4, 1, "", "cum_sum"], [712, 4, 1, "", "cum_sum_horizontal"], [713, 4, 1, "", "date"], [714, 4, 1, "", "date_range"], [715, 4, 1, "", "date_ranges"], [716, 4, 1, "", "datetime"], [717, 4, 1, "", "datetime_range"], [718, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [719, 4, 1, "", "duration"], [720, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [721, 4, 1, "", "exclude"], [722, 4, 1, "", "first"], [723, 4, 1, "", "fold"], [724, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [725, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [726, 4, 1, "", "groups"], [727, 4, 1, "", "head"], [728, 4, 1, "", "implode"], [729, 4, 1, "", "int_range"], [730, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [731, 4, 1, "", "last"], [732, 4, 1, "", "len"], [733, 4, 1, "", "lit"], [734, 4, 1, "", "map_batches"], [735, 4, 1, "", "map_groups"], [736, 4, 1, "", "max"], [737, 4, 1, "", "max_horizontal"], [738, 4, 1, "", "mean"], [739, 4, 1, "", "mean_horizontal"], [740, 4, 1, "", "median"], [741, 4, 1, "", "min"], [742, 4, 1, "", "min_horizontal"], [743, 4, 1, "", "n_unique"], [744, 4, 1, "", "nth"], [745, 4, 1, "", "ones"], [887, 6, 0, "-", "plugins"], [746, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [747, 4, 1, "", "reduce"], [748, 4, 1, "", "repeat"], [749, 4, 1, "", "rolling_corr"], [750, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [751, 4, 1, "", "select"], [889, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [752, 4, 1, "", "sql"], [753, 4, 1, "", "sql_expr"], [754, 4, 1, "", "std"], [755, 4, 1, "", "struct"], [756, 4, 1, "", "sum"], [757, 4, 1, "", "sum_horizontal"], [758, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [759, 4, 1, "", "time"], [760, 4, 1, "", "time_range"], [761, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [762, 4, 1, "", "var"], [763, 4, 1, "", "when"], [764, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__dataframe__"], [171, 0, 1, "", "approx_n_unique"], [172, 0, 1, "", "bottom_k"], [173, 0, 1, "", "cast"], [174, 0, 1, "", "clear"], [175, 0, 1, "", "clone"], [176, 0, 1, "", "collect_schema"], [177, 1, 1, "", "columns"], [178, 0, 1, "", "corr"], [179, 0, 1, "", "count"], [180, 0, 1, "", "describe"], [181, 0, 1, "", "deserialize"], [182, 0, 1, "", "drop"], [183, 0, 1, "", "drop_in_place"], [184, 0, 1, "", "drop_nulls"], [185, 1, 1, "", "dtypes"], [186, 0, 1, "", "equals"], [187, 0, 1, "", "estimated_size"], [188, 0, 1, "", "explode"], [189, 0, 1, "", "extend"], [190, 0, 1, "", "fill_nan"], [191, 0, 1, "", "fill_null"], [192, 0, 1, "", "filter"], [193, 1, 1, "", "flags"], [194, 0, 1, "", "fold"], [195, 0, 1, "", "gather_every"], [196, 0, 1, "", "get_column"], [197, 0, 1, "", "get_column_index"], [198, 0, 1, "", "get_columns"], [199, 0, 1, "", "glimpse"], [200, 0, 1, "", "group_by"], [201, 0, 1, "", "group_by_dynamic"], [202, 0, 1, "", "hash_rows"], [203, 0, 1, "", "head"], [204, 1, 1, "", "height"], [205, 0, 1, "", "hstack"], [206, 0, 1, "", "insert_column"], [207, 0, 1, "", "interpolate"], [208, 0, 1, "", "is_duplicated"], [209, 0, 1, "", "is_empty"], [210, 0, 1, "", "is_unique"], [211, 0, 1, "", "item"], [212, 0, 1, "", "iter_columns"], [213, 0, 1, "", "iter_rows"], [214, 0, 1, "", "iter_slices"], [215, 0, 1, "", "join"], [216, 0, 1, "", "join_asof"], [217, 0, 1, "", "lazy"], [218, 0, 1, "", "limit"], [219, 0, 1, "", "map_rows"], [220, 0, 1, "", "max"], [221, 0, 1, "", "max_horizontal"], [222, 0, 1, "", "mean"], [223, 0, 1, "", "mean_horizontal"], [224, 0, 1, "", "median"], [225, 0, 1, "", "melt"], [226, 0, 1, "", "merge_sorted"], [227, 0, 1, "", "min"], [228, 0, 1, "", "min_horizontal"], [229, 0, 1, "", "n_chunks"], [230, 0, 1, "", "n_unique"], [231, 0, 1, "", "null_count"], [232, 0, 1, "", "partition_by"], [233, 0, 1, "", "pipe"], [234, 0, 1, "", "pivot"], [235, 0, 1, "", "product"], [236, 0, 1, "", "quantile"], [237, 0, 1, "", "rechunk"], [238, 0, 1, "", "rename"], [239, 0, 1, "", "replace_column"], [240, 0, 1, "", "reverse"], [241, 0, 1, "", "rolling"], [242, 0, 1, "", "row"], [243, 0, 1, "", "rows"], [244, 0, 1, "", "rows_by_key"], [245, 0, 1, "", "sample"], [246, 1, 1, "", "schema"], [247, 0, 1, "", "select"], [248, 0, 1, "", "select_seq"], [249, 0, 1, "", "serialize"], [250, 0, 1, "", "set_sorted"], [251, 1, 1, "", "shape"], [252, 0, 1, "", "shift"], [253, 0, 1, "", "shrink_to_fit"], [254, 0, 1, "", "slice"], [255, 0, 1, "", "sort"], [256, 0, 1, "", "sql"], [257, 0, 1, "", "std"], [313, 1, 1, "", "style"], [258, 0, 1, "", "sum"], [259, 0, 1, "", "sum_horizontal"], [260, 0, 1, "", "tail"], [261, 0, 1, "", "to_arrow"], [262, 0, 1, "", "to_dict"], [263, 0, 1, "", "to_dicts"], [264, 0, 1, "", "to_dummies"], [265, 0, 1, "", "to_init_repr"], [266, 0, 1, "", "to_jax"], [267, 0, 1, "", "to_numpy"], [268, 0, 1, "", "to_pandas"], [269, 0, 1, "", "to_series"], [270, 0, 1, "", "to_struct"], [271, 0, 1, "", "to_torch"], [272, 0, 1, "", "top_k"], [273, 0, 1, "", "transpose"], [274, 0, 1, "", "unique"], [275, 0, 1, "", "unnest"], [276, 0, 1, "", "unpivot"], [277, 0, 1, "", "unstack"], [278, 0, 1, "", "update"], [279, 0, 1, "", "upsample"], [280, 0, 1, "", "var"], [281, 0, 1, "", "vstack"], [282, 1, 1, "", "width"], [283, 0, 1, "", "with_columns"], [284, 0, 1, "", "with_columns_seq"], [285, 0, 1, "", "with_row_count"], [286, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[317, 0, 1, "", "abs"], [318, 0, 1, "", "add"], [319, 0, 1, "", "agg_groups"], [320, 0, 1, "", "alias"], [321, 0, 1, "", "all"], [322, 0, 1, "", "and_"], [323, 0, 1, "", "any"], [324, 0, 1, "", "append"], [325, 0, 1, "", "approx_n_unique"], [326, 0, 1, "", "arccos"], [327, 0, 1, "", "arccosh"], [328, 0, 1, "", "arcsin"], [329, 0, 1, "", "arcsinh"], [330, 0, 1, "", "arctan"], [331, 0, 1, "", "arctanh"], [332, 0, 1, "", "arg_max"], [333, 0, 1, "", "arg_min"], [334, 0, 1, "", "arg_sort"], [335, 0, 1, "", "arg_true"], [336, 0, 1, "", "arg_unique"], [361, 0, 1, "", "backward_fill"], [367, 0, 1, "", "bottom_k"], [368, 0, 1, "", "bottom_k_by"], [369, 0, 1, "", "cast"], [371, 0, 1, "", "cbrt"], [372, 0, 1, "", "ceil"], [373, 0, 1, "", "clip"], [374, 0, 1, "", "cos"], [375, 0, 1, "", "cosh"], [376, 0, 1, "", "cot"], [377, 0, 1, "", "count"], [378, 0, 1, "", "cum_count"], [379, 0, 1, "", "cum_max"], [380, 0, 1, "", "cum_min"], [381, 0, 1, "", "cum_prod"], [382, 0, 1, "", "cum_sum"], [383, 0, 1, "", "cumulative_eval"], [384, 0, 1, "", "cut"], [385, 0, 1, "", "degrees"], [386, 0, 1, "", "deserialize"], [387, 0, 1, "", "diff"], [388, 0, 1, "", "dot"], [389, 0, 1, "", "drop_nans"], [390, 0, 1, "", "drop_nulls"], [435, 0, 1, "", "entropy"], [436, 0, 1, "", "eq"], [437, 0, 1, "", "eq_missing"], [438, 0, 1, "", "ewm_mean"], [439, 0, 1, "", "ewm_mean_by"], [440, 0, 1, "", "ewm_std"], [441, 0, 1, "", "ewm_var"], [442, 0, 1, "", "exclude"], [443, 0, 1, "", "exp"], [444, 0, 1, "", "explode"], [445, 0, 1, "", "extend_constant"], [446, 0, 1, "", "fill_nan"], [447, 0, 1, "", "fill_null"], [448, 0, 1, "", "filter"], [449, 0, 1, "", "first"], [450, 0, 1, "", "flatten"], [451, 0, 1, "", "floor"], [452, 0, 1, "", "floordiv"], [453, 0, 1, "", "forward_fill"], [454, 0, 1, "", "from_json"], [455, 0, 1, "", "gather"], [456, 0, 1, "", "gather_every"], [457, 0, 1, "", "ge"], [458, 0, 1, "", "get"], [459, 0, 1, "", "gt"], [460, 0, 1, "", "has_nulls"], [461, 0, 1, "", "hash"], [462, 0, 1, "", "head"], [463, 0, 1, "", "hist"], [464, 0, 1, "", "implode"], [465, 0, 1, "", "inspect"], [466, 0, 1, "", "interpolate"], [467, 0, 1, "", "interpolate_by"], [468, 0, 1, "", "is_between"], [469, 0, 1, "", "is_duplicated"], [470, 0, 1, "", "is_finite"], [471, 0, 1, "", "is_first_distinct"], [472, 0, 1, "", "is_in"], [473, 0, 1, "", "is_infinite"], [474, 0, 1, "", "is_last_distinct"], [475, 0, 1, "", "is_nan"], [476, 0, 1, "", "is_not_nan"], [477, 0, 1, "", "is_not_null"], [478, 0, 1, "", "is_null"], [479, 0, 1, "", "is_unique"], [480, 0, 1, "", "kurtosis"], [481, 0, 1, "", "last"], [482, 0, 1, "", "le"], [483, 0, 1, "", "len"], [484, 0, 1, "", "limit"], [525, 0, 1, "", "log"], [526, 0, 1, "", "log10"], [527, 0, 1, "", "log1p"], [528, 0, 1, "", "lower_bound"], [529, 0, 1, "", "lt"], [530, 0, 1, "", "map_batches"], [531, 0, 1, "", "map_elements"], [532, 0, 1, "", "max"], [533, 0, 1, "", "mean"], [534, 0, 1, "", "median"], [547, 0, 1, "", "min"], [548, 0, 1, "", "mod"], [549, 0, 1, "", "mode"], [550, 0, 1, "", "mul"], [551, 0, 1, "", "n_unique"], [561, 0, 1, "", "nan_max"], [562, 0, 1, "", "nan_min"], [563, 0, 1, "", "ne"], [564, 0, 1, "", "ne_missing"], [565, 0, 1, "", "neg"], [566, 0, 1, "", "not_"], [567, 0, 1, "", "null_count"], [568, 0, 1, "", "or_"], [569, 0, 1, "", "over"], [570, 0, 1, "", "pct_change"], [571, 0, 1, "", "peak_max"], [572, 0, 1, "", "peak_min"], [573, 0, 1, "", "pipe"], [574, 0, 1, "", "pow"], [575, 0, 1, "", "product"], [576, 0, 1, "", "qcut"], [577, 0, 1, "", "quantile"], [578, 0, 1, "", "radians"], [579, 0, 1, "", "rank"], [580, 0, 1, "", "rechunk"], [581, 0, 1, "", "reinterpret"], [582, 0, 1, "", "repeat_by"], [583, 0, 1, "", "replace"], [584, 0, 1, "", "replace_strict"], [585, 0, 1, "", "reshape"], [586, 0, 1, "", "reverse"], [587, 0, 1, "", "rle"], [588, 0, 1, "", "rle_id"], [589, 0, 1, "", "rolling"], [590, 0, 1, "", "rolling_map"], [591, 0, 1, "", "rolling_max"], [592, 0, 1, "", "rolling_max_by"], [593, 0, 1, "", "rolling_mean"], [594, 0, 1, "", "rolling_mean_by"], [595, 0, 1, "", "rolling_median"], [596, 0, 1, "", "rolling_median_by"], [597, 0, 1, "", "rolling_min"], [598, 0, 1, "", "rolling_min_by"], [599, 0, 1, "", "rolling_quantile"], [600, 0, 1, "", "rolling_quantile_by"], [601, 0, 1, "", "rolling_skew"], [602, 0, 1, "", "rolling_std"], [603, 0, 1, "", "rolling_std_by"], [604, 0, 1, "", "rolling_sum"], [605, 0, 1, "", "rolling_sum_by"], [606, 0, 1, "", "rolling_var"], [607, 0, 1, "", "rolling_var_by"], [608, 0, 1, "", "round"], [609, 0, 1, "", "round_sig_figs"], [610, 0, 1, "", "sample"], [611, 0, 1, "", "search_sorted"], [612, 0, 1, "", "set_sorted"], [613, 0, 1, "", "shift"], [614, 0, 1, "", "shrink_dtype"], [615, 0, 1, "", "shuffle"], [616, 0, 1, "", "sign"], [617, 0, 1, "", "sin"], [618, 0, 1, "", "sinh"], [619, 0, 1, "", "skew"], [620, 0, 1, "", "slice"], [621, 0, 1, "", "sort"], [622, 0, 1, "", "sort_by"], [623, 0, 1, "", "sqrt"], [624, 0, 1, "", "std"], [675, 0, 1, "", "sub"], [676, 0, 1, "", "sum"], [677, 0, 1, "", "tail"], [678, 0, 1, "", "tan"], [679, 0, 1, "", "tanh"], [680, 0, 1, "", "to_physical"], [681, 0, 1, "", "top_k"], [682, 0, 1, "", "top_k_by"], [683, 0, 1, "", "truediv"], [684, 0, 1, "", "unique"], [685, 0, 1, "", "unique_counts"], [686, 0, 1, "", "upper_bound"], [687, 0, 1, "", "value_counts"], [688, 0, 1, "", "var"], [689, 0, 1, "", "where"], [690, 0, 1, "", "xor"]], "polars.Expr.arr": [[337, 0, 1, "", "all"], [338, 0, 1, "", "any"], [339, 0, 1, "", "arg_max"], [340, 0, 1, "", "arg_min"], [341, 0, 1, "", "contains"], [342, 0, 1, "", "count_matches"], [343, 0, 1, "", "explode"], [344, 0, 1, "", "first"], [345, 0, 1, "", "get"], [346, 0, 1, "", "join"], [347, 0, 1, "", "last"], [348, 0, 1, "", "max"], [349, 0, 1, "", "median"], [350, 0, 1, "", "min"], [351, 0, 1, "", "n_unique"], [352, 0, 1, "", "reverse"], [353, 0, 1, "", "shift"], [354, 0, 1, "", "sort"], [355, 0, 1, "", "std"], [356, 0, 1, "", "sum"], [357, 0, 1, "", "to_list"], [358, 0, 1, "", "to_struct"], [359, 0, 1, "", "unique"], [360, 0, 1, "", "var"]], "polars.Expr.bin": [[362, 0, 1, "", "contains"], [363, 0, 1, "", "decode"], [364, 0, 1, "", "encode"], [365, 0, 1, "", "ends_with"], [366, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[370, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[391, 0, 1, "", "add_business_days"], [392, 0, 1, "", "base_utc_offset"], [393, 0, 1, "", "cast_time_unit"], [394, 0, 1, "", "century"], [395, 0, 1, "", "combine"], [396, 0, 1, "", "convert_time_zone"], [397, 0, 1, "", "date"], [398, 0, 1, "", "datetime"], [399, 0, 1, "", "day"], [400, 0, 1, "", "dst_offset"], [401, 0, 1, "", "epoch"], [402, 0, 1, "", "hour"], [403, 0, 1, "", "is_leap_year"], [404, 0, 1, "", "iso_year"], [405, 0, 1, "", "microsecond"], [406, 0, 1, "", "millennium"], [407, 0, 1, "", "millisecond"], [408, 0, 1, "", "minute"], [409, 0, 1, "", "month"], [410, 0, 1, "", "month_end"], [411, 0, 1, "", "month_start"], [412, 0, 1, "", "nanosecond"], [413, 0, 1, "", "offset_by"], [414, 0, 1, "", "ordinal_day"], [415, 0, 1, "", "quarter"], [416, 0, 1, "", "replace_time_zone"], [417, 0, 1, "", "round"], [418, 0, 1, "", "second"], [419, 0, 1, "", "strftime"], [420, 0, 1, "", "time"], [421, 0, 1, "", "timestamp"], [422, 0, 1, "", "to_string"], [423, 0, 1, "", "total_days"], [424, 0, 1, "", "total_hours"], [425, 0, 1, "", "total_microseconds"], [426, 0, 1, "", "total_milliseconds"], [427, 0, 1, "", "total_minutes"], [428, 0, 1, "", "total_nanoseconds"], [429, 0, 1, "", "total_seconds"], [430, 0, 1, "", "truncate"], [431, 0, 1, "", "week"], [432, 0, 1, "", "weekday"], [433, 0, 1, "", "with_time_unit"], [434, 0, 1, "", "year"]], "polars.Expr.list": [[485, 0, 1, "", "all"], [486, 0, 1, "", "any"], [487, 0, 1, "", "arg_max"], [488, 0, 1, "", "arg_min"], [489, 0, 1, "", "concat"], [490, 0, 1, "", "contains"], [491, 0, 1, "", "count_matches"], [492, 0, 1, "", "diff"], [493, 0, 1, "", "drop_nulls"], [494, 0, 1, "", "eval"], [495, 0, 1, "", "explode"], [496, 0, 1, "", "first"], [497, 0, 1, "", "gather"], [498, 0, 1, "", "gather_every"], [499, 0, 1, "", "get"], [500, 0, 1, "", "head"], [501, 0, 1, "", "join"], [502, 0, 1, "", "last"], [503, 0, 1, "", "len"], [504, 0, 1, "", "max"], [505, 0, 1, "", "mean"], [506, 0, 1, "", "median"], [507, 0, 1, "", "min"], [508, 0, 1, "", "n_unique"], [509, 0, 1, "", "reverse"], [510, 0, 1, "", "sample"], [511, 0, 1, "", "set_difference"], [512, 0, 1, "", "set_intersection"], [513, 0, 1, "", "set_symmetric_difference"], [514, 0, 1, "", "set_union"], [515, 0, 1, "", "shift"], [516, 0, 1, "", "slice"], [517, 0, 1, "", "sort"], [518, 0, 1, "", "std"], [519, 0, 1, "", "sum"], [520, 0, 1, "", "tail"], [521, 0, 1, "", "to_array"], [522, 0, 1, "", "to_struct"], [523, 0, 1, "", "unique"], [524, 0, 1, "", "var"]], "polars.Expr.meta": [[535, 0, 1, "", "eq"], [536, 0, 1, "", "has_multiple_outputs"], [537, 0, 1, "", "is_column_selection"], [538, 0, 1, "", "is_regex_projection"], [539, 0, 1, "", "ne"], [540, 0, 1, "", "output_name"], [541, 0, 1, "", "pop"], [542, 0, 1, "", "root_names"], [543, 0, 1, "", "serialize"], [544, 0, 1, "", "tree_format"], [545, 0, 1, "", "undo_aliases"], [546, 0, 1, "", "write_json"]], "polars.Expr.name": [[552, 0, 1, "", "keep"], [553, 0, 1, "", "map"], [554, 0, 1, "", "map_fields"], [555, 0, 1, "", "prefix"], [556, 0, 1, "", "prefix_fields"], [557, 0, 1, "", "suffix"], [558, 0, 1, "", "suffix_fields"], [559, 0, 1, "", "to_lowercase"], [560, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[625, 0, 1, "", "concat"], [626, 0, 1, "", "contains"], [627, 0, 1, "", "contains_any"], [628, 0, 1, "", "count_matches"], [629, 0, 1, "", "decode"], [630, 0, 1, "", "encode"], [631, 0, 1, "", "ends_with"], [632, 0, 1, "", "explode"], [633, 0, 1, "", "extract"], [634, 0, 1, "", "extract_all"], [635, 0, 1, "", "extract_groups"], [636, 0, 1, "", "extract_many"], [637, 0, 1, "", "find"], [638, 0, 1, "", "head"], [639, 0, 1, "", "join"], [640, 0, 1, "", "json_decode"], [641, 0, 1, "", "json_path_match"], [642, 0, 1, "", "len_bytes"], [643, 0, 1, "", "len_chars"], [644, 0, 1, "", "pad_end"], [645, 0, 1, "", "pad_start"], [646, 0, 1, "", "replace"], [647, 0, 1, "", "replace_all"], [648, 0, 1, "", "replace_many"], [649, 0, 1, "", "reverse"], [650, 0, 1, "", "slice"], [651, 0, 1, "", "split"], [652, 0, 1, "", "split_exact"], [653, 0, 1, "", "splitn"], [654, 0, 1, "", "starts_with"], [655, 0, 1, "", "strip_chars"], [656, 0, 1, "", "strip_chars_end"], [657, 0, 1, "", "strip_chars_start"], [658, 0, 1, "", "strip_prefix"], [659, 0, 1, "", "strip_suffix"], [660, 0, 1, "", "strptime"], [661, 0, 1, "", "tail"], [662, 0, 1, "", "to_date"], [663, 0, 1, "", "to_datetime"], [664, 0, 1, "", "to_decimal"], [665, 0, 1, "", "to_integer"], [666, 0, 1, "", "to_lowercase"], [667, 0, 1, "", "to_time"], [668, 0, 1, "", "to_titlecase"], [669, 0, 1, "", "to_uppercase"], [670, 0, 1, "", "zfill"]], "polars.Expr.struct": [[671, 0, 1, "", "field"], [672, 0, 1, "", "json_encode"], [673, 0, 1, "", "rename_fields"], [674, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[788, 0, 1, "", "approx_n_unique"], [789, 0, 1, "", "bottom_k"], [790, 0, 1, "", "cache"], [791, 0, 1, "", "cast"], [792, 0, 1, "", "clear"], [793, 0, 1, "", "clone"], [794, 0, 1, "", "collect"], [795, 0, 1, "", "collect_async"], [796, 0, 1, "", "collect_schema"], [797, 1, 1, "", "columns"], [798, 0, 1, "", "count"], [799, 0, 1, "", "describe"], [800, 0, 1, "", "deserialize"], [801, 0, 1, "", "drop"], [802, 0, 1, "", "drop_nulls"], [803, 1, 1, "", "dtypes"], [804, 0, 1, "", "explain"], [805, 0, 1, "", "explode"], [806, 0, 1, "", "fill_nan"], [807, 0, 1, "", "fill_null"], [808, 0, 1, "", "filter"], [809, 0, 1, "", "first"], [810, 0, 1, "", "gather_every"], [811, 0, 1, "", "group_by"], [812, 0, 1, "", "group_by_dynamic"], [813, 0, 1, "", "head"], [814, 0, 1, "", "inspect"], [815, 0, 1, "", "interpolate"], [816, 0, 1, "", "join"], [817, 0, 1, "", "join_asof"], [818, 0, 1, "", "last"], [819, 0, 1, "", "lazy"], [820, 0, 1, "", "limit"], [821, 0, 1, "", "map_batches"], [822, 0, 1, "", "max"], [823, 0, 1, "", "mean"], [824, 0, 1, "", "median"], [825, 0, 1, "", "melt"], [826, 0, 1, "", "merge_sorted"], [827, 0, 1, "", "min"], [828, 0, 1, "", "null_count"], [829, 0, 1, "", "pipe"], [830, 0, 1, "", "profile"], [831, 0, 1, "", "quantile"], [832, 0, 1, "", "rename"], [833, 0, 1, "", "reverse"], [834, 0, 1, "", "rolling"], [835, 1, 1, "", "schema"], [836, 0, 1, "", "select"], [837, 0, 1, "", "select_seq"], [838, 0, 1, "", "serialize"], [839, 0, 1, "", "set_sorted"], [840, 0, 1, "", "shift"], [841, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [842, 0, 1, "", "slice"], [843, 0, 1, "", "sort"], [844, 0, 1, "", "sql"], [845, 0, 1, "", "std"], [846, 0, 1, "", "sum"], [847, 0, 1, "", "tail"], [848, 0, 1, "", "top_k"], [849, 0, 1, "", "unique"], [850, 0, 1, "", "unnest"], [851, 0, 1, "", "unpivot"], [852, 0, 1, "", "update"], [853, 0, 1, "", "var"], [854, 1, 1, "", "width"], [855, 0, 1, "", "with_columns"], [856, 0, 1, "", "with_columns_seq"], [857, 0, 1, "", "with_context"], [858, 0, 1, "", "with_row_count"], [859, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1268, 0, 1, "", "__enter__"], [1268, 0, 1, "", "__exit__"], [1268, 0, 1, "", "__init__"], [1250, 0, 1, "", "execute"], [1251, 0, 1, "", "execute_global"], [1252, 0, 1, "", "register"], [1253, 0, 1, "", "register_globals"], [1254, 0, 1, "", "register_many"], [1255, 0, 1, "", "tables"], [1256, 0, 1, "", "unregister"]], "polars.Series": [[891, 0, 1, "", "abs"], [892, 0, 1, "", "alias"], [893, 0, 1, "", "all"], [894, 0, 1, "", "any"], [895, 0, 1, "", "append"], [896, 0, 1, "", "arccos"], [897, 0, 1, "", "arccosh"], [898, 0, 1, "", "arcsin"], [899, 0, 1, "", "arcsinh"], [900, 0, 1, "", "arctan"], [901, 0, 1, "", "arctanh"], [902, 0, 1, "", "arg_max"], [903, 0, 1, "", "arg_min"], [904, 0, 1, "", "arg_sort"], [905, 0, 1, "", "arg_true"], [906, 0, 1, "", "arg_unique"], [936, 0, 1, "", "bottom_k"], [937, 0, 1, "", "cast"], [942, 0, 1, "", "cbrt"], [943, 0, 1, "", "ceil"], [944, 0, 1, "", "chunk_lengths"], [945, 0, 1, "", "clear"], [946, 0, 1, "", "clip"], [947, 0, 1, "", "clone"], [948, 0, 1, "", "cos"], [949, 0, 1, "", "cosh"], [950, 0, 1, "", "cot"], [951, 0, 1, "", "cum_count"], [952, 0, 1, "", "cum_max"], [953, 0, 1, "", "cum_min"], [954, 0, 1, "", "cum_prod"], [955, 0, 1, "", "cum_sum"], [956, 0, 1, "", "cumulative_eval"], [957, 0, 1, "", "cut"], [958, 0, 1, "", "describe"], [959, 0, 1, "", "diff"], [960, 0, 1, "", "dot"], [961, 0, 1, "", "drop_nans"], [962, 0, 1, "", "drop_nulls"], [1011, 3, 1, "", "dtype"], [1012, 0, 1, "", "entropy"], [1013, 0, 1, "", "equals"], [1014, 0, 1, "", "estimated_size"], [1015, 0, 1, "", "ewm_mean"], [1016, 0, 1, "", "ewm_mean_by"], [1017, 0, 1, "", "ewm_std"], [1018, 0, 1, "", "ewm_var"], [1019, 0, 1, "", "exp"], [1020, 0, 1, "", "explode"], [1021, 0, 1, "", "extend"], [1022, 0, 1, "", "extend_constant"], [1023, 0, 1, "", "fill_nan"], [1024, 0, 1, "", "fill_null"], [1025, 0, 1, "", "filter"], [1026, 3, 1, "", "flags"], [1027, 0, 1, "", "floor"], [1028, 0, 1, "", "gather"], [1029, 0, 1, "", "gather_every"], [1030, 0, 1, "", "get_chunks"], [1031, 0, 1, "", "has_nulls"], [1032, 0, 1, "", "has_validity"], [1033, 0, 1, "", "hash"], [1034, 0, 1, "", "head"], [1035, 0, 1, "", "hist"], [1036, 0, 1, "", "implode"], [1037, 0, 1, "", "interpolate"], [1038, 0, 1, "", "interpolate_by"], [1039, 0, 1, "", "is_between"], [1040, 0, 1, "", "is_duplicated"], [1041, 0, 1, "", "is_empty"], [1042, 0, 1, "", "is_finite"], [1043, 0, 1, "", "is_first_distinct"], [1044, 0, 1, "", "is_in"], [1045, 0, 1, "", "is_infinite"], [1046, 0, 1, "", "is_last_distinct"], [1047, 0, 1, "", "is_nan"], [1048, 0, 1, "", "is_not_nan"], [1049, 0, 1, "", "is_not_null"], [1050, 0, 1, "", "is_null"], [1051, 0, 1, "", "is_sorted"], [1052, 0, 1, "", "is_unique"], [1053, 0, 1, "", "item"], [1054, 0, 1, "", "kurtosis"], [1055, 0, 1, "", "len"], [1056, 0, 1, "", "limit"], [1097, 0, 1, "", "log"], [1098, 0, 1, "", "log10"], [1099, 0, 1, "", "log1p"], [1100, 0, 1, "", "lower_bound"], [1101, 0, 1, "", "map_elements"], [1102, 0, 1, "", "max"], [1103, 0, 1, "", "mean"], [1104, 0, 1, "", "median"], [1105, 0, 1, "", "min"], [1106, 0, 1, "", "mode"], [1107, 0, 1, "", "n_chunks"], [1108, 0, 1, "", "n_unique"], [1109, 3, 1, "", "name"], [1110, 0, 1, "", "nan_max"], [1111, 0, 1, "", "nan_min"], [1112, 0, 1, "", "new_from_index"], [1113, 0, 1, "", "not_"], [1114, 0, 1, "", "null_count"], [1115, 0, 1, "", "pct_change"], [1116, 0, 1, "", "peak_max"], [1117, 0, 1, "", "peak_min"], [1118, 0, 1, "", "product"], [1119, 0, 1, "", "qcut"], [1120, 0, 1, "", "quantile"], [1121, 0, 1, "", "rank"], [1122, 0, 1, "", "rechunk"], [1123, 0, 1, "", "reinterpret"], [1124, 0, 1, "", "rename"], [1125, 0, 1, "", "replace"], [1126, 0, 1, "", "replace_strict"], [1127, 0, 1, "", "reshape"], [1128, 0, 1, "", "reverse"], [1129, 0, 1, "", "rle"], [1130, 0, 1, "", "rle_id"], [1131, 0, 1, "", "rolling_map"], [1132, 0, 1, "", "rolling_max"], [1133, 0, 1, "", "rolling_mean"], [1134, 0, 1, "", "rolling_median"], [1135, 0, 1, "", "rolling_min"], [1136, 0, 1, "", "rolling_quantile"], [1137, 0, 1, "", "rolling_skew"], [1138, 0, 1, "", "rolling_std"], [1139, 0, 1, "", "rolling_sum"], [1140, 0, 1, "", "rolling_var"], [1141, 0, 1, "", "round"], [1142, 0, 1, "", "round_sig_figs"], [1143, 0, 1, "", "sample"], [1144, 0, 1, "", "scatter"], [1145, 0, 1, "", "search_sorted"], [1146, 0, 1, "", "set"], [1147, 0, 1, "", "set_sorted"], [1148, 3, 1, "", "shape"], [1149, 0, 1, "", "shift"], [1150, 0, 1, "", "shrink_dtype"], [1151, 0, 1, "", "shrink_to_fit"], [1152, 0, 1, "", "shuffle"], [1153, 0, 1, "", "sign"], [1154, 0, 1, "", "sin"], [1155, 0, 1, "", "sinh"], [1156, 0, 1, "", "skew"], [1157, 0, 1, "", "slice"], [1158, 0, 1, "", "sort"], [1159, 0, 1, "", "sqrt"], [1160, 0, 1, "", "std"], [1213, 0, 1, "", "sum"], [1214, 0, 1, "", "tail"], [1215, 0, 1, "", "tan"], [1216, 0, 1, "", "tanh"], [1217, 0, 1, "", "to_arrow"], [1218, 0, 1, "", "to_dummies"], [1219, 0, 1, "", "to_frame"], [1220, 0, 1, "", "to_init_repr"], [1221, 0, 1, "", "to_jax"], [1222, 0, 1, "", "to_list"], [1223, 0, 1, "", "to_numpy"], [1224, 0, 1, "", "to_pandas"], [1225, 0, 1, "", "to_physical"], [1226, 0, 1, "", "to_torch"], [1227, 0, 1, "", "top_k"], [1228, 0, 1, "", "unique"], [1229, 0, 1, "", "unique_counts"], [1230, 0, 1, "", "upper_bound"], [1231, 0, 1, "", "value_counts"], [1232, 0, 1, "", "var"], [1233, 0, 1, "", "zip_with"]], "polars.Series.arr": [[907, 0, 1, "", "all"], [908, 0, 1, "", "any"], [909, 0, 1, "", "arg_max"], [910, 0, 1, "", "arg_min"], [911, 0, 1, "", "contains"], [912, 0, 1, "", "count_matches"], [913, 0, 1, "", "explode"], [914, 0, 1, "", "first"], [915, 0, 1, "", "get"], [916, 0, 1, "", "join"], [917, 0, 1, "", "last"], [918, 0, 1, "", "max"], [919, 0, 1, "", "median"], [920, 0, 1, "", "min"], [921, 0, 1, "", "n_unique"], [922, 0, 1, "", "reverse"], [923, 0, 1, "", "shift"], [924, 0, 1, "", "sort"], [925, 0, 1, "", "std"], [926, 0, 1, "", "sum"], [927, 0, 1, "", "to_list"], [928, 0, 1, "", "to_struct"], [929, 0, 1, "", "unique"], [930, 0, 1, "", "var"]], "polars.Series.bin": [[931, 0, 1, "", "contains"], [932, 0, 1, "", "decode"], [933, 0, 1, "", "encode"], [934, 0, 1, "", "ends_with"], [935, 0, 1, "", "starts_with"]], "polars.Series.cat": [[938, 0, 1, "", "get_categories"], [939, 0, 1, "", "is_local"], [940, 0, 1, "", "to_local"], [941, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[963, 0, 1, "", "add_business_days"], [964, 0, 1, "", "base_utc_offset"], [965, 0, 1, "", "cast_time_unit"], [966, 0, 1, "", "century"], [967, 0, 1, "", "combine"], [968, 0, 1, "", "convert_time_zone"], [969, 0, 1, "", "date"], [970, 0, 1, "", "datetime"], [971, 0, 1, "", "day"], [972, 0, 1, "", "dst_offset"], [973, 0, 1, "", "epoch"], [974, 0, 1, "", "hour"], [975, 0, 1, "", "is_leap_year"], [976, 0, 1, "", "iso_year"], [977, 0, 1, "", "max"], [978, 0, 1, "", "mean"], [979, 0, 1, "", "median"], [980, 0, 1, "", "microsecond"], [981, 0, 1, "", "millennium"], [982, 0, 1, "", "millisecond"], [983, 0, 1, "", "min"], [984, 0, 1, "", "minute"], [985, 0, 1, "", "month"], [986, 0, 1, "", "month_end"], [987, 0, 1, "", "month_start"], [988, 0, 1, "", "nanosecond"], [989, 0, 1, "", "offset_by"], [990, 0, 1, "", "ordinal_day"], [991, 0, 1, "", "quarter"], [992, 0, 1, "", "replace_time_zone"], [993, 0, 1, "", "round"], [994, 0, 1, "", "second"], [995, 0, 1, "", "strftime"], [996, 0, 1, "", "time"], [997, 0, 1, "", "timestamp"], [998, 0, 1, "", "to_string"], [999, 0, 1, "", "total_days"], [1000, 0, 1, "", "total_hours"], [1001, 0, 1, "", "total_microseconds"], [1002, 0, 1, "", "total_milliseconds"], [1003, 0, 1, "", "total_minutes"], [1004, 0, 1, "", "total_nanoseconds"], [1005, 0, 1, "", "total_seconds"], [1006, 0, 1, "", "truncate"], [1007, 0, 1, "", "week"], [1008, 0, 1, "", "weekday"], [1009, 0, 1, "", "with_time_unit"], [1010, 0, 1, "", "year"]], "polars.Series.list": [[1057, 0, 1, "", "all"], [1058, 0, 1, "", "any"], [1059, 0, 1, "", "arg_max"], [1060, 0, 1, "", "arg_min"], [1061, 0, 1, "", "concat"], [1062, 0, 1, "", "contains"], [1063, 0, 1, "", "count_matches"], [1064, 0, 1, "", "diff"], [1065, 0, 1, "", "drop_nulls"], [1066, 0, 1, "", "eval"], [1067, 0, 1, "", "explode"], [1068, 0, 1, "", "first"], [1069, 0, 1, "", "gather"], [1070, 0, 1, "", "gather_every"], [1071, 0, 1, "", "get"], [1072, 0, 1, "", "head"], [1073, 0, 1, "", "join"], [1074, 0, 1, "", "last"], [1075, 0, 1, "", "len"], [1076, 0, 1, "", "max"], [1077, 0, 1, "", "mean"], [1078, 0, 1, "", "median"], [1079, 0, 1, "", "min"], [1080, 0, 1, "", "n_unique"], [1081, 0, 1, "", "reverse"], [1082, 0, 1, "", "sample"], [1083, 0, 1, "", "set_difference"], [1084, 0, 1, "", "set_intersection"], [1085, 0, 1, "", "set_symmetric_difference"], [1086, 0, 1, "", "set_union"], [1087, 0, 1, "", "shift"], [1088, 0, 1, "", "slice"], [1089, 0, 1, "", "sort"], [1090, 0, 1, "", "std"], [1091, 0, 1, "", "sum"], [1092, 0, 1, "", "tail"], [1093, 0, 1, "", "to_array"], [1094, 0, 1, "", "to_struct"], [1095, 0, 1, "", "unique"], [1096, 0, 1, "", "var"]], "polars.Series.str": [[1161, 0, 1, "", "concat"], [1162, 0, 1, "", "contains"], [1163, 0, 1, "", "contains_any"], [1164, 0, 1, "", "count_matches"], [1165, 0, 1, "", "decode"], [1166, 0, 1, "", "encode"], [1167, 0, 1, "", "ends_with"], [1168, 0, 1, "", "explode"], [1169, 0, 1, "", "extract"], [1170, 0, 1, "", "extract_all"], [1171, 0, 1, "", "extract_groups"], [1172, 0, 1, "", "extract_many"], [1173, 0, 1, "", "find"], [1174, 0, 1, "", "head"], [1175, 0, 1, "", "join"], [1176, 0, 1, "", "json_decode"], [1177, 0, 1, "", "json_path_match"], [1178, 0, 1, "", "len_bytes"], [1179, 0, 1, "", "len_chars"], [1180, 0, 1, "", "pad_end"], [1181, 0, 1, "", "pad_start"], [1182, 0, 1, "", "replace"], [1183, 0, 1, "", "replace_all"], [1184, 0, 1, "", "replace_many"], [1185, 0, 1, "", "reverse"], [1186, 0, 1, "", "slice"], [1187, 0, 1, "", "split"], [1188, 0, 1, "", "split_exact"], [1189, 0, 1, "", "splitn"], [1190, 0, 1, "", "starts_with"], [1191, 0, 1, "", "strip_chars"], [1192, 0, 1, "", "strip_chars_end"], [1193, 0, 1, "", "strip_chars_start"], [1194, 0, 1, "", "strip_prefix"], [1195, 0, 1, "", "strip_suffix"], [1196, 0, 1, "", "strptime"], [1197, 0, 1, "", "tail"], [1198, 0, 1, "", "to_date"], [1199, 0, 1, "", "to_datetime"], [1200, 0, 1, "", "to_decimal"], [1201, 0, 1, "", "to_integer"], [1202, 0, 1, "", "to_lowercase"], [1203, 0, 1, "", "to_time"], [1204, 0, 1, "", "to_titlecase"], [1205, 0, 1, "", "to_uppercase"], [1206, 0, 1, "", "zfill"]], "polars.Series.struct": [[1207, 0, 1, "", "field"], [1208, 3, 1, "", "fields"], [1209, 0, 1, "", "json_encode"], [1210, 0, 1, "", "rename_fields"], [1211, 3, 1, "", "schema"], [1212, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[287, 0, 1, "", "__iter__"], [288, 0, 1, "", "agg"], [289, 0, 1, "", "all"], [290, 0, 1, "", "count"], [291, 0, 1, "", "first"], [292, 0, 1, "", "head"], [293, 0, 1, "", "last"], [294, 0, 1, "", "len"], [295, 0, 1, "", "map_groups"], [296, 0, 1, "", "max"], [297, 0, 1, "", "mean"], [298, 0, 1, "", "median"], [299, 0, 1, "", "min"], [300, 0, 1, "", "n_unique"], [301, 0, 1, "", "quantile"], [302, 0, 1, "", "sum"], [303, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[860, 0, 1, "", "agg"], [861, 0, 1, "", "all"], [862, 0, 1, "", "count"], [863, 0, 1, "", "first"], [864, 0, 1, "", "head"], [865, 0, 1, "", "last"], [866, 0, 1, "", "len"], [867, 0, 1, "", "map_groups"], [868, 0, 1, "", "max"], [869, 0, 1, "", "mean"], [870, 0, 1, "", "median"], [871, 0, 1, "", "min"], [872, 0, 1, "", "n_unique"], [873, 0, 1, "", "quantile"], [874, 0, 1, "", "sum"], [875, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[876, 0, 1, "", "cancel"], [877, 0, 1, "", "fetch"], [878, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[887, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[889, 4, 1, "", "all"], [889, 4, 1, "", "alpha"], [889, 4, 1, "", "alphanumeric"], [889, 4, 1, "", "binary"], [889, 4, 1, "", "boolean"], [889, 4, 1, "", "by_dtype"], [889, 4, 1, "", "by_index"], [889, 4, 1, "", "by_name"], [889, 4, 1, "", "categorical"], [889, 4, 1, "", "contains"], [889, 4, 1, "", "date"], [889, 4, 1, "", "datetime"], [889, 4, 1, "", "decimal"], [889, 4, 1, "", "digit"], [889, 4, 1, "", "duration"], [889, 4, 1, "", "ends_with"], [889, 4, 1, "", "exclude"], [889, 4, 1, "", "expand_selector"], [889, 4, 1, "", "first"], [889, 4, 1, "", "float"], [889, 4, 1, "", "integer"], [889, 4, 1, "", "is_selector"], [889, 4, 1, "", "last"], [889, 4, 1, "", "matches"], [889, 4, 1, "", "numeric"], [889, 4, 1, "", "signed_integer"], [889, 4, 1, "", "starts_with"], [889, 4, 1, "", "string"], [889, 4, 1, "", "temporal"], [889, 4, 1, "", "time"], [889, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 140, 144, 145, 148, 149, 163, 172, 173, 184, 187, 192, 195, 200, 201, 206, 212, 215, 216, 225, 232, 234, 239, 241, 244, 247, 248, 255, 264, 267, 272, 274, 275, 276, 277, 278, 283, 284, 309, 346, 368, 369, 396, 401, 419, 422, 442, 448, 452, 480, 501, 530, 531, 541, 549, 561, 562, 569, 570, 581, 588, 622, 626, 633, 634, 635, 637, 638, 646, 647, 650, 651, 653, 660, 661, 662, 663, 667, 668, 671, 673, 674, 682, 691, 692, 693, 694, 699, 705, 708, 711, 712, 721, 722, 724, 725, 731, 734, 735, 736, 737, 739, 741, 742, 744, 751, 753, 755, 756, 757, 763, 769, 773, 789, 791, 802, 811, 812, 817, 825, 836, 837, 843, 848, 849, 850, 851, 852, 855, 856, 867, 883, 889, 891, 892, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 971, 972, 973, 975, 977, 978, 979, 981, 982, 983, 986, 987, 990, 993, 994, 995, 998, 1006, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1242, 1246, 1250, 1254, 1257, 1263, 1264], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 190, 191, 194, 195, 198, 199, 200, 201, 202, 206, 207, 211, 213, 214, 215, 217, 219, 221, 222, 223, 224, 228, 229, 230, 231, 234, 235, 236, 239, 241, 243, 244, 245, 246, 247, 254, 255, 256, 257, 259, 264, 265, 266, 267, 268, 269, 271, 273, 277, 279, 280, 283, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 309, 313, 317, 319, 320, 322, 326, 327, 328, 329, 330, 331, 334, 335, 336, 339, 340, 342, 345, 355, 358, 360, 369, 371, 372, 374, 375, 376, 383, 384, 385, 389, 390, 391, 397, 398, 402, 405, 407, 408, 412, 418, 420, 425, 426, 428, 429, 433, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 451, 452, 454, 456, 457, 459, 461, 463, 466, 467, 470, 473, 475, 476, 477, 478, 480, 482, 487, 488, 491, 494, 497, 498, 499, 505, 506, 518, 522, 524, 525, 526, 527, 529, 530, 532, 533, 534, 537, 541, 546, 547, 548, 550, 552, 561, 562, 563, 564, 565, 567, 568, 570, 573, 574, 576, 577, 578, 579, 583, 584, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 616, 617, 618, 619, 623, 624, 625, 628, 632, 633, 634, 637, 674, 675, 676, 678, 679, 680, 683, 688, 689, 691, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 709, 716, 720, 723, 729, 730, 732, 735, 738, 739, 740, 744, 746, 747, 752, 759, 760, 761, 762, 763, 764, 769, 773, 788, 791, 792, 793, 796, 798, 799, 801, 803, 804, 806, 807, 810, 811, 812, 815, 816, 819, 821, 824, 828, 830, 831, 835, 836, 841, 843, 844, 845, 853, 855, 857, 858, 859, 860, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 883, 889, 896, 897, 898, 899, 900, 901, 902, 904, 906, 909, 915, 925, 928, 930, 937, 940, 942, 943, 945, 948, 949, 950, 956, 957, 958, 960, 961, 962, 963, 970, 974, 978, 979, 980, 982, 984, 988, 994, 1001, 1002, 1004, 1005, 1009, 1012, 1015, 1016, 1017, 1018, 1023, 1027, 1029, 1032, 1033, 1035, 1037, 1038, 1042, 1045, 1047, 1048, 1049, 1050, 1053, 1054, 1059, 1060, 1063, 1066, 1069, 1070, 1071, 1077, 1078, 1090, 1094, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1110, 1111, 1115, 1119, 1120, 1121, 1125, 1126, 1130, 1131, 1133, 1134, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1145, 1153, 1154, 1155, 1156, 1159, 1160, 1161, 1164, 1168, 1169, 1170, 1173, 1177, 1215, 1216, 1218, 1221, 1223, 1224, 1225, 1226, 1230, 1232, 1242, 1250, 1256, 1258, 1259, 1262, 1263, 1265, 1266, 1268, 1270, 1271], "00": [27, 36, 62, 173, 180, 201, 279, 309, 392, 393, 396, 400, 410, 411, 413, 416, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 592, 594, 596, 598, 600, 603, 605, 607, 660, 663, 667, 716, 717, 718, 719, 759, 760, 761, 773, 791, 799, 812, 817, 883, 889, 964, 965, 968, 969, 970, 972, 973, 974, 979, 980, 984, 986, 987, 988, 989, 992, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1196, 1199, 1203, 1263], "000": [9, 10, 27, 36, 309, 1271], "0000": [271, 309, 1226, 1242, 1271], "000000": [363, 364, 629, 932, 933, 1165], "00000001": [11, 690, 773], "00000010": [690, 773], "00000011": [690, 773], "00000100": [690, 773], "00001000": [690, 773], "00001010": [690, 773], "00001011": [690, 773], "0000e": 11, "0000ff": [363, 364, 629, 932, 933, 1165], "0005": 889, "00050": 889, "001": [49, 670, 719, 1001, 1002, 1004, 1206], "002": [719, 1001, 1002, 1004], "005": [1012, 1242], "00prefix": 889, "00z": [660, 663, 1196, 1199], "01": [28, 47, 61, 62, 159, 173, 180, 199, 201, 216, 241, 279, 309, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 660, 662, 663, 667, 701, 713, 714, 715, 716, 717, 718, 719, 773, 791, 799, 812, 834, 883, 889, 963, 965, 967, 968, 969, 970, 973, 974, 979, 980, 984, 986, 987, 988, 989, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1196, 1198, 1199, 1203, 1263, 1266], "010": [9, 665, 1201], "01000": 28, "01000010": [690, 773], "01000110": [690, 773], "012": [609, 773, 1142, 1242], "0123": [670, 1206], "01234": [609, 773, 1142, 1242], "015625": 1242, "02": [47, 173, 180, 199, 201, 241, 279, 309, 391, 393, 395, 401, 410, 411, 413, 416, 421, 424, 427, 429, 433, 589, 592, 594, 596, 598, 600, 603, 605, 607, 608, 660, 662, 663, 667, 701, 713, 714, 715, 716, 717, 718, 719, 773, 791, 799, 812, 834, 883, 889, 928, 965, 967, 969, 970, 973, 974, 979, 980, 984, 986, 987, 988, 992, 993, 996, 997, 1000, 1003, 1005, 1006, 1094, 1196, 1198, 1199, 1203, 1263, 1264], "03": [47, 123, 129, 173, 201, 216, 241, 279, 309, 393, 395, 396, 401, 410, 411, 413, 416, 417, 419, 421, 422, 423, 424, 427, 429, 430, 433, 439, 452, 589, 592, 594, 596, 598, 600, 603, 605, 607, 662, 667, 713, 714, 715, 716, 717, 718, 719, 773, 791, 812, 834, 883, 889, 965, 967, 968, 973, 974, 979, 980, 986, 987, 988, 992, 993, 995, 997, 998, 999, 1000, 1003, 1005, 1198, 1203], "037037": 1242, "04": [149, 173, 180, 201, 279, 309, 395, 396, 410, 411, 416, 417, 419, 422, 423, 424, 427, 429, 433, 592, 594, 596, 598, 600, 603, 605, 607, 660, 701, 713, 716, 717, 719, 773, 791, 799, 812, 883, 889, 968, 980, 984, 986, 987, 988, 992, 995, 998, 999, 1000, 1003, 1005, 1009, 1196, 1263], "047198": 1265, "05": [16, 149, 152, 153, 154, 155, 159, 173, 180, 279, 309, 391, 394, 395, 396, 397, 398, 402, 405, 406, 407, 408, 410, 411, 412, 416, 418, 419, 420, 422, 423, 701, 713, 714, 716, 717, 791, 799, 817, 883, 889, 967, 968, 969, 970, 992, 993, 995, 996, 998, 999, 1006, 1263, 1264, 1266], "050545": 123, "0522623626787952": [1054, 1242], "0545": [969, 970, 996], "06": [159, 173, 279, 309, 391, 395, 409, 415, 416, 417, 418, 430, 431, 713, 716, 791, 883, 889, 963, 992, 993, 1006], "060": [397, 398, 402, 405, 407, 408, 412, 418, 420], "0601749420166": [187, 309], "06293300616044681": [1012, 1242], "07": [16, 129, 159, 180, 309, 391, 394, 395, 406, 416, 417, 430, 660, 713, 714, 716, 717, 725, 799, 883, 889, 963, 967, 992, 1196, 1263, 1266], "071068": [180, 309, 799, 883], "08": [129, 152, 153, 154, 155, 180, 216, 241, 256, 309, 391, 395, 410, 411, 417, 589, 660, 717, 719, 773, 799, 834, 883, 889, 963, 993, 1006, 1196, 1263, 1264], "085537": [1019, 1242], "09": [47, 129, 180, 241, 309, 391, 395, 410, 411, 589, 664, 713, 714, 716, 761, 773, 799, 834, 883, 889, 963, 1200], "090909": [570, 773], "094395": 1265, "098612": [527, 773, 1097, 1099, 1242, 1262], "0999": [394, 406], "0_": [36, 309], "0m": [400, 972], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 646, 647, 652, 653, 654, 655, 656, 657, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 769, 773, 788, 789, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 889, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 936, 937, 940, 942, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1169, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1182, 1183, 1188, 1189, 1206, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1246, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1270, 1271], "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 132, 143, 151, 175, 180, 189, 198, 199, 201, 203, 205, 206, 207, 212, 216, 218, 229, 233, 235, 239, 241, 247, 256, 260, 283, 288, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 320, 324, 332, 333, 334, 336, 373, 379, 382, 387, 391, 392, 394, 395, 397, 398, 400, 402, 405, 406, 407, 408, 410, 411, 412, 416, 417, 418, 420, 430, 433, 439, 460, 461, 462, 466, 472, 484, 492, 498, 500, 506, 516, 518, 520, 524, 526, 540, 542, 552, 567, 570, 573, 583, 584, 589, 620, 665, 674, 677, 690, 701, 702, 709, 714, 716, 717, 720, 723, 725, 727, 733, 734, 758, 761, 773, 794, 795, 799, 812, 813, 815, 820, 829, 830, 834, 836, 846, 847, 855, 860, 863, 865, 868, 869, 870, 871, 872, 873, 874, 883, 889, 946, 959, 963, 964, 966, 967, 972, 981, 992, 1006, 1009, 1012, 1016, 1034, 1044, 1056, 1064, 1072, 1078, 1088, 1090, 1092, 1096, 1098, 1101, 1115, 1126, 1144, 1146, 1201, 1214, 1221, 1223, 1226, 1242, 1250, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1266, 1271], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 140, 143, 147, 234, 252, 309, 583, 584, 613, 627, 636, 640, 648, 664, 718, 773, 840, 883, 889, 1098, 1125, 1126, 1132, 1133, 1135, 1149, 1163, 1176, 1184, 1200, 1242, 1260, 1271], "1000": [131, 187, 265, 286, 309, 325, 773, 859, 883, 1001, 1098, 1220, 1242, 1271], "10000": [129, 214, 309], "100000": [10, 27], "1000000": [11, 1004], "1001": [286, 309, 859, 883], "1002": [286, 309, 859, 883], "10047419486152048166": [202, 309], "1005": [325, 773], "100_000": [821, 883], "101": [9, 27, 395, 665, 889, 1201, 1271], "101000": 395, "10101": [27, 1266], "1010101": 9, "101514": [180, 309, 799, 883], "1024": [33, 41, 42, 45, 129, 130, 131, 147, 309, 883], "1040361802642726": [1054, 1242], "107149": 1265, "10734580197236529959": [1033, 1242], "1073741824": [614, 773], "10783150408545073287": [202, 309], "107_930_000": 1250, "10_000": [36, 309], "10i": [201, 309, 812, 883], "10m": [417, 430, 993, 1006], "11": [10, 16, 41, 45, 151, 159, 171, 180, 216, 241, 309, 320, 410, 411, 413, 417, 430, 454, 466, 498, 546, 570, 579, 589, 590, 604, 620, 690, 756, 761, 769, 773, 788, 794, 795, 799, 813, 820, 830, 834, 847, 883, 889, 989, 993, 1006, 1101, 1131, 1242, 1259], "110": [665, 1201], "1101441246220388612": [461, 773], "111": [10, 1260], "11111": 994, "111110": 994, "11111001": [690, 773], "11111010": [690, 773], "11111111": 10, "112": [614, 773, 1271], "11330": 158, "1152921504606846976": [1123, 1242], "116": 158, "11638928888656214026": [461, 773], "118034": [845, 883], "11aa": 1263, "11aabb": 1263, "11h": [392, 964], "12": [26, 36, 47, 123, 129, 151, 159, 180, 201, 212, 216, 241, 256, 279, 309, 320, 381, 392, 394, 395, 399, 406, 409, 410, 411, 413, 414, 415, 417, 430, 431, 432, 439, 466, 498, 570, 578, 589, 604, 614, 628, 664, 710, 713, 716, 717, 718, 734, 759, 760, 761, 773, 799, 812, 813, 817, 820, 834, 841, 847, 883, 889, 964, 966, 967, 978, 979, 981, 985, 993, 1006, 1016, 1101, 1141, 1164, 1200, 1242, 1262, 1263, 1264, 1266, 1268, 1271], "120": [719, 1265], "1200": [609, 773, 1142, 1242], "120134": [664, 1200], "121": 1271, "123": [9, 628, 634, 647, 670, 763, 889, 1164, 1170, 1206, 1219, 1242], "123000": 889, "1232e": [948, 950, 1242], "1234": [27, 609, 773, 1142, 1242], "12345": [725, 943, 1027, 1141, 1242], "1234500": 889, "123456": [9, 889], "1234567": 27, "123456780": 123, "12346": 725, "123465": 889, "123a123": 647, "123abc": [646, 1182, 1183], "125": [1, 36, 51, 309, 318, 574, 752, 773, 844, 883, 1115, 1242], "127": [1230, 1242], "128": [49, 63, 1115, 1242], "129": [614, 773], "12th": [817, 883], "13": [174, 175, 180, 190, 191, 198, 206, 217, 229, 241, 283, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 320, 391, 397, 398, 402, 405, 407, 408, 412, 418, 420, 540, 542, 589, 664, 703, 709, 712, 716, 723, 757, 759, 762, 773, 792, 793, 799, 806, 807, 819, 834, 855, 863, 865, 868, 869, 870, 871, 872, 873, 874, 883, 963, 993, 1006, 1007, 1101, 1200, 1242], "130": 126, "13382926553367784577": [461, 773], "134821952": 1250, "134_821_952": 1250, "135": [698, 1265], "13614470193936745724": [461, 773], "13756996518000038261": [1033, 1242], "13h": [392, 964], "14": [35, 151, 180, 219, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 392, 397, 398, 402, 405, 407, 408, 412, 418, 420, 466, 579, 716, 759, 760, 773, 799, 863, 865, 868, 869, 870, 871, 872, 873, 874, 883, 889, 964, 993], "141592653589793": 10, "141593": [578, 773, 896, 1242, 1262, 1265], "142857": [1115, 1242], "143": [664, 1200, 1271], "1433": [34, 309], "1436e16": 159, "1438741209321515184": [202, 309], "1440": [427, 1003], "1443e235": 1271, "149": 1271, "14d": 889, "15": [10, 36, 151, 180, 201, 206, 219, 241, 309, 383, 387, 411, 417, 430, 439, 573, 589, 604, 710, 716, 759, 760, 773, 799, 812, 834, 883, 889, 956, 959, 993, 1006, 1016, 1242, 1263], "150": [1133, 1242], "1500": [151, 162], "15000": [214, 309], "153061": [480, 773], "15836": 159, "15_000": [214, 309], "16": [1, 36, 49, 68, 78, 151, 165, 180, 201, 241, 283, 309, 379, 382, 466, 550, 574, 589, 665, 674, 709, 719, 720, 723, 773, 799, 812, 834, 841, 855, 883, 889, 993, 1006, 1115, 1154, 1201, 1215, 1242, 1262, 1263, 1268], "165": [993, 1006], "1656e15": [950, 1242], "166667": [1115, 1242], "1666683077": 725, "1666683099": 725, "167": 47, "16996": 1271, "16h": 889, "17": [151, 159, 187, 216, 288, 309, 439, 590, 608, 725, 760, 773, 860, 948, 950, 993, 1016, 1131, 1242, 1271], "17293822569102704640": [1123, 1242], "174": 1271, "175201": [618, 773, 1155, 1242], "1755e": [156, 159], "1764": 51, "17888890": [187, 309], "179": 1271, "17_500": [214, 309], "18": [34, 123, 180, 226, 241, 309, 382, 417, 430, 433, 466, 552, 589, 674, 773, 799, 826, 830, 834, 883, 889, 1009, 1258, 1265, 1268], "180": [385, 578, 773, 1265], "1844": 159, "18446744073709551614": [1123, 1242], "185_000_000": 1250, "186": 1271, "1875": [606, 773, 853, 883], "1897": [394, 406, 966, 981], "18d": 889, "19": [134, 159, 216, 241, 309, 394, 417, 589, 594, 596, 598, 600, 664, 773, 817, 834, 883, 966, 993, 1006, 1200], "1920": 1263, "196": 1264, "1964": [830, 883], "1969": [1263, 1264], "1970": [61, 62, 149, 1250], "1972": 1250, "1976": [404, 434], "1977": [404, 434], "1978": [397, 398, 402, 404, 405, 407, 408, 412, 418, 420, 434, 1264], "1979": [404, 434], "1985": [714, 717], "1990": [129, 1250], "1993": 1250, "1994": 1250, "1995": 129, "1998": [413, 989], "1999": [256, 309, 413, 889, 989, 1266], "199992": [821, 883], "199994": [821, 883], "199996": [821, 883], "199998": [821, 883], "1_000_000": [187, 309, 1014, 1242], "1_234_500": 889, "1d": [201, 216, 241, 279, 309, 393, 413, 417, 424, 427, 430, 433, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 719, 733, 760, 761, 773, 812, 817, 834, 883, 889, 965, 973, 979, 989, 993, 997, 1000, 1003, 1006, 1016, 1242], "1e": [11, 152, 153, 154, 155], "1e6": 11, "1h": [201, 216, 241, 279, 309, 400, 413, 417, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 717, 718, 760, 761, 773, 812, 817, 834, 883, 972, 974, 989, 993, 1006, 1016, 1242], "1i": [201, 241, 279, 309, 439, 589, 773, 812, 834, 883, 1016, 1242], "1m": [201, 216, 241, 279, 309, 413, 417, 429, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1001, 1002, 1004, 1005, 1006, 1016, 1242], "1mo": [201, 216, 241, 279, 309, 396, 410, 411, 413, 416, 417, 423, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 968, 985, 986, 987, 989, 990, 991, 992, 993, 999, 1006, 1007, 1016, 1242], "1n": [201, 216, 241, 279, 309, 413, 417, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006, 1016, 1242], "1q": [201, 216, 241, 279, 309, 413, 417, 430, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006], "1st": [817, 883], "1st_col": 889, "1u": [201, 216, 241, 279, 309, 413, 417, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006, 1016, 1242], "1w": [201, 216, 241, 279, 309, 413, 417, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006, 1016, 1242], "1w2d": [714, 715], "1y": [201, 216, 241, 279, 309, 413, 417, 430, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006], "1y2mo": [413, 989], "1zy3": [628, 1164], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 143, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 322, 324, 325, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 391, 392, 394, 395, 396, 397, 398, 399, 400, 403, 406, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 544, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 747, 751, 752, 753, 754, 755, 756, 758, 761, 762, 763, 769, 773, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 888, 889, 891, 892, 895, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 936, 940, 942, 943, 944, 945, 947, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 967, 969, 970, 972, 974, 977, 978, 979, 981, 983, 984, 985, 986, 987, 991, 992, 993, 996, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1169, 1171, 1173, 1174, 1176, 1177, 1179, 1182, 1183, 1188, 1189, 1191, 1192, 1193, 1196, 1197, 1199, 1200, 1201, 1202, 1204, 1205, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1246, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1270, 1271], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 171, 180, 189, 205, 206, 226, 233, 235, 239, 256, 266, 267, 271, 285, 290, 309, 332, 333, 334, 387, 394, 397, 398, 402, 405, 406, 407, 408, 412, 417, 418, 420, 430, 433, 454, 461, 466, 537, 546, 573, 592, 594, 596, 598, 600, 603, 605, 607, 632, 674, 689, 716, 725, 733, 752, 760, 773, 788, 799, 804, 826, 829, 844, 858, 862, 883, 889, 959, 966, 970, 981, 993, 1006, 1009, 1019, 1032, 1125, 1168, 1221, 1223, 1226, 1242, 1257, 1258, 1260, 1266], "200": [425, 426, 428, 583, 584, 773, 889, 1125, 1126, 1132, 1133, 1135, 1242, 1260], "2000": [394, 403, 406, 410, 411, 413, 889, 966, 975, 981, 986, 987, 989, 994, 1250, 1263], "200000": [425, 821, 883], "200000000": 428, "2001": [16, 393, 394, 399, 401, 403, 406, 409, 413, 414, 415, 417, 421, 430, 431, 432, 433, 592, 594, 596, 598, 600, 603, 605, 607, 660, 773, 889, 965, 966, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 993, 997, 1006, 1007, 1008, 1009, 1010, 1196], "2002": [129, 403, 413, 975, 989, 1010], "2003": [413, 725, 989], "2004": [413, 989], "2005": [413, 989], "2006": [413, 989], "2008": 1250, "200m": [425, 426, 428], "2010": [256, 309, 889], "2011": [392, 964], "2012": [392, 964, 1266], "2016": [216, 309, 817, 883], "2017": [216, 309, 817, 883], "2018": [216, 309, 416, 817, 883, 992], "2019": [216, 309, 817, 883], "202": 1264, "2020": [133, 144, 173, 180, 199, 216, 241, 309, 312, 391, 396, 400, 416, 419, 422, 423, 424, 425, 426, 427, 428, 429, 439, 589, 660, 662, 663, 701, 773, 791, 799, 834, 883, 889, 963, 968, 972, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1016, 1196, 1198, 1199, 1242, 1264], "2021": [133, 144, 173, 180, 199, 201, 279, 309, 660, 733, 791, 799, 812, 883, 889, 969, 970, 976, 996, 1196, 1263], "2022": [47, 173, 180, 199, 309, 395, 417, 430, 660, 714, 715, 717, 718, 719, 725, 791, 799, 883, 889, 967, 976, 993, 1006, 1196], "2023": [16, 36, 123, 151, 214, 309, 395, 719, 733, 889, 967], "2024": [151, 391, 397, 398, 402, 405, 407, 408, 412, 418, 420, 701, 713, 716, 719, 889, 963, 1263, 1266], "2025": [391, 701, 889, 963], "2026": 1264, "2030": 1263, "2031": 889, "2047317070637311557": [202, 309], "2055938745": 123, "2065": [397, 398, 402, 405, 407, 408, 412, 418, 420], "2068": 159, "207": 1264, "2077": [256, 309, 889, 1263, 1264], "2095": 159, "20_000": [36, 309], "20word": 132, "21": [151, 180, 226, 258, 309, 394, 592, 594, 596, 598, 600, 603, 605, 607, 716, 725, 773, 799, 826, 883, 889, 966, 1258], "213": 1271, "2147483647": 1271, "2147483648": [1100, 1242], "21d": 889, "22": [41, 45, 151, 159, 309, 399, 414, 417, 430, 432, 433, 590, 592, 594, 596, 598, 600, 603, 605, 607, 660, 716, 769, 773, 883, 889, 993, 1006, 1009, 1131, 1196, 1242, 1263, 1264, 1271], "221": 1271, "2246e": [1154, 1215, 1242], "225": [417, 430, 1265], "22_000_000": 1250, "23": [10, 159, 180, 201, 241, 271, 309, 395, 399, 402, 414, 417, 432, 589, 592, 594, 596, 598, 600, 603, 605, 607, 716, 719, 759, 760, 761, 773, 799, 812, 834, 844, 883, 889, 967, 974, 1226, 1242, 1270, 1271], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1250, "2337": [36, 309], "234": 27, "2345": 889, "23456789": 10, "235": 1271, "23h": 889, "24": [49, 151, 201, 216, 219, 241, 256, 279, 309, 381, 383, 399, 413, 414, 417, 424, 430, 432, 550, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 956, 989, 993, 1000, 1006, 1053, 1242, 1263, 1270], "24030": 158, "249": [690, 773], "25": [1, 27, 36, 51, 123, 180, 201, 216, 241, 266, 271, 279, 283, 309, 387, 399, 400, 414, 417, 430, 432, 439, 574, 576, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 683, 716, 717, 718, 719, 725, 735, 760, 761, 773, 799, 812, 817, 823, 834, 853, 855, 883, 889, 958, 959, 972, 993, 1006, 1012, 1016, 1035, 1115, 1119, 1242, 1258, 1262, 1268, 1269], "250": [690, 773, 1133, 1242, 1260, 1271], "2500": [214, 271, 309], "254508": [439, 773, 1016, 1242], "255": 1271, "256": [219, 309, 1115, 1242, 1262], "259921": [371, 773, 942, 1242, 1262], "25_000_000": 1250, "26": [34, 151, 156, 157, 158, 159, 163, 180, 309, 400, 431, 799, 883, 972], "266667": [180, 309, 799, 883], "27": [1, 51, 266, 302, 309, 382, 409, 415, 431, 674, 773, 874, 889, 1221, 1242, 1270, 1271], "270": 1265, "28": [262, 267, 309, 318, 416, 433, 773, 992, 1009, 1223, 1242, 1263, 1265, 1270, 1271], "283185": [578, 773], "2846": 309, "285714": [467, 773, 1038, 1242], "289962": 1265, "28_341_469": 1250, "29": [16, 151, 392, 410, 964, 986], "29096": 1271, "290994": [845, 883], "292432": [897, 1242], "292893": [439, 773, 1016, 1242], "2_color_scal": [36, 309], "2d": [241, 266, 267, 309, 413, 589, 733, 773, 834, 883, 964, 971], "2h": [592, 594, 596, 598, 600, 603, 605, 607, 773], "2i": [201, 309, 812, 883], "2m": [889, 984], "2x": 158, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 318, 319, 320, 321, 323, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 548, 549, 550, 551, 552, 553, 555, 557, 559, 560, 563, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 621, 622, 623, 626, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 661, 662, 667, 671, 672, 673, 674, 675, 677, 681, 682, 685, 686, 687, 689, 690, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 773, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 889, 891, 892, 895, 896, 898, 899, 900, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 967, 968, 971, 973, 974, 975, 977, 978, 979, 981, 983, 984, 985, 990, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1006, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1165, 1166, 1167, 1169, 1170, 1171, 1174, 1175, 1176, 1178, 1179, 1182, 1183, 1184, 1185, 1186, 1190, 1197, 1198, 1203, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1222, 1223, 1224, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1270, 1271], "30": [36, 180, 189, 201, 205, 233, 239, 262, 283, 309, 332, 333, 334, 387, 395, 397, 398, 402, 405, 407, 408, 409, 410, 412, 415, 416, 417, 418, 420, 423, 430, 431, 461, 537, 614, 716, 733, 759, 760, 773, 799, 804, 812, 829, 855, 883, 889, 959, 967, 986, 992, 993, 999, 1006, 1032, 1242, 1257, 1258, 1260, 1262, 1263, 1265, 1266, 1269, 1271], "300": [262, 309, 460, 567, 584, 773, 889, 1126, 1132, 1133, 1135, 1242, 1260], "3000": 889, "3002": [394, 406, 966, 981], "30103": [526, 773, 1262], "3022416320763508302": [1033, 1242], "30_000": [36, 309], "30m": [201, 309, 417, 430, 812, 883, 993, 1006], "31": [51, 180, 256, 309, 394, 395, 399, 406, 410, 413, 423, 632, 660, 713, 716, 725, 733, 752, 799, 883, 889, 964, 966, 967, 971, 981, 986, 999, 1125, 1168, 1196, 1242, 1264, 1266, 1271], "32": [49, 61, 66, 69, 79, 211, 216, 241, 309, 550, 589, 614, 773, 834, 883, 960, 990, 1115, 1136, 1242, 1258, 1263], "321": [27, 1271], "3212": [664, 1200], "321cba": 1263, "3265500": 889, "32971": [433, 1009], "32974": [433, 1009], "32976": [433, 1009], "32bit": [266, 309], "33": [180, 226, 309, 608, 773, 799, 826, 883, 1136, 1242, 1264], "333": [16, 609, 773, 1142, 1242], "33333": 1266, "333333": [207, 309, 552, 815, 883, 1115, 1140, 1242, 1258], "34": [180, 309, 660, 799, 883, 1196], "3420": [664, 1200], "343622": [619, 773], "345": [642, 643, 1178, 1179], "3456": 889, "34776706224699483": [1156, 1242], "35": [36, 309, 387, 716, 773, 959, 1242], "350": [460, 567, 773, 1133, 1242], "356": [399, 414, 432], "356194": [697, 698, 1265], "357": [399, 414, 432], "358": [399, 414, 432], "359": [399, 414, 432], "36": [180, 309, 799, 883, 1268], "360": [385, 578, 773, 1265], "361": 1271, "363961": [518, 1090], "366": [414, 990], "37": [12, 889], "370h": [439, 773, 1016, 1242], "37338": 1271, "38": [123, 156, 159], "38180177416060584": [601, 773, 1137, 1242], "381802": [601, 773, 1137, 1242], "386294": [527, 773, 1099, 1242, 1262], "389056": [443, 773, 1019, 1242, 1262], "39": [605, 725, 773], "39m": 889, "3_color_scal": [36, 309], "3d12h4m25": [201, 216, 241, 279, 309, 417, 430, 439, 589, 717, 718, 760, 761, 773, 812, 817, 834, 883, 993, 1006, 1016, 1242], "3f": [132, 660, 663, 1196, 1199], "3i": [201, 241, 309, 812, 883], "3rd": [1174, 1197], "3xy": [628, 1164], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 170, 171, 172, 173, 174, 175, 179, 181, 184, 188, 189, 190, 191, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 226, 228, 229, 230, 232, 233, 234, 235, 241, 243, 244, 251, 252, 255, 259, 260, 261, 262, 263, 264, 267, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 322, 324, 336, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 360, 361, 367, 368, 369, 371, 372, 373, 377, 378, 381, 382, 383, 385, 388, 395, 398, 399, 406, 414, 415, 416, 417, 418, 419, 422, 424, 427, 429, 430, 432, 436, 437, 439, 443, 444, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 477, 478, 482, 483, 484, 491, 492, 493, 494, 495, 497, 498, 500, 508, 510, 511, 512, 513, 514, 515, 516, 520, 521, 526, 529, 530, 531, 548, 550, 552, 553, 555, 557, 559, 560, 563, 564, 565, 568, 569, 571, 572, 573, 574, 577, 579, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 616, 620, 621, 622, 623, 626, 628, 634, 637, 638, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 658, 659, 660, 661, 665, 670, 671, 673, 674, 675, 677, 680, 681, 682, 683, 689, 690, 692, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 716, 717, 718, 720, 722, 723, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 769, 773, 788, 789, 791, 792, 793, 794, 795, 798, 802, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 889, 895, 897, 904, 911, 913, 914, 915, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 936, 943, 944, 946, 951, 956, 958, 960, 970, 974, 980, 981, 982, 984, 985, 986, 987, 988, 991, 992, 993, 995, 998, 1000, 1003, 1005, 1006, 1007, 1008, 1013, 1016, 1020, 1021, 1023, 1024, 1028, 1029, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1044, 1047, 1048, 1049, 1050, 1052, 1056, 1063, 1064, 1065, 1066, 1067, 1072, 1076, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1093, 1107, 1110, 1111, 1112, 1115, 1116, 1117, 1121, 1122, 1125, 1126, 1127, 1130, 1134, 1136, 1137, 1138, 1139, 1140, 1143, 1145, 1149, 1150, 1153, 1156, 1157, 1158, 1162, 1164, 1170, 1173, 1174, 1178, 1179, 1180, 1181, 1186, 1188, 1189, 1194, 1195, 1196, 1197, 1201, 1206, 1207, 1210, 1212, 1214, 1220, 1223, 1225, 1227, 1233, 1242, 1246, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1268, 1269, 1270, 1271], "40": [36, 180, 189, 216, 233, 309, 417, 430, 461, 524, 664, 674, 773, 799, 829, 883, 889, 976, 1006, 1096, 1200, 1257, 1258, 1260, 1263], "400": [278, 309, 425, 426, 428, 852, 883, 1132, 1133, 1135, 1242, 1260], "4000000": [1014, 1242], "404": [633, 635, 1169, 1171], "4096": 1262, "41": [180, 309, 605, 773, 799, 883, 1258, 1271], "412277": 159, "414214": [623, 773, 1159, 1242, 1262], "4160": 51, "416147": 1265, "4164": [216, 309, 817, 883], "42": [51, 180, 202, 226, 241, 309, 589, 773, 799, 826, 834, 883, 1033, 1242, 1257, 1270], "424778": [578, 773], "428571": [438, 773, 1015, 1242], "429101": 1258, "43": [180, 241, 309, 382, 589, 605, 773, 799, 834, 883], "4321": 889, "433013": [602, 773, 845, 883], "434949": 1265, "44": [10, 226, 309, 388, 773, 826, 883], "4411": [216, 309, 817, 883], "44225": [942, 1242], "444": 10, "44444444444": 10, "45": [36, 180, 241, 309, 395, 417, 430, 589, 605, 628, 634, 672, 698, 716, 733, 759, 760, 773, 799, 834, 883, 889, 967, 993, 1006, 1164, 1170, 1209, 1262, 1263, 1265, 1269, 1271], "450": [1133, 1242], "4500000": 889, "456": [9, 10, 395, 889, 967, 1219, 1242], "456000": [395, 967], "456001\u00b5": 889, "4566": [216, 309, 817, 883], "456789": [889, 994], "456789\u00b5": 889, "456m": 889, "457658": 1265, "459148": [435, 773], "46": 889, "4696": [216, 309, 817, 883], "47": [47, 180, 309, 605, 773, 799, 883, 889], "470": [830, 883], "47033": [601, 773, 1137, 1242], "47033046033698594": [601, 773, 1137, 1242], "475": [830, 883], "48": [12, 159, 241, 309, 589, 674, 773, 834, 883, 889], "4827": [216, 309], "485": 1271, "49": [180, 309, 799, 883, 889], "492474": [439, 773, 1016, 1242], "4_500_000": 889, "4ab4a": 1263, "4d": [439, 773, 1016, 1242], "4f6228": [36, 309], "4f71": [36, 309], "4x": [213, 309], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 173, 174, 175, 180, 181, 188, 189, 190, 191, 194, 195, 196, 198, 199, 200, 201, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 230, 232, 234, 235, 236, 241, 244, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 266, 267, 270, 271, 273, 276, 277, 278, 279, 282, 283, 285, 286, 288, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 318, 319, 322, 337, 338, 343, 344, 345, 347, 349, 353, 358, 360, 367, 368, 369, 372, 373, 383, 384, 385, 387, 388, 391, 394, 395, 396, 397, 398, 402, 405, 406, 407, 408, 412, 416, 418, 419, 420, 422, 423, 429, 433, 437, 439, 441, 442, 445, 447, 451, 452, 456, 457, 459, 462, 464, 466, 468, 471, 474, 475, 476, 477, 478, 482, 484, 491, 494, 495, 497, 498, 500, 503, 505, 506, 510, 511, 512, 513, 514, 515, 519, 520, 524, 530, 548, 550, 552, 564, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 602, 604, 605, 606, 607, 608, 611, 616, 622, 628, 637, 638, 641, 642, 643, 661, 665, 675, 677, 681, 682, 683, 695, 697, 698, 700, 701, 702, 703, 705, 707, 709, 710, 711, 712, 713, 714, 716, 719, 720, 721, 722, 723, 727, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 752, 754, 756, 757, 758, 762, 769, 773, 791, 792, 793, 794, 795, 799, 804, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 823, 824, 830, 834, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 854, 855, 858, 859, 860, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 883, 889, 895, 897, 901, 904, 907, 908, 911, 913, 914, 915, 917, 919, 923, 928, 929, 930, 936, 944, 946, 952, 956, 957, 958, 959, 960, 963, 966, 967, 968, 969, 970, 971, 981, 992, 994, 995, 996, 998, 999, 1005, 1007, 1008, 1009, 1013, 1016, 1018, 1020, 1021, 1022, 1030, 1034, 1035, 1037, 1039, 1043, 1046, 1056, 1063, 1066, 1067, 1072, 1075, 1078, 1082, 1083, 1084, 1085, 1086, 1087, 1091, 1092, 1096, 1100, 1107, 1112, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1126, 1127, 1130, 1131, 1132, 1133, 1135, 1136, 1139, 1143, 1145, 1150, 1153, 1156, 1159, 1164, 1173, 1174, 1177, 1178, 1197, 1201, 1214, 1221, 1223, 1226, 1227, 1230, 1233, 1242, 1251, 1254, 1256, 1258, 1259, 1262, 1263, 1264, 1265, 1268, 1270, 1271], "50": [12, 27, 36, 180, 189, 199, 309, 373, 417, 430, 715, 773, 799, 883, 889, 946, 958, 1006, 1242, 1257], "500": [36, 278, 309, 397, 398, 402, 405, 407, 408, 412, 418, 420, 852, 883, 980, 982, 988, 1132, 1133, 1135, 1242], "5000": [271, 309, 1226, 1242], "50000": 130, "500000": [405, 980], "500000000": [412, 988], "5000555": 889, "500_000": [397, 398, 402, 405, 407, 408, 412, 418, 420], "500m": [980, 982, 988], "51": 889, "512": [41, 131, 213, 309, 574, 773, 1115, 1242], "51966": [665, 1201], "52": [283, 309, 431, 608, 773, 817, 855, 883], "523599": 1265, "527525": [1138, 1242], "53": [431, 1007, 1268], "533316061": 1250, "533_316_061": 1250, "54": [443, 773, 1054, 1242, 1262, 1271], "540": [385, 578, 773], "540302": 1265, "543": 9, "543081": [375, 773, 949, 1242], "5432": 131, "54321": 9, "544": 1271, "544705": 705, "549306": [901, 1242], "55": [36, 49, 309, 1263, 1264], "5555": 889, "55550": 889, "56": [123, 678, 773], "566371": [578, 773], "567": 27, "56789": [943, 1027, 1141, 1242], "57": [605, 773, 1141, 1242, 1265, 1271], "570796": [326, 328, 773, 896, 898, 1242, 1265], "575050513": [156, 159], "58": [234, 309], "581139": [958, 1242], "584963": [525, 773], "587401": [371, 773, 1262], "59": [123, 180, 309, 395, 408, 418, 452, 716, 759, 760, 761, 773, 799, 883, 889, 967, 984, 994], "59815": [443, 773, 1262], "5_000_555": 889, "5th": [36, 309], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 173, 176, 177, 181, 182, 183, 184, 185, 186, 188, 189, 192, 195, 196, 197, 198, 199, 201, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 292, 302, 303, 309, 312, 313, 318, 322, 343, 344, 345, 347, 353, 361, 368, 369, 381, 382, 388, 391, 395, 399, 409, 413, 414, 415, 425, 426, 428, 431, 432, 435, 437, 446, 447, 452, 453, 456, 462, 464, 466, 484, 485, 486, 495, 498, 511, 512, 513, 514, 518, 530, 531, 564, 568, 575, 578, 579, 580, 585, 587, 589, 591, 593, 595, 597, 599, 602, 604, 605, 606, 611, 622, 628, 632, 642, 643, 665, 675, 677, 682, 690, 692, 694, 701, 709, 710, 711, 713, 716, 720, 723, 729, 734, 735, 739, 752, 756, 769, 773, 791, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 813, 815, 816, 818, 820, 821, 828, 830, 832, 834, 835, 836, 838, 840, 841, 842, 843, 844, 847, 850, 851, 854, 855, 858, 859, 864, 874, 875, 883, 889, 911, 913, 914, 915, 917, 923, 944, 948, 950, 954, 955, 960, 963, 989, 1008, 1013, 1020, 1030, 1035, 1057, 1058, 1067, 1070, 1083, 1084, 1085, 1086, 1090, 1107, 1118, 1121, 1122, 1127, 1129, 1134, 1136, 1138, 1140, 1145, 1150, 1164, 1168, 1178, 1201, 1213, 1223, 1242, 1251, 1254, 1256, 1258, 1259, 1262, 1268, 1269, 1271], "60": [36, 126, 189, 234, 309, 402, 407, 408, 418, 429, 452, 605, 660, 773, 990, 994, 1005, 1123, 1196, 1242, 1265], "600": [278, 309, 425, 426, 428, 852, 883, 889], "60000": 405, "600000": 889, "60000000": 412, "60206": [526, 773, 1262], "605551": 754, "605551275463989": 754, "609438": 1262, "60_000": [397, 398, 402, 405, 407, 408, 412, 418, 420], "61": [234, 309], "625": [599, 773], "626172": [630, 1166], "63": [605, 773], "63204": 1271, "6331e16": [1215, 1242, 1265], "636253": 1265, "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 170, 271, 309, 376, 550, 574, 773, 1115, 1242, 1262], "64030": [665, 1201], "642093": 1265, "647961": 159, "64bit": [151, 581, 773, 1123, 1242], "65": [1012, 1242], "650": [460, 567, 773], "65280": [665, 1201], "654": [27, 752, 844, 883], "65432": 1266, "65536": 1262, "66": [216, 278, 309, 605, 690, 773, 817, 852, 883, 1054, 1136, 1242], "663053": 123, "666": 889, "666000": 889, "666667": [180, 207, 280, 297, 309, 438, 738, 773, 799, 815, 853, 869, 883, 1015, 1242], "666f6f": [630, 1166], "678": [628, 634, 1164, 1170], "6789": [28, 889], "67890": 28, "686241": 1258, "69": [605, 773, 1054, 1242], "693147": [527, 773, 1097, 1099, 1242, 1262], "6_000_000": 1250, "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 173, 176, 177, 178, 180, 182, 183, 185, 186, 188, 192, 195, 197, 201, 203, 205, 207, 215, 218, 220, 222, 224, 226, 227, 231, 234, 236, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 254, 257, 258, 259, 260, 265, 267, 268, 269, 277, 279, 280, 281, 309, 313, 318, 322, 344, 345, 347, 356, 382, 394, 395, 399, 406, 414, 416, 417, 430, 432, 443, 456, 462, 466, 467, 484, 498, 511, 512, 513, 514, 568, 579, 585, 589, 604, 605, 622, 637, 664, 677, 701, 709, 710, 713, 716, 717, 723, 728, 734, 735, 752, 756, 773, 791, 796, 797, 799, 801, 803, 805, 808, 810, 812, 813, 815, 816, 820, 826, 828, 831, 832, 834, 835, 836, 840, 844, 847, 883, 889, 901, 914, 915, 917, 926, 966, 967, 971, 976, 981, 992, 993, 1006, 1008, 1019, 1038, 1053, 1070, 1083, 1084, 1085, 1086, 1126, 1127, 1139, 1145, 1173, 1200, 1242, 1251, 1256, 1258, 1259, 1262, 1264, 1268, 1271], "70": [180, 309, 690, 773, 799, 883, 1054, 1242], "700": [278, 309, 852, 883], "702963": [36, 309], "707107": [355, 440, 602, 603, 697, 773, 925, 1017, 1242, 1265], "712389": 1265, "714": 1271, "714286": [467, 773, 1038, 1242], "718281828459045": [10, 435, 525, 773, 1012, 1097, 1242], "718282": [443, 773, 1019, 1242, 1262], "720": [385, 578, 773], "7264": 1271, "732051": [1159, 1242], "7415e16": 159, "75": [36, 180, 309, 322, 568, 576, 591, 593, 595, 597, 602, 604, 606, 735, 773, 799, 883, 889, 958, 1035, 1054, 1119, 1242, 1265, 1271], "7500": [214, 309], "7508": 1271, "754": [683, 773], "754888": [435, 773], "761594": [679, 773, 1216, 1242], "7654": 889, "765431": 994, "7654321": 27, "76933c": [36, 309], "78": 9, "780": 9, "784": [216, 309], "785398": [330, 697, 698, 773, 900, 1242, 1265], "789": [10, 889], "79": [1054, 1242], "7d": 889, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 173, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 192, 195, 197, 199, 203, 205, 212, 215, 216, 218, 219, 220, 222, 224, 227, 236, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 254, 256, 257, 258, 260, 265, 267, 268, 269, 277, 280, 281, 283, 309, 322, 324, 336, 344, 345, 347, 379, 382, 383, 395, 456, 463, 466, 467, 492, 494, 498, 511, 512, 513, 514, 550, 568, 574, 585, 586, 590, 614, 620, 622, 644, 645, 660, 690, 695, 701, 705, 707, 710, 712, 720, 722, 727, 728, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 752, 754, 757, 758, 762, 773, 791, 796, 797, 799, 801, 802, 803, 805, 808, 810, 813, 816, 820, 821, 830, 832, 835, 836, 840, 844, 847, 855, 883, 889, 914, 915, 917, 950, 956, 976, 1035, 1038, 1053, 1064, 1066, 1070, 1083, 1084, 1085, 1086, 1115, 1127, 1130, 1131, 1134, 1136, 1138, 1140, 1180, 1181, 1196, 1242, 1250, 1251, 1256, 1258, 1259, 1262, 1263, 1264, 1268, 1271], "80": [36, 309], "800": [425, 426, 428], "8000": 131, "803065983": 123, "81": 1262, "814697265625": [1014, 1242], "816497": [257, 309], "8192": 129, "82": [216, 309, 817, 883], "8257e14": 1271, "83": [216, 309, 817, 883], "833": [216, 309], "833333": [297, 869], "848062": 1265, "848808": 159, "85": [36, 309, 1054, 1242, 1271], "850": [460, 567, 773], "8568409950394724": [1012, 1242], "8589934592": [614, 773], "86": 1271, "8601": 1263, "87": 1271, "876": 9, "88": [180, 309, 799, 883], "881374": [329, 773, 899, 1242], "888": [752, 844, 883], "8_000_000": 1250, "8a": [932, 933], "8nin": 1271, "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 151, 178, 180, 194, 203, 207, 218, 219, 234, 241, 243, 244, 247, 259, 260, 277, 281, 283, 302, 309, 318, 322, 324, 336, 344, 345, 347, 352, 354, 379, 382, 385, 395, 448, 456, 466, 472, 492, 498, 509, 517, 552, 568, 578, 585, 589, 590, 601, 604, 605, 616, 620, 634, 664, 672, 674, 703, 709, 710, 713, 716, 728, 761, 773, 799, 813, 815, 820, 834, 836, 847, 855, 874, 883, 889, 909, 910, 914, 915, 917, 922, 924, 958, 971, 980, 982, 988, 993, 1006, 1007, 1044, 1053, 1064, 1070, 1081, 1089, 1127, 1131, 1137, 1139, 1141, 1153, 1170, 1200, 1209, 1242, 1250, 1251, 1256, 1259, 1268], "90": [180, 309, 664, 799, 883, 1200, 1265], "901234": [943, 1027, 1141, 1242], "909": [216, 309], "910": [216, 309, 634, 1170], "910t": [628, 634, 1164, 1170], "914": [216, 309], "9223372036854775807": [686, 773], "9223372036854775808": [528, 773], "927295": 1265, "928571": [441, 773, 1018, 1242], "93": [1054, 1242], "94": [319, 773], "9477376373212048": [1054, 1242], "95": [17, 319, 773, 889], "95b3d7": [36, 309], "96": [17, 180, 309, 319, 773, 799, 883, 1054, 1242], "961": 51, "963624": [440, 773, 1017, 1242], "963757": 1265, "964028": [234, 309], "96_067_179": 1250, "97": [17, 206, 309, 319, 773, 1054, 1242], "9774092659964970114": [461, 773], "978307200": [401, 973], "978307200000": 421, "978307200000000": [401, 421, 973, 997], "978307200000000000": 997, "978393600": [401, 973], "978393600000": 421, "978393600000000": [401, 421, 973, 997], "978393600000000000": 997, "978480000": [401, 973], "978480000000": 421, "978480000000000": [401, 421, 973, 997], "978480000000000000": 997, "98": [17, 206, 234, 309, 367, 455, 458, 621, 664, 681, 773, 1200], "987": 27, "987000": 889, "9876": 9, "987654": [27, 889], "987654321": 10, "9876543210": 123, "987m": 889, "988": 10, "99": [17, 36, 190, 191, 206, 209, 234, 278, 309, 319, 367, 445, 447, 455, 458, 621, 681, 763, 773, 806, 807, 852, 883, 1012, 1022, 1242, 1262], "9914e218": 159, "998347": [234, 309], "999": [394, 406, 889, 966, 981, 1260, 1271], "999000": 889, "999954": [234, 309], "999999": [670, 716, 759, 760, 761, 889, 1206], "999999\u00b5": 889, "9bbb59": [36, 309], "A": [13, 33, 36, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 177, 185, 194, 201, 215, 216, 221, 223, 228, 234, 259, 262, 277, 278, 279, 283, 284, 309, 317, 389, 390, 395, 419, 422, 436, 437, 445, 457, 459, 470, 473, 475, 476, 482, 522, 529, 530, 541, 554, 563, 564, 586, 591, 593, 595, 597, 599, 602, 604, 606, 626, 627, 628, 633, 634, 635, 636, 637, 638, 641, 643, 646, 647, 648, 650, 661, 670, 703, 719, 720, 724, 773, 797, 803, 812, 816, 817, 832, 852, 855, 856, 883, 889, 961, 962, 967, 995, 998, 1022, 1132, 1133, 1135, 1138, 1139, 1140, 1162, 1163, 1164, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1179, 1182, 1183, 1184, 1186, 1197, 1206, 1242, 1250, 1251, 1254, 1266, 1268], "AND": [691, 692, 752, 889], "AS": [256, 309, 752, 753, 844, 883, 1250, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1270], "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 266, 271, 309, 522, 763, 883], "At": [41, 234, 309], "BY": [752, 844, 883, 1250, 1253, 1259, 1267, 1268], "Be": 883, "By": [12, 14, 30, 47, 129, 130, 143, 201, 215, 216, 241, 243, 252, 257, 279, 280, 309, 353, 413, 417, 430, 515, 518, 524, 584, 589, 592, 594, 596, 598, 600, 603, 605, 607, 613, 624, 688, 705, 707, 714, 715, 717, 718, 719, 733, 754, 760, 761, 762, 773, 794, 812, 816, 817, 834, 840, 845, 853, 883, 923, 989, 993, 1006, 1087, 1126, 1149, 1160, 1232, 1242], "For": [14, 35, 36, 131, 132, 133, 144, 145, 184, 189, 215, 216, 234, 241, 266, 295, 309, 312, 410, 411, 438, 440, 441, 452, 522, 531, 541, 581, 619, 626, 633, 634, 635, 637, 638, 661, 709, 719, 723, 724, 769, 773, 802, 817, 834, 867, 883, 887, 1015, 1017, 1018, 1021, 1101, 1123, 1156, 1162, 1169, 1170, 1171, 1173, 1174, 1197, 1221, 1242, 1246], "IF": 1261, "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 170, 184, 189, 199, 201, 203, 211, 212, 213, 216, 218, 219, 223, 230, 234, 241, 243, 244, 245, 249, 252, 254, 256, 259, 260, 263, 264, 266, 267, 273, 274, 276, 277, 278, 309, 321, 323, 346, 353, 358, 369, 391, 395, 396, 410, 411, 419, 422, 448, 463, 468, 480, 501, 510, 515, 516, 522, 530, 531, 537, 543, 544, 569, 574, 576, 579, 581, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 613, 615, 619, 620, 625, 634, 635, 637, 638, 639, 640, 650, 651, 652, 653, 655, 656, 657, 660, 661, 662, 663, 667, 670, 687, 691, 693, 696, 700, 701, 704, 705, 708, 709, 714, 715, 717, 718, 719, 722, 723, 729, 730, 731, 733, 735, 745, 748, 749, 750, 755, 760, 761, 763, 764, 773, 794, 795, 802, 804, 812, 816, 817, 821, 825, 832, 834, 838, 840, 842, 844, 849, 851, 852, 867, 877, 883, 887, 889, 893, 894, 916, 923, 928, 937, 946, 963, 967, 968, 986, 987, 995, 998, 1021, 1032, 1034, 1035, 1039, 1053, 1054, 1056, 1073, 1082, 1087, 1088, 1094, 1101, 1119, 1121, 1123, 1125, 1126, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1145, 1147, 1149, 1152, 1156, 1157, 1161, 1170, 1171, 1173, 1174, 1175, 1176, 1186, 1187, 1188, 1189, 1191, 1192, 1193, 1196, 1197, 1198, 1199, 1203, 1206, 1214, 1217, 1221, 1223, 1231, 1242, 1250, 1251, 1253, 1260, 1268], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 187, 189, 201, 216, 219, 230, 234, 241, 267, 276, 309, 530, 531, 589, 773, 795, 812, 834, 851, 883, 1014, 1021, 1122, 1242], "It": [37, 38, 42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 180, 226, 233, 256, 261, 266, 271, 277, 278, 286, 295, 309, 313, 383, 384, 417, 463, 531, 540, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 749, 750, 769, 773, 790, 794, 795, 799, 804, 821, 826, 844, 852, 859, 867, 883, 941, 956, 957, 993, 1035, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1146, 1217, 1221, 1226, 1242], "Its": [202, 309, 461, 773, 1033, 1242], "NO": [668, 889, 1204], "NOT": [119, 212, 250, 309, 522, 539, 612, 773, 839, 883, 1268], "No": [20, 668, 1204], "Not": [190, 309, 446, 475, 476, 773, 806, 883, 1023, 1242], "ON": 1268, "OR": [693, 694, 808, 883, 889], "On": [683, 773], "One": [47, 180, 230, 234, 266, 271, 309, 322, 568, 695, 706, 722, 728, 731, 738, 740, 743, 744, 753, 773, 799, 883, 889, 958, 1242], "Or": [200, 201, 216, 241, 255, 279, 288, 309, 439, 569, 589, 622, 714, 715, 717, 718, 760, 761, 763, 769, 773, 811, 812, 817, 834, 843, 860, 883, 1016, 1242], "THERE": [668, 1204], "That": [135, 821, 883], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 172, 180, 181, 183, 184, 185, 188, 189, 192, 199, 200, 201, 202, 207, 213, 216, 219, 226, 232, 241, 242, 243, 244, 247, 248, 249, 256, 266, 267, 272, 275, 279, 283, 284, 286, 287, 288, 295, 309, 320, 361, 362, 363, 364, 367, 368, 384, 386, 389, 390, 391, 399, 409, 413, 414, 417, 419, 430, 431, 442, 445, 448, 452, 453, 461, 493, 497, 530, 531, 543, 569, 576, 579, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 616, 619, 625, 629, 630, 633, 638, 639, 640, 644, 645, 646, 647, 655, 656, 657, 658, 659, 660, 661, 671, 674, 681, 682, 701, 703, 721, 725, 733, 735, 749, 750, 751, 752, 755, 763, 765, 766, 768, 769, 773, 774, 775, 778, 780, 781, 782, 789, 799, 800, 802, 804, 805, 808, 811, 812, 813, 815, 817, 820, 821, 826, 830, 834, 836, 837, 838, 844, 848, 850, 855, 856, 859, 860, 867, 883, 887, 888, 889, 892, 895, 931, 932, 933, 936, 945, 957, 958, 961, 962, 963, 971, 985, 989, 990, 993, 995, 1006, 1007, 1021, 1022, 1025, 1033, 1065, 1069, 1101, 1119, 1121, 1125, 1126, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1153, 1156, 1161, 1165, 1166, 1174, 1175, 1176, 1180, 1181, 1182, 1183, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1223, 1227, 1234, 1236, 1238, 1242, 1243, 1247, 1248, 1249, 1250, 1255, 1268, 1269, 1271], "There": [668, 1204, 1268], "These": [1, 36, 125, 131, 132, 168, 273, 309, 430, 772, 773, 887, 993, 1006], "To": [35, 54, 190, 309, 373, 389, 390, 446, 447, 626, 632, 633, 634, 637, 646, 647, 656, 657, 658, 659, 668, 773, 806, 883, 946, 961, 962, 1023, 1032, 1162, 1168, 1169, 1170, 1173, 1182, 1183, 1204, 1223, 1242, 1268], "Will": [53, 54, 794, 795, 804, 830, 841, 883, 1242], "With": [138, 211, 252, 309, 353, 515, 613, 773, 840, 883, 923, 1053, 1087, 1149, 1242], "_": [1, 47, 51, 234, 264, 268, 309, 346, 501, 627, 634, 636, 642, 643, 648, 651, 652, 841, 883, 940, 1163, 1170, 1178, 1179, 1184, 1188, 1218, 1242], "__call__": 769, "__dataframe__": 117, "__enter__": 1268, "__exit__": 1268, "__getattr__": 769, "__getitem__": 671, "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 1268], "__name__": [214, 309], "_bar_": 724, "_btm_by_a": [368, 773], "_btm_by_b": [368, 773], "_by_ca": [368, 682, 773], "_by_cb": [368, 682, 773], "_df": [1, 48], "_diff": [283, 309, 855, 883], "_eager": [794, 883], "_expr": [1, 49], "_foo": 536, "_geventdataframeresult": [54, 795, 883], "_is_not_nan": [476, 773], "_is_odd": [247, 309, 836, 883], "_isnan": [475, 773], "_isnul": [478, 773], "_kwarg": [794, 883], "_ldf": 1, "_lf": 50, "_lower_boundari": [201, 309, 812, 883], "_max": [569, 773], "_mean_squar": [288, 860], "_min": [569, 773], "_not_nul": [477, 773], "_o": [642, 643, 1178, 1179], "_revers": [553, 557, 586, 773], "_right": [215, 216, 309, 816, 817, 883], "_suffix": 558, "_sum": [288, 860], "_top_by_a": [682, 773], "_top_by_b": [682, 773], "_train": [857, 883], "_upper_boundari": [201, 309, 812, 883], "_world": 724, "a1": [36, 48, 50, 309], "a101": 1271, "a123": [36, 309], "a2": [36, 48, 50, 309], "a_1": [652, 1188, 1218, 1242], "a_2": [1218, 1242], "a_3": [1218, 1242], "a_a": 753, "a_agg_list": [201, 309, 812, 883], "a_b_doubl": 720, "a_btm_by_a": [368, 773], "a_btm_by_b": [368, 773], "a_by_ca": [368, 682, 773], "a_by_cb": [368, 682, 773], "a_div_2": 1262, "a_div_5": 1262, "a_interpol": [467, 773], "a_is_even": [256, 309, 752, 844, 883], "a_isnul": [478, 773], "a_lag_": 703, "a_log2": 1262, "a_mod_2": 1262, "a_not_nul": [477, 773], "a_revers": [553, 557, 586, 773], "a_rol": 703, "a_suffix": 558, "a_times_2": [531, 773], "a_top_by_a": [682, 773], "a_top_by_b": [682, 773], "a_txt": 753, "aa": [442, 626, 637, 721, 773, 889, 958, 1162, 1173, 1242, 1263], "aaa": [1, 36, 309, 626, 637, 671, 673, 889, 1162, 1173], "aaaa": [932, 933], "aabcdef": 657, "aad": [932, 933], "aag": 26, "aazz": 1263, "ab": [203, 218, 260, 283, 309, 671, 673, 773, 855, 883, 889, 1034, 1056, 1214, 1242, 1261, 1263], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 318, 634, 646, 656, 773, 889, 1170, 1182, 1183], "abc123": 1263, "abc456": [646, 1182, 1183, 1263], "abcabc": 647, "abcd": 1263, "abcdeff": 656, "abf": [133, 144, 145], "abl": [91, 131], "about": [91, 131, 619, 626, 633, 634, 637, 646, 647, 773, 887, 1156, 1162, 1169, 1170, 1173, 1182, 1183, 1242, 1271], "abov": [36, 152, 216, 234, 309, 763], "abs_a": 1262, "absenc": [1032, 1242], "absolut": [133, 144, 145, 152, 153, 154, 155, 317, 438, 440, 441, 773, 891, 1015, 1017, 1018, 1242, 1262], "acc": [709, 710, 723, 747], "accent": 889, "accept": [127, 129, 130, 133, 135, 137, 141, 159, 172, 182, 200, 247, 248, 252, 255, 272, 283, 284, 288, 309, 318, 368, 373, 442, 468, 569, 583, 584, 622, 674, 682, 690, 692, 694, 699, 702, 703, 704, 712, 721, 737, 739, 742, 751, 755, 757, 763, 769, 773, 789, 801, 811, 836, 837, 840, 843, 848, 855, 856, 860, 883, 887, 888, 946, 1039, 1125, 1126, 1149, 1242], "access": [37, 48, 49, 50, 51, 135, 141, 143, 145, 146, 148, 170, 176, 213, 242, 243, 256, 309, 635, 671, 796, 844, 857, 883, 888, 1171, 1271], "accord": [242, 309, 576, 714, 715, 717, 718, 760, 761, 773, 976, 1119, 1242], "account": [36, 123, 132, 145, 309, 413, 438, 440, 441, 773, 989, 1015, 1017, 1018, 1242], "accumul": [709, 710, 723, 747], "acg": 26, "achiev": [219, 234, 295, 309, 531, 643, 773, 1101, 1179, 1242], "aco": 1261, "acosd": 1261, "across": [36, 47, 132, 181, 202, 221, 223, 228, 249, 259, 309, 386, 461, 543, 692, 694, 709, 710, 712, 737, 739, 742, 757, 773, 800, 838, 883, 1033, 1242], "action": [35, 309], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 494, 634, 1066, 1170], "actual": [36, 119, 159, 163, 244, 309, 1151, 1242, 1263, 1270], "ad": [34, 36, 119, 134, 201, 256, 266, 271, 273, 278, 283, 284, 309, 324, 445, 537, 674, 709, 710, 752, 773, 812, 844, 852, 855, 856, 883, 889, 1022, 1221, 1226, 1242], "adbc": [34, 131, 132, 309], "adbc_driver_manag": 151, "adbc_ingest": [34, 309], "add": [35, 36, 130, 189, 201, 219, 283, 284, 285, 286, 309, 384, 555, 556, 557, 558, 576, 674, 719, 723, 763, 773, 812, 816, 855, 856, 857, 858, 859, 883, 1021, 1242], "add_calendar_dai": 719, "add_calendar_month": 719, "add_calendar_year": 719, "add_dai": 719, "add_format": [36, 309], "add_hour": 719, "add_milli": 719, "add_second": 719, "add_week": 719, "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 184, 188, 200, 217, 232, 247, 248, 255, 268, 275, 283, 284, 288, 309, 318, 400, 442, 445, 569, 622, 626, 633, 634, 637, 646, 647, 671, 674, 699, 702, 703, 704, 721, 751, 752, 755, 769, 773, 805, 811, 836, 837, 843, 850, 855, 856, 860, 883, 889, 964, 972, 1022, 1162, 1169, 1170, 1173, 1182, 1183, 1224, 1242, 1246, 1251, 1268], "addition": [55, 242, 309, 889], "address": 634, "adjac": [36, 309], "adjust": [438, 440, 441, 619, 773, 1015, 1017, 1018, 1156, 1242], "adl": [133, 144, 145], "adlf": 145, "advanc": [36, 234, 309, 358, 522, 552, 555, 557, 559, 560, 928, 1094, 1271], "advantag": [168, 233, 309], "advis": [36, 46, 85, 309], "aedt": 716, "aeiuo": [637, 1173], "af1": 47, "af2": 47, "af3": 47, "affect": [34, 152, 153, 154, 155, 309], "afm": 145, "afoo": [857, 883], "after": [36, 55, 119, 127, 129, 130, 135, 137, 141, 143, 146, 147, 148, 172, 189, 272, 275, 309, 367, 368, 442, 569, 579, 670, 681, 682, 773, 789, 848, 850, 883, 936, 1021, 1121, 1206, 1227, 1242, 1256], "afterward": [46, 763], "ag": [226, 309, 826, 883, 1269], "again": [531, 773], "against": [34, 93, 129, 131, 256, 309, 494, 637, 752, 844, 883, 1066, 1173, 1250, 1268, 1270, 1271], "agg": [200, 201, 234, 241, 309, 319, 368, 448, 450, 455, 458, 530, 531, 569, 621, 622, 682, 689, 735, 773, 794, 795, 804, 811, 812, 830, 834, 841, 883, 889], "agg_group": [726, 773], "agg_list": [530, 773], "aggreg": [129, 130, 133, 141, 194, 200, 201, 220, 222, 224, 227, 230, 234, 235, 236, 241, 257, 258, 277, 280, 288, 289, 291, 293, 309, 319, 448, 464, 530, 531, 569, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 691, 692, 693, 694, 709, 710, 711, 712, 723, 728, 736, 737, 739, 741, 742, 747, 756, 757, 773, 812, 821, 822, 823, 824, 827, 828, 831, 834, 845, 846, 853, 860, 861, 863, 865, 883, 887, 1036, 1131, 1132, 1133, 1135, 1138, 1139, 1140, 1242, 1257, 1259, 1261, 1267], "aggregate_funct": [234, 309, 889], "aho": [627, 636, 648, 1163, 1172, 1184], "aiosqlit": 131, "alchemy_conn": 131, "algorithm": [171, 309, 325, 627, 636, 648, 695, 773, 788, 883, 1163, 1172, 1184], "alia": [1, 12, 47, 49, 51, 83, 176, 201, 218, 234, 241, 275, 283, 286, 309, 318, 322, 362, 363, 364, 365, 366, 367, 378, 379, 380, 381, 382, 384, 387, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 430, 431, 432, 433, 436, 437, 450, 452, 457, 459, 465, 468, 471, 474, 482, 484, 506, 518, 524, 529, 531, 535, 537, 539, 541, 545, 548, 550, 552, 563, 564, 568, 570, 574, 576, 579, 581, 609, 611, 626, 627, 628, 629, 631, 633, 634, 636, 637, 638, 642, 643, 648, 649, 650, 651, 652, 653, 654, 658, 659, 661, 671, 672, 673, 675, 680, 681, 683, 689, 690, 696, 697, 698, 702, 703, 704, 714, 717, 719, 720, 723, 724, 729, 732, 734, 735, 747, 755, 760, 763, 773, 812, 814, 820, 834, 850, 855, 859, 883, 957, 964, 965, 968, 971, 972, 973, 974, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1056, 1119, 1124, 1169, 1170, 1188, 1189, 1242], "alias": [256, 309, 537, 844, 883], "alic": [129, 1269], "align": [10, 15, 16, 36, 47, 55, 309, 1269], "align_fram": 55, "all": [1, 4, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 171, 173, 180, 182, 184, 191, 203, 208, 210, 212, 213, 214, 215, 217, 218, 223, 225, 229, 230, 234, 237, 242, 243, 244, 248, 254, 255, 259, 260, 264, 266, 267, 271, 274, 276, 277, 278, 279, 284, 286, 309, 322, 324, 346, 361, 368, 377, 383, 389, 390, 391, 392, 442, 447, 453, 460, 461, 464, 466, 470, 473, 477, 478, 483, 493, 494, 501, 519, 522, 530, 549, 552, 553, 555, 556, 557, 558, 559, 560, 567, 579, 584, 586, 590, 614, 620, 622, 628, 634, 635, 638, 641, 647, 655, 656, 657, 661, 682, 692, 701, 709, 710, 711, 712, 721, 723, 728, 729, 732, 739, 747, 755, 756, 757, 763, 769, 773, 779, 785, 788, 791, 794, 795, 799, 801, 802, 804, 807, 816, 821, 825, 830, 837, 841, 842, 843, 849, 851, 852, 856, 857, 859, 883, 889, 916, 956, 958, 961, 962, 963, 964, 1034, 1040, 1052, 1056, 1065, 1066, 1073, 1091, 1094, 1121, 1126, 1131, 1157, 1164, 1170, 1171, 1174, 1177, 1183, 1191, 1192, 1193, 1197, 1214, 1223, 1242, 1251, 1253, 1258, 1259, 1263, 1267, 1268, 1270, 1271], "all_compat": 1253, "all_data": 1268, "all_horizont": [184, 309, 691, 802, 883], "all_stat": 30, "alloc": [129, 130, 187, 237, 309, 773, 887, 1014, 1242], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 170, 213, 216, 217, 242, 243, 245, 267, 268, 271, 274, 287, 309, 413, 419, 422, 510, 530, 531, 537, 581, 610, 660, 662, 663, 773, 816, 817, 821, 825, 849, 851, 857, 883, 887, 889, 989, 995, 998, 1082, 1101, 1123, 1143, 1196, 1198, 1199, 1223, 1224, 1242, 1263, 1271], "allow_alias": 537, "allow_chunk": [159, 163], "allow_copi": [117, 170, 267, 309, 1223, 1242], "allow_dupl": [576, 773, 1119, 1242], "allow_infin": [159, 163], "allow_nul": [156, 159, 163, 1271], "allow_object": 733, "allow_parallel": [216, 309, 816, 817, 883], "allow_pyarrow_filt": 149, "allow_time_zon": [159, 160, 163], "allowed_dtyp": [159, 160, 163, 1271], "almost": [54, 219, 295, 309, 660, 662, 663, 795, 883, 1101, 1196, 1198, 1199, 1242], "alpha": [438, 440, 441, 773, 804, 830, 841, 883, 889, 1015, 1017, 1018, 1242], "alpha_i": [439, 773, 1016, 1242], "alphabet": [889, 1271], "alphanumer": 889, "alreadi": [34, 35, 92, 266, 309, 383, 494, 687, 773, 841, 883, 956, 1066, 1231, 1242], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 143, 158, 159, 162, 163, 168, 185, 200, 201, 226, 230, 234, 241, 243, 247, 255, 266, 278, 283, 286, 309, 379, 382, 391, 413, 416, 448, 468, 531, 537, 579, 583, 584, 622, 646, 647, 655, 656, 671, 701, 709, 710, 713, 716, 723, 725, 747, 763, 772, 773, 779, 811, 812, 826, 834, 836, 843, 852, 855, 857, 859, 883, 889, 963, 992, 1039, 1121, 1125, 1126, 1164, 1182, 1183, 1191, 1242, 1246, 1251, 1253, 1256, 1263, 1266, 1268, 1269], "altern": [36, 309, 769, 1260], "although": [256, 309, 844, 883], "alwai": [13, 33, 35, 42, 63, 65, 129, 172, 200, 215, 216, 219, 272, 295, 309, 367, 368, 530, 540, 660, 681, 682, 763, 773, 789, 816, 817, 821, 848, 883, 889, 936, 1101, 1196, 1227, 1242, 1250, 1251, 1268, 1271], "am": [649, 1185], "amarillo": 1263, "ambigu": [416, 417, 430, 660, 663, 716, 992, 993, 1006, 1196, 1199], "america": 717, "amount": [46, 64, 85, 143, 146, 531, 719, 773, 1258], "amsterdam": [416, 992], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 140, 143, 145, 146, 157, 159, 163, 173, 174, 175, 176, 182, 187, 190, 194, 196, 201, 212, 213, 214, 216, 219, 230, 234, 239, 241, 242, 246, 256, 261, 267, 271, 273, 277, 278, 283, 286, 295, 309, 320, 342, 345, 357, 363, 379, 380, 381, 382, 383, 384, 391, 395, 396, 413, 416, 419, 433, 439, 447, 448, 454, 455, 458, 491, 494, 497, 499, 521, 522, 530, 531, 541, 543, 552, 553, 574, 575, 576, 584, 585, 589, 590, 591, 593, 595, 597, 599, 602, 604, 606, 625, 626, 629, 634, 637, 640, 660, 662, 663, 665, 667, 683, 691, 696, 700, 714, 715, 717, 718, 720, 722, 725, 729, 730, 731, 732, 733, 745, 747, 748, 751, 755, 760, 761, 763, 764, 769, 773, 791, 792, 793, 795, 799, 801, 804, 808, 812, 817, 821, 830, 834, 835, 841, 844, 852, 855, 857, 859, 867, 883, 887, 888, 889, 912, 915, 927, 932, 945, 947, 952, 953, 954, 955, 956, 963, 967, 995, 1009, 1014, 1016, 1053, 1063, 1066, 1069, 1071, 1093, 1101, 1126, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1144, 1146, 1161, 1162, 1165, 1170, 1173, 1176, 1196, 1198, 1199, 1201, 1203, 1223, 1242, 1259, 1260, 1263, 1267, 1268, 1270], "ana": [649, 1185], "anan": [649, 1185], "ananab": 1263, "and_": 773, "ang": 1263, "angl": [697, 698], "ani": [4, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 172, 178, 184, 189, 191, 192, 194, 196, 211, 213, 214, 215, 216, 219, 223, 233, 242, 243, 244, 256, 259, 261, 262, 263, 266, 267, 268, 271, 272, 274, 277, 278, 286, 309, 313, 318, 321, 322, 346, 367, 368, 369, 383, 384, 417, 418, 436, 437, 447, 448, 452, 455, 457, 459, 463, 472, 482, 489, 494, 501, 529, 530, 531, 537, 545, 548, 550, 552, 553, 555, 557, 559, 560, 563, 564, 568, 573, 576, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 625, 627, 639, 656, 657, 658, 659, 660, 662, 663, 665, 667, 675, 681, 682, 683, 690, 691, 692, 694, 704, 705, 706, 733, 735, 749, 750, 763, 773, 789, 794, 795, 802, 804, 807, 808, 816, 817, 829, 844, 848, 849, 852, 859, 883, 887, 889, 893, 916, 936, 941, 956, 957, 993, 994, 1021, 1024, 1028, 1035, 1044, 1053, 1061, 1066, 1073, 1101, 1119, 1125, 1126, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1161, 1163, 1175, 1196, 1198, 1199, 1201, 1203, 1217, 1221, 1222, 1223, 1224, 1226, 1227, 1242, 1268, 1271], "anna": [226, 309, 826, 883], "anoth": [86, 158, 173, 181, 186, 200, 216, 249, 309, 383, 386, 393, 467, 497, 535, 539, 543, 583, 592, 594, 596, 598, 600, 603, 605, 607, 637, 773, 791, 800, 811, 838, 857, 883, 956, 965, 1013, 1021, 1038, 1069, 1125, 1126, 1173, 1242, 1262, 1263], "anti": [215, 309, 816, 867, 883, 1144, 1146, 1242, 1257], "any_horizont": 693, "anyth": [35, 242, 309], "anywher": [365, 366, 660, 662, 663, 1196, 1198, 1199], "ap": 1263, "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 309], "apaya": [661, 1197], "api": [0, 117, 149, 170, 219, 295, 309, 531, 735, 773, 867, 1101, 1242, 1267], "apia": [392, 964], "app": [654, 1190], "appear": [36, 59, 119, 154, 155, 309, 685, 773, 889, 1229, 1242, 1269], "append": [34, 35, 159, 189, 215, 216, 309, 580, 763, 773, 816, 817, 883, 1021, 1242], "appl": [177, 205, 215, 238, 239, 262, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 309, 368, 586, 631, 654, 682, 773, 816, 832, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 883, 1167, 1190, 1257, 1263], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 180, 194, 219, 233, 255, 256, 266, 295, 309, 334, 394, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 412, 414, 415, 418, 420, 431, 432, 434, 440, 441, 530, 531, 573, 591, 592, 593, 594, 597, 598, 604, 605, 622, 646, 647, 660, 662, 663, 667, 699, 709, 710, 723, 734, 735, 747, 752, 763, 773, 799, 813, 820, 821, 829, 843, 844, 867, 883, 946, 966, 969, 970, 971, 974, 975, 976, 980, 981, 982, 984, 985, 988, 990, 991, 994, 996, 1007, 1008, 1010, 1017, 1018, 1101, 1132, 1133, 1135, 1139, 1182, 1183, 1196, 1198, 1199, 1203, 1242, 1250], "applic": [267, 309, 531, 773], "appropri": [36, 149, 267, 309, 579, 773, 1121, 1242], "approx": [325, 773], "approx_n_uniqu": [309, 773, 883], "approxim": [171, 309, 325, 439, 695, 773, 788, 883, 1016, 1242, 1262, 1271], "april": [419, 422, 995, 998, 1263, 1264], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 170, 172, 178, 180, 184, 187, 190, 192, 193, 194, 199, 200, 201, 213, 215, 216, 217, 219, 225, 226, 232, 234, 241, 242, 243, 244, 247, 248, 250, 252, 255, 262, 266, 267, 268, 271, 272, 276, 278, 279, 283, 284, 287, 288, 309, 321, 323, 337, 353, 358, 367, 368, 373, 379, 381, 382, 391, 417, 430, 435, 437, 438, 439, 440, 441, 446, 448, 468, 470, 472, 473, 475, 476, 477, 478, 480, 485, 515, 522, 530, 564, 569, 576, 579, 582, 583, 584, 585, 589, 592, 594, 596, 598, 600, 601, 603, 605, 607, 613, 616, 619, 621, 622, 635, 638, 640, 641, 644, 645, 646, 647, 650, 661, 663, 665, 670, 674, 676, 681, 682, 691, 692, 694, 699, 702, 703, 704, 705, 708, 712, 714, 715, 717, 718, 737, 739, 742, 751, 755, 757, 760, 761, 763, 765, 766, 768, 772, 773, 774, 775, 778, 779, 780, 781, 782, 785, 789, 794, 795, 799, 802, 806, 808, 811, 812, 813, 816, 817, 820, 821, 825, 826, 830, 832, 834, 836, 837, 839, 840, 843, 848, 851, 852, 855, 856, 857, 860, 883, 887, 889, 893, 894, 907, 923, 928, 936, 939, 946, 954, 955, 963, 993, 1006, 1012, 1014, 1015, 1016, 1017, 1018, 1023, 1025, 1026, 1032, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1054, 1057, 1087, 1094, 1119, 1121, 1125, 1126, 1127, 1137, 1149, 1153, 1156, 1171, 1174, 1176, 1180, 1181, 1182, 1183, 1186, 1197, 1199, 1201, 1206, 1213, 1221, 1223, 1224, 1227, 1234, 1236, 1238, 1242, 1243, 1247, 1248, 1249, 1251, 1253, 1256, 1260, 1268, 1271], "arbitrari": [74, 196, 309, 386, 773, 800, 883, 889], "arbitrarili": [219, 309], "arcco": [773, 1242], "arccosh": [773, 1242], "arcsin": [773, 1242], "arcsinh": [773, 1242], "arctan": [697, 698, 773, 1242], "arctan2": 698, "arctanh": [773, 1242], "aren": [33, 42, 309, 883], "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 192, 233, 309, 334, 573, 699, 724, 773, 808, 829, 883, 887, 1101, 1242, 1254], "arg_max": [773, 1242], "arg_min": [773, 1242], "arg_sort": [773, 1242], "arg_tru": [700, 773, 1242], "arg_uniqu": [773, 1242], "arg_wher": [335, 773], "argmax": [530, 773], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 178, 182, 188, 200, 201, 216, 232, 233, 241, 247, 248, 255, 268, 275, 279, 283, 284, 288, 309, 417, 430, 442, 448, 468, 530, 569, 573, 589, 622, 655, 656, 657, 674, 691, 697, 698, 699, 702, 703, 704, 706, 708, 721, 751, 755, 763, 769, 773, 801, 805, 811, 812, 829, 834, 836, 837, 843, 850, 855, 856, 860, 883, 887, 889, 993, 1006, 1039, 1191, 1192, 1193, 1224, 1242, 1262, 1263], "aris": 131, "arithmet": [194, 309], "arm": 151, "arm64": 151, "around": [33, 42, 309, 883], "arr": [267, 309, 765, 1223, 1234, 1242], "arr_bar": 1259, "arr_foo": 1259, "arrai": [116, 120, 129, 130, 133, 141, 187, 188, 261, 266, 267, 268, 309, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 379, 380, 381, 382, 489, 504, 505, 506, 507, 509, 518, 519, 521, 524, 526, 530, 585, 591, 593, 595, 597, 599, 602, 604, 606, 612, 720, 752, 773, 805, 883, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 952, 953, 954, 955, 960, 1014, 1061, 1076, 1077, 1078, 1079, 1081, 1089, 1090, 1091, 1093, 1096, 1098, 1099, 1127, 1132, 1133, 1135, 1138, 1139, 1140, 1147, 1151, 1217, 1221, 1223, 1224, 1242, 1261, 1267, 1270], "array_agg": 1261, "array_contain": 1261, "array_get": 1261, "array_length": 1261, "array_low": 1261, "array_mean": 1261, "array_revers": 1261, "array_sum": 1261, "array_to_str": 1261, "array_uniqu": 1261, "array_upp": 1261, "arraylik": [960, 1242], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 213, 243, 244, 261, 263, 267, 309, 883, 1217, 1223, 1242], "arrowinvaliderror": [35, 309], "as_dict": [130, 232, 309], "as_expr": 889, "as_seri": [173, 262, 309, 791, 883, 889], "ascend": [201, 241, 309, 589, 773, 812, 834, 883], "ascii": [7, 20, 627, 636, 638, 642, 643, 648, 650, 661, 670, 889, 1163, 1172, 1174, 1178, 1179, 1184, 1186, 1197, 1206], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [627, 636, 648, 1163, 1172, 1184], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1271, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 889, "ascii_uppercas": [277, 309], "asd": [628, 634, 1164, 1170], "asia": [123, 889, 969, 970, 996], "asin": 1261, "asind": 1261, "asof": [216, 309, 817, 883], "asof_join": [216, 309], "asofjoinstrategi": [216, 309, 817, 883], "assert": [152, 153, 154, 155, 159, 163, 241, 309, 785, 889], "assert_frame_equ": [153, 154, 186, 309, 1271], "assert_frame_not_equ": [152, 155], "assert_series_equ": [152, 155, 1013, 1242, 1271], "assert_series_not_equ": [153, 154], "assert_someth": 157, "assertionerror": [152, 153, 154, 155], "assign": [157, 201, 294, 309, 358, 522, 569, 579, 652, 653, 773, 812, 866, 883, 928, 1094, 1121, 1188, 1189, 1242], "associ": [34, 36, 47, 132, 134, 158, 161, 244, 309, 888, 1252, 1254], "assum": [244, 309, 821, 867, 883, 1263], "assumpt": [530, 773], "async": [131, 795, 883], "async_engin": 131, "asynchron": [54, 131, 795, 883], "asyncio": [54, 131, 795, 883], "asyncresult": [54, 795, 883], "ata": 26, "atan": 1261, "atan2": [697, 698, 1261], "atan2_ab": 1265, "atan2d": [698, 1261], "atan2d_ab": 1265, "atand": 1261, "atg": 26, "atgataaaggag": 26, "atol": [152, 153, 154, 155], "attain": [622, 773], "attempt": [1, 386, 773, 800, 883], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 309, 765, 766, 768, 769, 774, 775, 778, 780, 781, 782, 883, 1234, 1236, 1238, 1242, 1243, 1247, 1248, 1249], "attributeerror": 1, "audi": [262, 309, 586, 773], "australia": 716, "authent": [35, 133, 144, 145, 309], "author": 1, "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 273, 309, 883, 1271], "auto_structifi": [247, 283, 309, 836, 855, 883], "autofilt": [36, 309], "autofit": [36, 309], "autogener": [129, 130, 143], "automat": [8, 33, 42, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 141, 143, 147, 159, 163, 165, 247, 256, 283, 309, 530, 584, 655, 656, 657, 752, 773, 836, 844, 855, 883, 887, 1125, 1126, 1191, 1192, 1193, 1226, 1242, 1251, 1253, 1256, 1268], "autumn": [646, 647], "avail": [36, 37, 38, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 234, 256, 261, 308, 309, 579, 752, 765, 766, 768, 772, 773, 774, 775, 778, 779, 780, 781, 782, 785, 844, 881, 882, 883, 887, 889, 958, 1121, 1217, 1234, 1236, 1238, 1242, 1243, 1247, 1248, 1249], "available_timezon": [62, 889], "averag": [36, 309, 438, 439, 440, 441, 579, 773, 1015, 1016, 1017, 1018, 1121, 1242, 1258], "avg": 1261, "avocado": 1263, "avoid": [133, 159, 163, 243, 309, 320, 773], "avro": [31, 127, 309, 785], "avrocompress": [31, 309], "aw": [133, 141, 143, 144, 148], "awai": 1262, "await": [54, 131, 795, 878, 883], "awar": [10, 131, 213, 243, 244, 263, 309, 439, 627, 636, 648, 663, 773, 883, 1016, 1163, 1172, 1184, 1199, 1242], "aws_access_key_id": [35, 133, 144, 148, 309], "aws_region": [35, 144, 148, 309], "aws_secret_access_kei": [35, 133, 144, 148, 309], "axi": [225, 276, 309, 697, 698, 825, 851, 883], "aya": [650, 1186, 1197], "az": [133, 144, 145], "azur": [35, 133, 141, 143, 144, 145, 148, 309], "azure_storage_account_kei": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 170, 171, 172, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 309, 318, 320, 321, 323, 324, 334, 336, 341, 346, 361, 362, 363, 364, 365, 366, 368, 369, 377, 384, 388, 419, 422, 442, 444, 446, 447, 448, 450, 453, 460, 461, 464, 466, 467, 468, 470, 473, 475, 476, 477, 478, 483, 489, 494, 501, 511, 512, 513, 514, 530, 531, 536, 543, 549, 552, 553, 554, 555, 556, 557, 558, 566, 567, 569, 573, 576, 579, 583, 584, 586, 588, 614, 620, 622, 629, 632, 637, 640, 646, 647, 671, 672, 682, 685, 689, 691, 692, 693, 694, 695, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 720, 721, 722, 723, 724, 727, 728, 729, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 749, 750, 752, 754, 755, 756, 757, 758, 762, 769, 773, 788, 789, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 883, 889, 892, 895, 916, 931, 932, 933, 934, 935, 939, 940, 941, 957, 960, 995, 998, 1012, 1013, 1014, 1021, 1024, 1039, 1044, 1061, 1083, 1084, 1085, 1086, 1119, 1124, 1165, 1168, 1173, 1176, 1182, 1183, 1207, 1209, 1210, 1212, 1224, 1229, 1242, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1263, 1264, 1265, 1268], "b1": [48, 50], "b2": [48, 50], "b345": [36, 309], "b4": [36, 309], "b_b": [256, 309], "b_btm_by_a": [368, 773], "b_btm_by_b": [368, 773], "b_by_ca": [368, 682, 773], "b_by_cb": [368, 682, 773], "b_is_not_nan": [476, 773], "b_isnan": [475, 773], "b_isnul": [478, 773], "b_not_nul": [477, 773], "b_revers": [553, 557, 586, 773], "b_suffix": 558, "b_sum": [288, 860], "b_top_by_a": [682, 773], "b_top_by_b": [682, 773], "ba": [386, 442, 543, 654, 721, 773, 889], "back": [4, 47, 189, 201, 249, 267, 268, 309, 543, 569, 668, 773, 812, 838, 883, 1021, 1204, 1224, 1242], "backend": [35, 131, 132, 133, 144, 145, 309], "background": [309, 313, 794, 882, 883], "backward": [41, 45, 191, 216, 309, 361, 391, 411, 447, 773, 807, 817, 883, 963, 987, 1024, 1242], "backward_fil": [453, 613, 773], "bad": [646, 647, 1182, 1183], "balanc": [162, 164, 1271], "ballon_dor": [633, 635, 1169, 1171], "banana": [177, 262, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 368, 586, 631, 654, 682, 773, 863, 865, 868, 869, 870, 871, 872, 873, 874, 1263], "banded_column": [36, 309], "banded_row": [36, 309], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 173, 176, 177, 178, 182, 183, 184, 185, 186, 189, 192, 194, 196, 197, 198, 203, 205, 206, 207, 209, 215, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 236, 238, 239, 242, 245, 246, 247, 249, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 274, 275, 280, 281, 282, 287, 309, 370, 386, 465, 535, 537, 539, 540, 541, 542, 543, 544, 545, 619, 628, 630, 632, 634, 635, 649, 651, 653, 658, 659, 695, 705, 706, 707, 722, 727, 728, 731, 732, 736, 738, 740, 741, 743, 744, 751, 754, 758, 762, 763, 769, 773, 791, 796, 797, 801, 802, 803, 808, 814, 815, 816, 828, 832, 835, 836, 849, 850, 854, 883, 888, 889, 938, 1073, 1156, 1164, 1166, 1168, 1170, 1171, 1185, 1189, 1194, 1195, 1242, 1255, 1257, 1258, 1259, 1260, 1263, 1266], "bar2": 1263, "bar22": [194, 309], "bar_": 651, "bar_3": [264, 309], "bar_4": [264, 309], "bar_a": [234, 309], "bar_at_2": 1259, "bar_avg": 1258, "bar_b": [234, 309], "bar_color": [36, 309], "bar_max": 1258, "bar_median": 1258, "bar_min": 1258, "bar_negative_border_color_sam": [36, 309], "bar_negative_color_sam": [36, 309], "bar_std": 1258, "bar_sum": 1258, "bar_var": 1258, "bare": [537, 889], "base": [36, 60, 102, 104, 161, 184, 192, 201, 241, 309, 392, 400, 435, 438, 439, 440, 441, 448, 463, 467, 525, 526, 530, 531, 574, 576, 584, 589, 592, 594, 596, 598, 600, 603, 605, 607, 665, 773, 802, 808, 812, 834, 883, 889, 964, 972, 1012, 1015, 1016, 1017, 1018, 1035, 1038, 1097, 1098, 1101, 1119, 1125, 1126, 1201, 1233, 1242, 1257, 1262, 1271], "base64": [363, 364, 629, 630, 932, 933, 1165, 1166], "base_nam": [273, 309], "base_utc_offset": [400, 972], "baseexcept": 1268, "basi": [36, 134, 159, 309], "basic": [36, 309, 1271], "batch": [38, 53, 54, 125, 130, 131, 137, 147, 149, 243, 271, 309, 794, 795, 821, 883], "batch_siz": [33, 42, 129, 130, 131, 147, 149, 271, 309, 883], "batchedcsvread": 130, "baz": [196, 206, 207, 275, 309, 635, 651, 653, 722, 731, 744, 769, 815, 850, 883, 889, 1171, 1189, 1255, 1260, 1263], "bb": [889, 958, 1242, 1263, 1268], "bbb": [1, 36, 309, 671, 673, 889], "bc": [637, 647, 756, 1173], "bcbc45": 1263, "bea": 12, "bear": 889, "beauti": 12, "becaus": [139, 147, 187, 201, 217, 219, 277, 295, 309, 452, 494, 773, 812, 867, 883, 1014, 1066, 1101, 1242], "becom": [161, 308, 881, 882], "bed3": [36, 309], "been": [30, 36, 166, 170, 290, 309, 454, 531, 546, 579, 773, 862, 1121, 1242], "beetl": [262, 309, 586, 773], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 189, 201, 216, 256, 266, 271, 275, 309, 381, 382, 383, 530, 569, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 632, 670, 676, 703, 749, 750, 773, 812, 814, 817, 850, 883, 887, 954, 955, 956, 1021, 1115, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1168, 1206, 1213, 1242, 1257], "beforehand": [660, 662, 663, 1196, 1198, 1199], "begin": [12, 36, 309, 438, 440, 441, 633, 661, 773, 1015, 1017, 1018, 1169, 1197, 1242], "behav": [192, 309, 448, 531, 656, 657, 773, 808, 883], "behavior": [41, 45, 184, 215, 216, 309, 345, 454, 497, 499, 632, 722, 731, 773, 802, 816, 817, 883, 915, 1069, 1071, 1168], "behaviour": [10, 47, 55, 184, 256, 309, 626, 633, 634, 637, 646, 647, 683, 752, 773, 802, 844, 883, 1162, 1169, 1170, 1173, 1182, 1183], "behind": 165, "being": [13, 37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 141, 143, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 173, 188, 256, 261, 264, 266, 271, 277, 278, 309, 313, 383, 384, 417, 463, 531, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 632, 701, 720, 749, 750, 773, 791, 794, 795, 804, 805, 844, 852, 883, 941, 956, 957, 993, 1035, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1168, 1217, 1218, 1221, 1226, 1242, 1271], "belong": [1, 201, 309, 812, 883], "below": [19, 35, 133, 134, 144, 145, 184, 234, 309, 447, 638, 661, 714, 715, 717, 718, 760, 761, 763, 769, 773, 802, 883, 1174, 1197], "benchmark": 129, "best": [219, 295, 309, 531, 773, 1101, 1242], "better": [219, 266, 267, 295, 309, 531, 643, 773, 790, 867, 883, 1144, 1146, 1179, 1242], "between": [24, 55, 87, 156, 157, 159, 163, 178, 236, 243, 301, 309, 346, 369, 387, 388, 468, 492, 501, 511, 512, 513, 514, 570, 576, 577, 599, 600, 625, 639, 697, 698, 701, 705, 707, 746, 749, 750, 773, 831, 873, 883, 916, 937, 940, 959, 960, 1039, 1064, 1073, 1083, 1084, 1085, 1086, 1115, 1119, 1120, 1136, 1161, 1175, 1242, 1265], "between_ab": [468, 773], "bia": [440, 441, 480, 601, 619, 773, 1017, 1018, 1054, 1137, 1156, 1242], "bias": [480, 619, 773, 1054, 1156, 1242], "big": 130, "big_fil": 130, "bigidx": 124, "bigqueri": 132, "bin": [384, 463, 576, 665, 690, 766, 773, 957, 1035, 1119, 1201, 1236, 1242], "bin_count": [463, 773, 1035, 1242], "bin_i": [690, 773], "bin_x": [690, 773], "bin_xor_xi": [690, 773], "binari": [37, 131, 181, 249, 309, 362, 363, 364, 365, 366, 386, 543, 629, 773, 800, 838, 883, 889, 931, 932, 934, 935, 1165], "binary_str": [690, 773], "bind": 134, "birthdai": 129, "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 581, 626, 773, 1123, 1162, 1242, 1263], "bit_length": 1261, "bitmap": [187, 309, 1014, 1242], "bitmask": [1032, 1242], "bitwis": [322, 568, 690, 691, 692, 693, 694, 773], "bla": [628, 634, 1164, 1170], "black": [219, 309, 362, 363, 364, 365, 366], "blindli": [494, 1066], "block": [20, 54, 200, 274, 309, 763, 795, 811, 832, 849, 858, 859, 867, 883, 1144, 1146, 1242], "blue": [46, 84, 85, 362, 363, 364, 365, 366, 687, 773, 1231, 1242], "bob": [129, 226, 309, 826, 883, 1269], "bodi": [36, 309, 313], "bold": [36, 309], "bom": [33, 42, 309, 883], "bool": [7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 173, 174, 175, 180, 182, 186, 191, 192, 193, 194, 198, 199, 200, 201, 205, 206, 208, 209, 210, 213, 215, 216, 223, 232, 234, 242, 243, 244, 245, 250, 253, 255, 256, 259, 261, 262, 264, 267, 268, 272, 273, 274, 275, 278, 279, 281, 283, 291, 293, 296, 299, 309, 320, 321, 322, 323, 324, 334, 337, 338, 341, 345, 346, 354, 359, 362, 363, 365, 366, 368, 369, 378, 379, 380, 381, 382, 383, 384, 391, 403, 418, 435, 436, 437, 438, 440, 441, 457, 459, 460, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 490, 494, 497, 499, 501, 510, 517, 523, 529, 530, 531, 535, 536, 537, 538, 539, 540, 544, 563, 564, 566, 568, 571, 572, 576, 579, 581, 590, 591, 593, 595, 597, 599, 601, 602, 604, 606, 610, 612, 614, 619, 621, 622, 625, 626, 627, 628, 629, 631, 636, 637, 639, 646, 647, 648, 651, 652, 654, 660, 662, 663, 665, 667, 671, 673, 682, 684, 687, 690, 691, 692, 693, 694, 696, 699, 700, 701, 704, 705, 708, 709, 714, 715, 717, 718, 729, 730, 733, 735, 745, 748, 752, 755, 760, 761, 763, 764, 773, 789, 791, 792, 794, 795, 799, 801, 804, 807, 808, 811, 812, 816, 817, 821, 825, 830, 839, 841, 843, 844, 848, 849, 850, 851, 852, 855, 863, 865, 868, 871, 883, 887, 889, 893, 894, 904, 907, 908, 911, 915, 916, 924, 929, 931, 932, 934, 935, 937, 939, 941, 945, 951, 952, 953, 954, 955, 956, 957, 963, 975, 994, 1012, 1013, 1015, 1017, 1018, 1025, 1031, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1057, 1058, 1062, 1066, 1069, 1071, 1073, 1082, 1089, 1095, 1101, 1113, 1116, 1117, 1119, 1121, 1122, 1123, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1146, 1147, 1151, 1156, 1158, 1161, 1162, 1163, 1164, 1165, 1167, 1172, 1173, 1175, 1182, 1183, 1184, 1187, 1188, 1190, 1196, 1198, 1199, 1201, 1203, 1217, 1218, 1223, 1224, 1228, 1231, 1242, 1250, 1251, 1253, 1259, 1263, 1268], "boolean": [47, 159, 172, 192, 194, 255, 272, 309, 321, 322, 323, 337, 338, 341, 362, 365, 366, 368, 403, 448, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 485, 486, 490, 566, 568, 571, 572, 622, 640, 682, 689, 690, 699, 700, 755, 763, 773, 789, 808, 843, 848, 883, 889, 893, 894, 905, 907, 908, 911, 931, 975, 1025, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1057, 1058, 1062, 1113, 1116, 1117, 1146, 1162, 1233, 1242, 1260], "border": 20, "both": [10, 25, 33, 42, 46, 84, 85, 131, 176, 201, 215, 216, 226, 241, 242, 268, 278, 309, 324, 373, 384, 442, 468, 576, 589, 592, 594, 596, 598, 600, 603, 605, 607, 650, 714, 715, 717, 718, 760, 761, 769, 773, 784, 812, 816, 817, 826, 834, 852, 883, 889, 946, 1039, 1186, 1224, 1242, 1268, 1269], "bottom": [172, 309, 368, 773, 789, 883], "bottom_k": [272, 309, 368, 681, 682, 773, 848, 883, 1227, 1242], "bottom_k_bi": [367, 681, 682, 773], "bound": [98, 129, 130, 187, 201, 309, 345, 373, 468, 497, 499, 522, 528, 686, 696, 714, 715, 717, 718, 760, 761, 773, 812, 883, 915, 946, 1014, 1039, 1069, 1071, 1100, 1230, 1242, 1259], "boundari": [201, 309, 373, 463, 773, 812, 883, 946, 1035, 1242], "box": [20, 219, 309], "box_draw": 20, "branch": [53, 54, 794, 795, 804, 830, 841, 883], "break": [37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 261, 266, 271, 277, 278, 309, 313, 383, 384, 417, 463, 531, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 749, 750, 773, 794, 795, 804, 844, 852, 883, 941, 956, 957, 993, 1035, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1217, 1221, 1226, 1242], "breakpoint": [384, 463, 576, 773, 957, 1035, 1119, 1242], "breezah": 143, "breviti": 168, "broadcast": [648, 889, 1184], "broader": 889, "brotli": [41, 45, 309, 883], "brussel": [416, 992], "bst": [396, 400, 416, 968, 972, 992], "bucket": [35, 133, 144, 145, 148, 309, 417, 430, 463, 773, 993, 1006, 1035, 1242], "bud": [646, 647, 1182, 1183], "budget": 1250, "buffer": [129, 130, 131, 187, 213, 309, 1014, 1242], "buffer_s": [213, 309], "bug": [530, 531, 773, 821, 867, 883, 1101, 1242], "build": [52, 117, 889, 1271], "built": 87, "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 309, 386, 773, 800, 883], "busi": [391, 701, 963], "business_day_count": [391, 963], "by_alternate_row": 1, "by_dtyp": 889, "by_first_letter_of_column_nam": 48, "by_first_letter_of_column_valu": 48, "by_index": 889, "by_left": [216, 309, 817, 883], "by_nam": 889, "by_pred": [242, 309], "by_right": [216, 309, 817, 883], "bye": 1, "byi": 1263, "bys": [201, 309, 812, 883], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 187, 249, 309, 386, 543, 638, 642, 643, 650, 661, 773, 800, 838, 883, 1014, 1174, 1178, 1179, 1186, 1197, 1242, 1263], "bytesio": [36, 37, 38, 41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 249, 309, 386, 543, 773, 800, 838, 883], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 170, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 185, 186, 188, 192, 194, 197, 198, 199, 200, 201, 203, 205, 206, 214, 215, 217, 218, 220, 222, 224, 227, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 242, 245, 246, 247, 254, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 280, 281, 283, 288, 291, 292, 293, 296, 297, 299, 302, 303, 309, 313, 318, 320, 321, 323, 341, 361, 368, 384, 448, 460, 468, 489, 501, 531, 537, 552, 553, 567, 569, 573, 576, 614, 652, 660, 682, 685, 692, 694, 695, 697, 698, 699, 702, 704, 705, 706, 707, 709, 710, 712, 722, 723, 724, 727, 728, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 752, 754, 756, 757, 758, 762, 769, 773, 789, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 808, 811, 812, 816, 819, 828, 830, 832, 833, 835, 836, 841, 842, 843, 844, 848, 851, 852, 855, 857, 860, 863, 864, 865, 868, 869, 871, 874, 875, 883, 887, 889, 940, 957, 1039, 1061, 1119, 1188, 1196, 1210, 1229, 1242, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1263, 1268], "c00": 889, "c01": 889, "c02": 889, "c03": 889, "c05": 889, "c1": 358, "c123": 1263, "c2": 358, "c20": 889, "c25": 889, "c3": 358, "c40": 889, "c45": 1263, "c4d79b": [36, 309], "c50": 889, "c567": [36, 309], "c60": 889, "c75": 889, "c80": 889, "c8ae6d2b276": [36, 309], "c93": 889, "c95": 889, "c96": 889, "c97": 889, "c98": 889, "c99": 889, "c_btm_by_a": [368, 773], "c_btm_by_b": [368, 773], "c_by_ca": [368, 682, 773], "c_by_cb": [368, 682, 773], "c_c_c": [752, 844, 883], "c_contigu": [267, 309], "c_max": [569, 773], "c_mean_squar": [288, 860], "c_min": [569, 773], "c_top_by_a": [682, 773], "c_top_by_b": [682, 773], "c_total": 1268, "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 583, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 660, 662, 663, 667, 773, 784, 794, 795, 804, 830, 841, 883, 939, 1125, 1126, 1196, 1198, 1199, 1203, 1242], "cadi": [234, 309], "cafe": [665, 1201], "caf\u00e9": [642, 643, 889, 1178, 1179], "calamin": 134, "calcul": [36, 41, 45, 47, 180, 201, 257, 280, 309, 387, 438, 439, 440, 441, 480, 492, 511, 518, 524, 528, 601, 619, 624, 686, 688, 705, 707, 749, 750, 754, 762, 773, 799, 812, 845, 853, 883, 958, 959, 1015, 1016, 1017, 1018, 1054, 1064, 1083, 1137, 1156, 1160, 1232, 1242], "calendar": [61, 62, 201, 216, 241, 279, 309, 394, 404, 406, 413, 417, 430, 434, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 966, 976, 981, 989, 993, 1006, 1010, 1016, 1242], "calendar_year": [404, 434], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 172, 200, 201, 217, 219, 241, 256, 267, 272, 308, 309, 367, 368, 379, 382, 391, 531, 552, 553, 555, 557, 559, 560, 583, 584, 615, 681, 682, 701, 706, 769, 773, 789, 794, 795, 804, 811, 812, 830, 834, 841, 844, 848, 881, 882, 883, 887, 889, 936, 963, 1101, 1126, 1152, 1223, 1227, 1242, 1251, 1255, 1268], "callabl": [48, 49, 50, 51, 143, 194, 219, 233, 238, 295, 309, 358, 522, 530, 531, 553, 554, 573, 590, 709, 710, 723, 734, 735, 747, 773, 821, 829, 832, 867, 883, 928, 1094, 1101, 1131, 1242], "caller": [132, 226, 309, 522, 821, 826, 867, 883], "cam": [238, 309, 832, 883], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 172, 174, 184, 185, 194, 196, 200, 201, 208, 210, 212, 219, 230, 234, 241, 243, 244, 247, 249, 250, 255, 266, 267, 271, 272, 273, 277, 283, 286, 295, 309, 312, 321, 358, 368, 379, 382, 383, 386, 391, 410, 411, 413, 416, 419, 422, 430, 439, 445, 448, 468, 494, 522, 530, 531, 537, 540, 543, 549, 552, 553, 555, 557, 559, 560, 569, 574, 576, 581, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 612, 614, 616, 619, 622, 627, 635, 641, 646, 647, 648, 655, 656, 657, 660, 671, 682, 699, 701, 713, 716, 723, 725, 729, 730, 735, 752, 763, 769, 772, 773, 784, 789, 790, 794, 795, 800, 802, 804, 812, 834, 836, 838, 839, 841, 843, 844, 848, 855, 858, 859, 883, 889, 928, 956, 963, 986, 987, 989, 992, 993, 995, 998, 1006, 1016, 1022, 1039, 1066, 1094, 1101, 1106, 1119, 1123, 1126, 1144, 1146, 1147, 1150, 1153, 1156, 1163, 1164, 1171, 1177, 1182, 1183, 1184, 1191, 1192, 1193, 1196, 1221, 1223, 1242, 1246, 1256, 1268], "cancel": [794, 883], "candid": [633, 635, 1169, 1171], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 165, 219, 244, 245, 267, 286, 295, 309, 363, 442, 510, 531, 610, 629, 652, 673, 735, 773, 841, 859, 867, 883, 889, 932, 1082, 1101, 1143, 1165, 1188, 1223, 1242], "capabl": [1, 36, 309], "capac": [187, 253, 309, 1014, 1151, 1242], "capit": 1263, "captur": [633, 635, 646, 647, 1169, 1171, 1182, 1183], "car": [238, 262, 309, 586, 773, 832, 883], "cardin": [171, 309, 325, 695, 773, 788, 883], "care": [36, 250, 309, 531, 612, 773, 839, 883, 1147, 1242], "cars_revers": [586, 773], "cartesian": [215, 309, 816, 883], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 189, 201, 213, 219, 234, 241, 243, 244, 263, 266, 267, 309, 392, 439, 530, 540, 541, 553, 589, 626, 627, 634, 636, 637, 646, 647, 648, 773, 795, 812, 834, 883, 887, 889, 964, 1016, 1021, 1162, 1163, 1170, 1172, 1173, 1182, 1183, 1184, 1221, 1242], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 194, 201, 233, 241, 266, 267, 271, 283, 309, 324, 381, 382, 393, 419, 422, 433, 568, 573, 574, 581, 583, 589, 640, 641, 670, 676, 680, 703, 704, 753, 773, 812, 829, 834, 855, 883, 887, 889, 941, 954, 955, 965, 995, 998, 1009, 1123, 1176, 1177, 1206, 1213, 1219, 1223, 1225, 1226, 1242, 1261], "cast_str_to_int": [233, 309, 829, 883], "cast_to_supertyp": [773, 887], "cat": [26, 46, 84, 85, 384, 576, 626, 628, 666, 669, 680, 704, 768, 773, 889, 957, 1035, 1119, 1162, 1164, 1202, 1205, 1238, 1242], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 215, 264, 309, 370, 384, 576, 583, 584, 680, 773, 889, 938, 939, 940, 941, 957, 1119, 1125, 1126, 1225, 1242], "categori": [46, 65, 85, 264, 309, 370, 384, 463, 576, 773, 938, 957, 1035, 1119, 1218, 1242], "categorical_as_str": [152, 153, 154, 155], "categoricalord": 59, "categoricaltyp": [261, 309], "caus": [99, 108, 117, 129, 130, 143, 152, 170, 189, 267, 309, 530, 773, 1021, 1223, 1242], "cba": 657, "cbrt": [773, 1242, 1261], "cbrt_a": 1262, "cc": [442, 721, 773, 889, 958, 1242, 1263], "ccc": [1, 36, 309, 671, 673, 889, 1263], "ccy": 1271, "cd": [671, 673, 889], "cde": [889, 1263], "cdt": [417, 430, 993, 1006], "ceil": [49, 773, 1242, 1261], "ceil_a": 1262, "cell": [15, 16, 36, 234, 309], "cent": 394, "center": [15, 16, 36, 309, 438, 440, 441, 590, 591, 593, 595, 597, 599, 602, 604, 606, 773, 1015, 1017, 1018, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1242], "central": [144, 145, 480, 619, 773, 1054, 1156, 1242], "centuri": 1264, "certain": [42, 43, 44, 45, 54, 133, 144, 206, 279, 309, 656, 657, 769, 794, 795, 830, 883, 1242], "certainli": [660, 662, 663, 1196, 1198, 1199], "cest": [416, 992], "cet": [416, 992], "cfg": [2, 4, 17, 168], "cfoo": [857, 883], "chain": [552, 553, 555, 557, 559, 560, 763], "chanc": [156, 159, 163, 1271], "chang": [30, 37, 38, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 134, 141, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 261, 266, 271, 277, 278, 285, 309, 313, 383, 384, 387, 417, 463, 531, 569, 570, 576, 583, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 749, 750, 773, 794, 795, 804, 844, 852, 858, 883, 887, 889, 940, 941, 956, 957, 993, 1035, 1115, 1119, 1125, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1151, 1217, 1221, 1226, 1242], "changes_length": [773, 887], "char": [27, 634, 1170], "char_length": 1263, "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 309, 413, 632, 634, 638, 642, 643, 644, 645, 646, 647, 650, 651, 652, 655, 656, 657, 658, 659, 661, 670, 830, 883, 889, 989, 1168, 1170, 1174, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1187, 1188, 1191, 1192, 1193, 1197, 1206, 1263], "character_length": 1263, "characterist": [159, 163], "charli": [129, 1269], "chart": [36, 309, 830, 883], "cheap": [174, 175, 248, 284, 309, 792, 793, 837, 856, 883, 945, 947, 1242], "cheaper": [497, 1069], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 186, 211, 215, 309, 341, 362, 365, 366, 460, 468, 472, 490, 626, 631, 637, 654, 773, 816, 821, 883, 911, 931, 934, 935, 1013, 1031, 1041, 1044, 1051, 1053, 1062, 1162, 1167, 1173, 1190, 1242], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1013, 1242], "check_exact": [152, 153, 154, 155], "check_nam": [154, 155, 1013, 1242], "check_ord": [154, 155], "check_row_ord": [152, 153], "choos": [41, 43, 45, 201, 234, 309, 812, 883], "chrono": [33, 42, 87, 309, 419, 422, 660, 662, 663, 667, 883, 995, 998, 1196, 1198, 1199, 1203, 1263, 1264], "chunk": [14, 45, 125, 129, 130, 133, 141, 143, 146, 147, 148, 159, 163, 189, 214, 229, 267, 309, 324, 580, 773, 883, 895, 944, 1021, 1030, 1107, 1122, 1217, 1223, 1242], "chunk_length": 1242, "chunkedarrai": [116, 229, 309], "citi": [646, 647], "clang": 151, "clariti": [242, 309], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 244, 309, 760, 769, 773, 779, 785, 797, 803, 835, 854, 883, 888, 1222, 1242, 1253, 1268], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 181, 309, 386, 454, 773, 800, 883, 1251, 1268], "claus": [785, 1259, 1267], "clean": [660, 662, 663, 1196, 1198, 1199], "cleaner": 168, "cleanli": [10, 199, 309, 1268], "clear": [46, 84, 175, 309, 793, 883, 947, 1242], "clearer": 119, "clickhous": 132, "client": 131, "clip": [773, 1242], "clipboard": [32, 128, 309, 785], "clone": [118, 119, 120, 121, 122, 174, 267, 309, 792, 883, 945, 1242], "close": [36, 131, 201, 241, 256, 309, 384, 468, 527, 576, 589, 592, 594, 596, 598, 600, 603, 605, 607, 619, 714, 715, 717, 718, 760, 761, 773, 812, 834, 844, 883, 957, 1039, 1119, 1156, 1242], "closedinterv": [201, 241, 309, 468, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 834, 883, 1039, 1242], "closest": [116, 216, 309, 1262], "closur": [592, 594, 603, 605, 607, 773], "cloud": [35, 131, 133, 141, 143, 144, 145, 146, 148, 149, 309], "cloudi": [646, 647], "cloudpickl": 151, "cluster_with_column": [53, 54, 794, 795, 804, 830, 841, 883], "co": [634, 773, 1170, 1242, 1261], "coalesc": [215, 216, 278, 309, 466, 636, 660, 773, 816, 817, 852, 883, 1196, 1257, 1261], "code": [176, 309, 362, 363, 364, 365, 366, 386, 531, 612, 773, 800, 819, 883, 1147, 1242, 1251], "coeffici": [178, 309, 619, 773, 1156, 1242], "coerc": [55, 582, 773], "coercion": [42, 43, 44, 45, 53, 54, 582, 773, 794, 795, 804, 830, 841, 883], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 192, 200, 201, 209, 211, 215, 216, 219, 230, 233, 234, 241, 242, 247, 255, 266, 271, 275, 277, 283, 288, 309, 313, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 463, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 554, 556, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 699, 700, 702, 703, 704, 706, 708, 711, 713, 716, 719, 723, 724, 725, 726, 727, 728, 736, 738, 740, 741, 743, 746, 747, 752, 754, 756, 758, 759, 762, 763, 773, 808, 811, 812, 814, 816, 817, 829, 834, 836, 843, 844, 850, 855, 857, 860, 883, 889, 989, 992, 1066, 1144, 1146, 1177, 1196, 1242, 1271], "col0": [159, 1271], "col1": [159, 234, 309, 883, 1271], "col2": [159, 234, 309, 883, 1271], "col3": [234, 309, 1271], "col4": 1271, "col_nam": [233, 309, 531, 763, 773, 829, 883], "cole": 126, "coli": [36, 309, 559, 560, 889, 1271], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 184, 217, 234, 256, 261, 274, 275, 309, 442, 472, 531, 703, 721, 725, 752, 755, 773, 788, 789, 791, 792, 795, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 882, 883, 889, 1044, 1242, 1251, 1252, 1253, 1256, 1257, 1268, 1269, 1271], "collect_al": [50, 54, 794, 795, 883], "collect_all_async": [795, 883], "collect_async": [54, 883], "collect_schema": [50, 217, 309, 797, 803, 829, 835, 854, 883], "collis": 55, "colnam": [36, 143, 309], "color": [46, 84, 85, 295, 362, 363, 364, 365, 366, 629, 687, 773, 867, 931, 932, 933, 934, 935, 1165, 1231, 1242, 1263], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 172, 173, 176, 178, 179, 182, 183, 184, 185, 188, 192, 193, 196, 197, 199, 200, 201, 205, 206, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 255, 257, 258, 259, 262, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 294, 309, 313, 320, 321, 323, 334, 343, 352, 354, 357, 368, 373, 377, 378, 384, 394, 395, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 412, 414, 415, 418, 419, 420, 422, 431, 432, 434, 442, 444, 448, 450, 463, 467, 468, 483, 489, 495, 497, 517, 521, 522, 531, 537, 538, 540, 542, 552, 555, 557, 559, 560, 569, 576, 580, 582, 583, 584, 585, 587, 588, 589, 592, 594, 596, 598, 600, 603, 605, 607, 614, 621, 622, 625, 632, 637, 638, 639, 652, 653, 660, 661, 662, 663, 664, 665, 667, 672, 674, 682, 687, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 773, 789, 791, 798, 801, 802, 803, 805, 808, 811, 812, 816, 817, 821, 822, 823, 824, 825, 827, 828, 831, 832, 834, 835, 836, 837, 839, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 866, 867, 883, 888, 889, 893, 894, 913, 922, 924, 927, 939, 940, 946, 951, 957, 966, 969, 970, 971, 974, 975, 976, 980, 981, 982, 984, 985, 988, 990, 991, 994, 995, 996, 998, 1007, 1008, 1010, 1020, 1032, 1035, 1038, 1061, 1067, 1069, 1089, 1093, 1119, 1126, 1127, 1130, 1150, 1161, 1168, 1173, 1175, 1188, 1189, 1196, 1198, 1199, 1200, 1201, 1203, 1209, 1212, 1218, 1219, 1231, 1242, 1257, 1259, 1260, 1262, 1263, 1265, 1266, 1269, 1270, 1271], "column_0": [1, 219, 273, 309], "column_1": [219, 273, 309, 1265], "column_2": [273, 309, 1265], "column_abc": 15, "column_format": [36, 309], "column_nam": [238, 273, 309, 832, 883], "column_tot": [36, 309], "column_width": [36, 309], "column_x": [129, 130, 143], "column_xyz": 15, "columnar": [120, 122, 213, 243, 309], "columnformatdict": [36, 309], "columnnameorselector": [173, 182, 184, 225, 232, 234, 244, 264, 274, 275, 276, 277, 309, 791, 801, 802, 825, 849, 850, 851, 883], "columnnotfounderror": [196, 309], "columntotalsdefinit": [36, 309], "columnwidthsdefinit": [36, 309], "colx": [36, 309, 559, 560, 889, 1256, 1271], "colz": [889, 1271], "com": [36, 132, 309, 438, 440, 441, 633, 634, 635, 773, 1015, 1017, 1018, 1169, 1170, 1171, 1242], "combin": [41, 45, 53, 54, 55, 192, 201, 202, 216, 241, 279, 309, 322, 335, 430, 439, 452, 568, 584, 589, 655, 656, 657, 714, 715, 717, 718, 760, 761, 763, 773, 794, 795, 804, 812, 817, 830, 834, 841, 883, 993, 1006, 1016, 1126, 1191, 1192, 1193, 1242, 1257, 1269], "come": [111, 132, 201, 274, 276, 309, 391, 410, 411, 480, 522, 701, 773, 812, 849, 851, 883, 963, 986, 987, 1054, 1242], "comm_subexpr_elim": [53, 54, 794, 795, 804, 830, 841, 883], "comm_subplan_elim": [53, 54, 794, 795, 804, 830, 841, 883], "comma": [32, 33, 129, 130, 143, 309], "comment": [129, 130, 143], "comment_prefix": [129, 130, 143], "common": [47, 53, 54, 55, 91, 129, 130, 143, 278, 309, 553, 779, 794, 795, 804, 830, 841, 852, 883], "compact": 1266, "compani": 132, "compar": [152, 153, 154, 155, 186, 309, 436, 437, 457, 459, 468, 482, 529, 563, 564, 773, 940, 1013, 1242], "comparison": 149, "compat": [20, 36, 41, 45, 86, 309, 626, 628, 633, 634, 635, 637, 646, 647, 883, 889, 1162, 1164, 1169, 1170, 1171, 1173, 1182, 1183, 1251, 1263, 1264, 1268], "compatibleframetyp": [1252, 1254, 1268], "competit": [579, 773, 1121, 1242], "compil": [52, 339, 340, 487, 488, 909, 910, 1059, 1060], "complement": 889, "complet": [129, 131, 143, 1269], "complex": [160, 367, 368, 383, 681, 682, 773, 936, 956, 1227, 1242], "compliant": [36, 309], "compon": [395, 418, 660, 663, 719, 967, 994, 1196, 1199], "compos": 1269, "composit": [76, 1271], "compound": [123, 244, 309, 889], "comprehens": 157, "compress": [31, 37, 38, 41, 43, 45, 309, 587, 773, 883, 1129, 1242], "compression_level": [41, 45, 309, 883], "comput": [53, 55, 89, 187, 200, 216, 268, 274, 288, 301, 309, 317, 326, 327, 328, 329, 330, 331, 348, 349, 350, 355, 356, 360, 371, 374, 375, 376, 379, 380, 381, 382, 388, 435, 443, 480, 504, 505, 506, 507, 511, 512, 513, 514, 518, 524, 525, 526, 527, 549, 569, 570, 575, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 616, 617, 618, 619, 623, 678, 679, 687, 692, 694, 697, 698, 699, 705, 707, 720, 739, 749, 750, 763, 773, 794, 811, 814, 816, 817, 849, 857, 860, 873, 883, 891, 896, 897, 898, 899, 900, 901, 918, 919, 920, 925, 926, 930, 942, 948, 949, 950, 952, 953, 954, 955, 960, 1012, 1014, 1019, 1054, 1076, 1077, 1078, 1079, 1083, 1084, 1085, 1086, 1090, 1096, 1097, 1098, 1099, 1106, 1115, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1153, 1154, 1155, 1156, 1159, 1215, 1216, 1224, 1231, 1242, 1262, 1265], "computeerror": [540, 665, 1201], "concat": [46, 84, 85, 92, 130, 216, 309, 857, 883, 944, 1030, 1107, 1122, 1242, 1261], "concat_list": [494, 720], "concat_w": [256, 309, 752, 844, 883, 1261, 1268], "concaten": [46, 55, 84, 85, 194, 233, 309, 573, 625, 639, 703, 704, 773, 829, 883, 944, 1107, 1161, 1175, 1242, 1263], "concatmethod": 55, "conclus": [120, 122, 309, 883], "concret": [159, 163], "condit": [36, 184, 192, 242, 309, 448, 468, 631, 654, 700, 723, 763, 773, 802, 808, 883, 1039, 1242, 1257, 1261, 1267], "conditional_format": [36, 309], "conditionalformatdict": [36, 309], "config": [0, 47, 180, 247, 266, 283, 309, 627, 636, 648, 715, 718, 719, 785, 794, 799, 836, 855, 883, 1163, 1184], "configur": [35, 133, 144, 145, 168, 309], "confirm": [1032, 1242], "conflat": [468, 773], "conform": 1271, "confus": [91, 321, 475, 476, 648, 773], "conjunct": [36, 84, 131, 134, 140, 157, 309, 729, 732, 883], "conn": 131, "connect": [34, 129, 131, 132, 135, 137, 141, 143, 146, 148, 149, 309, 786], "connectionorcursor": [34, 131, 309], "connector": 132, "connectorx": [131, 132, 151], "consecut": [191, 309, 361, 447, 453, 625, 639, 773, 807, 883, 1024, 1161, 1175, 1242], "consid": [37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 172, 184, 186, 212, 219, 225, 243, 256, 261, 266, 271, 272, 274, 276, 277, 278, 309, 313, 368, 373, 383, 384, 417, 452, 463, 530, 531, 537, 551, 552, 555, 557, 559, 560, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 682, 709, 723, 749, 750, 769, 773, 789, 794, 795, 802, 804, 813, 820, 825, 844, 848, 849, 851, 852, 867, 883, 889, 939, 941, 946, 956, 957, 993, 1013, 1035, 1101, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1146, 1217, 1221, 1226, 1242, 1251], "consider": 126, "consist": [200, 232, 267, 309, 660, 714, 715, 811, 883, 889, 895, 1021, 1196, 1223, 1242], "consola": [36, 309], "const": 10, "constant": [187, 241, 309, 392, 439, 445, 773, 834, 883, 964, 1014, 1016, 1022, 1242], "constrain": [47, 143, 184, 309, 802, 883, 889], "constraint": [192, 309, 448, 552, 553, 555, 557, 559, 560, 763, 773, 808, 883, 889], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 309, 454, 745, 748, 764, 769, 773, 800, 883, 939, 1242, 1256], "construct_categor": 46, "constructor": [126, 134, 163], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 144, 145, 158, 159, 161, 163, 172, 177, 184, 185, 201, 209, 214, 230, 266, 267, 271, 272, 278, 290, 309, 321, 323, 346, 365, 366, 386, 460, 472, 501, 531, 625, 631, 633, 635, 637, 639, 641, 653, 654, 670, 691, 692, 693, 694, 704, 708, 735, 773, 789, 797, 800, 802, 803, 812, 830, 848, 852, 862, 883, 887, 889, 893, 894, 916, 1031, 1073, 1107, 1161, 1167, 1169, 1171, 1173, 1175, 1177, 1189, 1190, 1206, 1217, 1223, 1242, 1259], "contains_with_expr": 362, "contains_with_lit": 362, "content": [13, 615, 773, 1152, 1242], "context": [46, 84, 85, 165, 230, 256, 309, 319, 448, 494, 530, 531, 540, 621, 622, 687, 706, 708, 722, 725, 731, 732, 735, 744, 748, 751, 772, 773, 784, 785, 844, 857, 883, 1066, 1231, 1242, 1256, 1268, 1270], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 141, 143, 146, 147, 148, 237, 267, 309], "continu": [129, 384, 576, 619, 773, 957, 1119, 1156, 1242], "contrast": 719, "control": [10, 11, 36, 54, 55, 134, 157, 159, 255, 256, 266, 309, 584, 622, 752, 773, 795, 804, 843, 844, 883, 1126, 1221, 1242, 1253, 1256, 1268], "conveni": [189, 271, 309, 876, 895, 1021, 1242, 1251], "convers": [117, 134, 170, 213, 214, 243, 244, 263, 267, 268, 309, 396, 660, 662, 663, 667, 785, 968, 1032, 1196, 1198, 1199, 1203, 1223, 1224, 1242, 1266, 1268], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 170, 262, 263, 264, 265, 266, 267, 268, 270, 271, 309, 357, 358, 385, 396, 419, 422, 521, 522, 530, 553, 578, 635, 660, 662, 663, 664, 665, 667, 672, 773, 883, 887, 927, 928, 940, 968, 995, 998, 1093, 1094, 1171, 1196, 1198, 1199, 1200, 1201, 1203, 1209, 1212, 1220, 1221, 1222, 1223, 1224, 1226, 1242, 1263, 1265, 1266, 1268], "convert_time_zon": [416, 992], "coo": [238, 309, 832, 883], "coord": 674, "coordin": [36, 309], "copi": [32, 116, 117, 128, 170, 174, 175, 214, 261, 267, 268, 283, 309, 445, 773, 792, 793, 855, 883, 945, 947, 1022, 1217, 1222, 1223, 1224, 1242, 1268], "corasick": [627, 636, 648, 1163, 1172, 1184], "core": [1, 309, 1268, 1271], "corner": [20, 36, 123, 309], "corr": 309, "corrcoef": [178, 309], "correct": [134, 140, 440, 441, 480, 601, 619, 773, 821, 883, 887, 1017, 1018, 1054, 1137, 1156, 1242], "correctli": [36, 309, 530, 773], "correl": [178, 309, 705, 749], "correlationmethod": 705, "correspond": [201, 216, 241, 267, 279, 309, 368, 404, 413, 417, 430, 531, 579, 589, 592, 594, 596, 598, 600, 603, 605, 607, 682, 714, 715, 717, 718, 760, 761, 773, 794, 812, 817, 834, 883, 976, 989, 993, 1006, 1121, 1242], "cosd": 1261, "cosh": [773, 1242], "cosin": [326, 327, 374, 375, 530, 773, 896, 897, 948, 949, 1242, 1265], "cost": [244, 309], "cot": [773, 1242, 1261], "cotang": [376, 773, 950, 1242, 1265], "cotd": 1261, "could": [35, 82, 89, 173, 309, 709, 719, 723, 791, 799, 802, 883, 1032, 1242], "count": [36, 149, 171, 180, 201, 230, 231, 241, 273, 279, 285, 300, 309, 325, 342, 351, 378, 391, 439, 463, 483, 491, 503, 508, 531, 551, 567, 589, 628, 685, 687, 695, 701, 708, 732, 743, 773, 788, 799, 812, 828, 834, 858, 872, 883, 889, 912, 921, 951, 958, 963, 1016, 1035, 1055, 1063, 1075, 1080, 1108, 1114, 1164, 1229, 1231, 1242, 1250, 1261], "count_digit": 628, "count_num": [36, 309], "counterpart": 126, "countri": [216, 309, 392, 964], "country_holidai": [391, 701, 963], "covari": [707, 750, 773, 887], "cover": 10, "cow": [644, 645, 1180, 1181], "cpu": [129, 130, 266, 309, 1221, 1242], "crab": [626, 637, 1162, 1173], "crate": [33, 42, 87, 309, 626, 628, 633, 634, 635, 637, 646, 647, 660, 662, 663, 667, 883, 889, 1162, 1164, 1169, 1170, 1171, 1173, 1182, 1183, 1196, 1198, 1199, 1203], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 201, 231, 234, 241, 266, 267, 279, 283, 286, 309, 313, 395, 417, 430, 439, 522, 580, 589, 592, 594, 596, 598, 600, 603, 605, 607, 703, 713, 714, 715, 716, 717, 718, 719, 759, 760, 761, 769, 773, 792, 793, 799, 804, 812, 834, 855, 859, 883, 945, 947, 957, 967, 993, 1006, 1016, 1112, 1119, 1122, 1221, 1223, 1242, 1267, 1268, 1271], "create_async_engin": 131, "create_engin": [34, 309], "creation": 130, "cross": [215, 309, 816, 883, 1257], "crustaceon": [637, 1173], "cst": [417, 430, 993, 1006], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 309, 785, 883], "csvencod": [129, 130, 143], "csvquotestyl": [33, 42, 309, 883], "ctx": [1250, 1252, 1253, 1254, 1255, 1256, 1268], "cube": [1, 51, 371, 574, 773, 942, 1242, 1262], "cum_count": [773, 1242], "cum_count_revers": [378, 773], "cum_max": [773, 1242], "cum_max_all_fil": [379, 773], "cum_max_revers": [379, 773], "cum_min": [773, 1242], "cum_min_revers": [380, 773], "cum_prod": [318, 773, 1242], "cum_prod_revers": [381, 773], "cum_reduc": 709, "cum_sum": [465, 675, 712, 773, 814, 883, 1053, 1242], "cum_sum_revers": [382, 773], "cumsum_horizont": 711, "cumul": [378, 379, 380, 381, 382, 708, 709, 710, 711, 712, 773, 951, 952, 953, 954, 955, 1242], "cumulative_ev": [773, 1242], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 141, 143, 148, 156, 157, 159, 160, 161, 162, 163, 164, 174, 175, 215, 216, 256, 266, 271, 309, 313, 400, 522, 570, 773, 792, 793, 816, 817, 844, 883, 889, 945, 947, 964, 972, 1115, 1221, 1226, 1242, 1253, 1268], "cursor": [34, 131, 309], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 180, 219, 234, 295, 309, 358, 391, 419, 422, 522, 530, 531, 590, 687, 701, 734, 735, 773, 799, 821, 867, 883, 928, 963, 995, 998, 1094, 1101, 1131, 1231, 1242, 1271], "customis": [36, 309], "cut": [576, 773, 1119, 1242], "cxx": 1263, "cypher": 131, "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 199, 201, 202, 203, 206, 215, 218, 260, 261, 271, 277, 281, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 318, 320, 378, 401, 419, 422, 468, 573, 614, 628, 634, 646, 647, 652, 660, 662, 663, 702, 719, 725, 752, 773, 812, 816, 844, 863, 865, 868, 869, 870, 871, 872, 873, 874, 883, 889, 940, 951, 973, 995, 998, 1039, 1061, 1164, 1170, 1182, 1183, 1188, 1196, 1198, 1199, 1210, 1242, 1257, 1259, 1260, 1263, 1264], "d1": 395, "d2": 395, "d3": 395, "d789": [36, 309], "d_4": [652, 1188], "dai": [61, 62, 77, 201, 214, 216, 241, 279, 309, 391, 410, 411, 413, 414, 417, 419, 422, 423, 430, 432, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 701, 713, 714, 715, 716, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 889, 963, 986, 987, 989, 990, 993, 995, 998, 999, 1006, 1008, 1016, 1242, 1264], "dark": 1250, "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 170, 175, 176, 185, 188, 189, 199, 200, 201, 213, 214, 215, 217, 219, 232, 233, 237, 242, 243, 244, 246, 250, 253, 261, 266, 267, 268, 271, 273, 283, 287, 307, 309, 313, 321, 322, 323, 326, 327, 328, 329, 330, 331, 334, 337, 338, 339, 340, 341, 343, 346, 348, 349, 350, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 369, 370, 373, 374, 375, 376, 377, 384, 385, 386, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 444, 455, 457, 458, 459, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 487, 488, 490, 495, 501, 503, 510, 521, 523, 529, 531, 563, 564, 568, 569, 576, 578, 579, 582, 583, 584, 585, 587, 588, 608, 610, 612, 617, 618, 619, 625, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 650, 651, 652, 653, 660, 661, 662, 663, 665, 667, 670, 678, 679, 680, 683, 684, 687, 690, 696, 703, 706, 713, 714, 715, 716, 717, 718, 719, 729, 730, 732, 733, 734, 735, 745, 748, 759, 760, 761, 764, 769, 773, 785, 792, 793, 794, 795, 800, 803, 805, 811, 812, 835, 839, 855, 883, 888, 893, 894, 905, 907, 908, 909, 910, 911, 913, 915, 916, 927, 929, 931, 932, 933, 937, 938, 945, 946, 947, 957, 958, 963, 964, 965, 966, 969, 970, 971, 972, 974, 975, 976, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1020, 1021, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1057, 1058, 1059, 1060, 1062, 1067, 1073, 1075, 1082, 1093, 1095, 1101, 1113, 1119, 1121, 1125, 1126, 1127, 1129, 1130, 1141, 1143, 1151, 1156, 1161, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1186, 1187, 1188, 1189, 1196, 1197, 1198, 1199, 1201, 1203, 1206, 1217, 1222, 1223, 1224, 1225, 1228, 1241, 1242, 1250, 1257, 1263, 1268, 1270], "data_bar": [36, 309], "data_bar_2010": [36, 309], "data_page_s": [41, 309], "data_pagesize_limit": [45, 883], "databas": [34, 115, 131, 132, 309, 785], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 307, 308, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 769, 773, 785, 794, 795, 797, 799, 801, 803, 805, 809, 812, 816, 817, 818, 819, 821, 825, 826, 830, 833, 835, 842, 844, 849, 850, 851, 852, 854, 857, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 883, 889, 957, 958, 992, 1016, 1035, 1101, 1119, 1177, 1188, 1189, 1212, 1218, 1219, 1231, 1242, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1271], "dataload": [271, 309], "datapoint": [201, 309, 812, 883], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 215, 271, 309, 480, 773, 785, 816, 821, 883, 1054, 1242, 1269], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 136, 138, 139, 142, 147, 160, 161, 163, 185, 194, 309, 369, 442, 614, 680, 721, 733, 769, 773, 785, 803, 883, 888, 889, 937, 958, 1101, 1150, 1225, 1242, 1266], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 141, 143, 148, 149, 173, 180, 199, 201, 214, 216, 241, 256, 309, 312, 341, 391, 393, 394, 395, 396, 399, 401, 403, 404, 406, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 490, 589, 592, 594, 596, 598, 600, 603, 605, 607, 660, 662, 680, 701, 714, 715, 717, 718, 725, 733, 759, 773, 791, 799, 812, 817, 834, 883, 889, 911, 963, 965, 966, 967, 968, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1016, 1062, 1110, 1111, 1196, 1198, 1225, 1242, 1261, 1264, 1266], "date32": [214, 309], "date_format": [33, 42, 309, 883], "date_min": 413, "date_minus_1y_2mon": 989, "date_part": 1261, "date_plus_1i": [413, 989], "date_rang": [216, 279, 309, 399, 401, 414, 421, 432, 717, 718, 971, 985, 990, 991, 1007, 1008], "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 141, 144, 148, 159, 160, 161, 163, 173, 180, 199, 201, 214, 216, 241, 256, 279, 309, 312, 341, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 490, 589, 592, 594, 596, 598, 600, 603, 605, 607, 660, 663, 680, 701, 713, 714, 715, 717, 718, 719, 725, 733, 760, 761, 773, 791, 799, 812, 817, 834, 883, 889, 911, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1062, 1110, 1111, 1196, 1199, 1223, 1225, 1242, 1263, 1264], "datetime_format": [33, 42, 309, 883], "datetime_rang": [201, 309, 393, 396, 410, 411, 413, 416, 417, 423, 424, 425, 426, 427, 428, 429, 430, 433, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 773, 812, 883, 964, 965, 968, 972, 973, 974, 979, 980, 982, 984, 986, 987, 988, 989, 992, 993, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "datetime_str": [419, 422], "datetimeindex": 121, "david": 1269, "day_nam": [419, 422], "day_of_month": [399, 414, 432], "day_of_year": [399, 414, 432], "daylight": [201, 216, 241, 279, 309, 392, 400, 413, 417, 430, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 972, 989, 993, 1006], "dayofweek": 1264, "dayofyear": 1264, "days_diff": 423, "db": [34, 131, 132, 309], "dbapi2": 131, "dbc": [628, 1164], "dbreadengin": 132, "dbwriteengin": [34, 309], "dbwritemod": [34, 309], "dd": [36, 309, 1263], "ddd": [1, 36, 309, 671, 673], "dddd": 1263, "ddof": [257, 280, 309, 355, 360, 518, 524, 602, 603, 606, 607, 624, 688, 705, 707, 749, 750, 754, 762, 773, 845, 853, 883, 925, 930, 1090, 1096, 1138, 1140, 1160, 1232, 1242], "ddww": 1263, "de": 1263, "deal": [41, 45, 213, 309, 321, 323, 416, 579, 660, 663, 691, 692, 693, 694, 716, 773, 883, 893, 894, 992, 1121, 1196, 1199, 1242], "debug": [29, 794, 821, 883, 1271], "decad": [1250, 1264], "decai": [438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 309, 313, 608, 664, 773, 883, 889, 1141, 1200, 1242, 1262], "decimal_comma": [129, 130, 143], "decimal_separ": [9, 27], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 266, 271, 309, 883, 889, 1250], "decod": [129, 130, 640], "decompos": [275, 309, 850, 883], "decompress": [41, 43, 45, 309, 883], "decor": [46, 48, 49, 50, 51, 159, 163, 219, 309, 531, 773, 784, 785, 1101, 1242], "dedic": [1, 117, 213, 243, 309, 889, 1268], "deem": [180, 309, 799, 883], "deepcopi": [174, 309, 792, 883, 945, 1242], "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 233, 273, 309, 318, 573, 634, 657, 690, 734, 773, 795, 829, 883, 889, 1170, 1271], "default": [4, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 180, 181, 184, 187, 196, 200, 201, 202, 213, 215, 216, 223, 225, 232, 234, 241, 242, 243, 244, 245, 249, 252, 256, 257, 259, 264, 266, 267, 271, 274, 276, 277, 278, 280, 285, 294, 309, 320, 321, 323, 346, 353, 358, 384, 386, 391, 416, 435, 437, 438, 440, 441, 461, 497, 501, 510, 515, 516, 518, 522, 524, 525, 530, 537, 540, 543, 561, 562, 564, 570, 576, 579, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 613, 615, 624, 625, 633, 639, 650, 655, 656, 657, 660, 662, 663, 665, 667, 687, 688, 691, 693, 696, 700, 701, 704, 705, 707, 714, 715, 716, 717, 718, 719, 722, 725, 729, 730, 731, 733, 745, 748, 754, 755, 760, 761, 762, 764, 773, 794, 795, 799, 800, 802, 804, 811, 812, 816, 817, 825, 834, 838, 840, 844, 845, 849, 851, 852, 853, 858, 866, 883, 889, 893, 894, 916, 923, 928, 946, 957, 958, 963, 992, 1012, 1014, 1015, 1017, 1018, 1033, 1069, 1073, 1082, 1087, 1088, 1094, 1110, 1111, 1115, 1119, 1121, 1125, 1126, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1143, 1149, 1152, 1160, 1161, 1162, 1169, 1173, 1175, 1186, 1191, 1192, 1193, 1196, 1198, 1199, 1201, 1203, 1221, 1223, 1231, 1232, 1242, 1262, 1271], "default_match": [626, 637], "defaultdict": [244, 309], "defer": [309, 312, 313, 1242, 1246], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 173, 184, 188, 201, 219, 230, 233, 241, 278, 295, 309, 468, 497, 531, 573, 576, 588, 589, 592, 594, 596, 598, 600, 603, 605, 607, 638, 643, 650, 661, 714, 715, 717, 718, 735, 755, 760, 761, 773, 791, 802, 805, 812, 829, 834, 852, 867, 883, 888, 889, 1039, 1069, 1101, 1119, 1130, 1174, 1179, 1186, 1197, 1242], "definit": [36, 309, 480, 773, 888, 889, 1054, 1242], "deflat": [31, 309], "deg": 1265, "degre": [257, 280, 309, 518, 524, 578, 602, 603, 606, 607, 624, 688, 698, 705, 707, 749, 750, 754, 762, 773, 845, 853, 883, 1138, 1140, 1160, 1232, 1242, 1261], "delet": [1257, 1270], "delimit": [40, 42, 139, 147, 234, 264, 309, 625, 639, 883, 1161, 1175, 1218, 1242], "delta": [35, 133, 144, 257, 280, 309, 518, 524, 602, 603, 606, 607, 624, 688, 705, 707, 749, 750, 754, 762, 773, 785, 845, 853, 883, 1138, 1140, 1160, 1232, 1242], "delta_merge_opt": [35, 309], "delta_table_opt": [133, 144], "delta_write_opt": [35, 309], "deltalak": [35, 133, 144, 151, 309], "deltat": [35, 309], "demonstr": [129, 452, 773, 889], "dens": [20, 199, 309, 579, 773, 1121, 1242], "depend": [46, 52, 85, 131, 151, 339, 340, 487, 488, 531, 540, 576, 579, 719, 722, 725, 731, 773, 909, 910, 1059, 1060, 1119, 1121, 1242, 1271], "deploi": [159, 163], "deprec": [35, 156, 157, 158, 159, 163, 166, 171, 267, 285, 290, 309, 398, 433, 454, 546, 583, 625, 632, 689, 698, 706, 773, 788, 804, 857, 858, 862, 883, 970, 978, 979, 1009, 1032, 1125, 1161, 1168, 1223, 1242], "depth": 126, "desc": [889, 1250, 1253, 1257, 1259], "descend": [47, 250, 255, 309, 334, 354, 517, 579, 612, 621, 622, 687, 699, 773, 839, 843, 883, 904, 924, 1051, 1089, 1121, 1147, 1158, 1231, 1242], "describ": [159, 199, 309, 883, 1242], "describe_optimized_plan": [217, 309], "describe_plan": [217, 309], "descript": [201, 309, 812, 883, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1266, 1269, 1270], "deseri": [126, 249, 309, 454, 543, 773, 838, 883], "deserializ": [181, 249, 309, 386, 543, 773, 800, 838, 883], "design": [266, 271, 309], "desir": [159, 358, 433, 522, 928, 1009, 1094], "destin": 132, "detail": [52, 117, 131, 132, 152, 154, 170, 201, 309, 812, 883, 1271], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 172, 176, 194, 201, 213, 214, 219, 241, 272, 273, 279, 309, 368, 403, 416, 463, 522, 540, 576, 582, 584, 619, 627, 638, 660, 661, 663, 664, 682, 716, 745, 748, 764, 773, 789, 796, 797, 803, 812, 834, 848, 854, 883, 975, 992, 1035, 1094, 1119, 1125, 1126, 1156, 1163, 1196, 1199, 1200, 1242], "dev": [1138, 1242], "develop": [132, 159, 163], "deviat": [257, 309, 440, 602, 603, 624, 754, 773, 845, 883, 1017, 1160, 1242, 1258], "devic": [266, 309, 1221, 1242], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 595, 597, 599, 601, 602, 604, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 751, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 769, 773, 812, 834, 850, 852, 864, 867, 875, 883, 889, 992, 1016, 1177, 1188, 1189, 1219, 1242, 1250, 1251, 1252, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1271], "df0": [226, 309, 826, 883, 1256], "df1": [47, 55, 152, 153, 186, 189, 226, 256, 281, 309, 826, 883, 1253, 1255, 1256, 1257, 1268], "df2": [47, 55, 152, 153, 186, 189, 281, 309, 1253, 1255, 1256, 1257, 1268], "df3": [47, 309], "df4": 309, "df5": 309, "df6": 309, "df_a": 1268, "df_a1": 55, "df_a2": 55, "df_a3": 55, "df_agg_nuniqu": [230, 309], "df_b": 1268, "df_current_batch": 130, "df_d1": 55, "df_d2": 55, "df_from_str_repr": [265, 309], "df_h1": 55, "df_h2": 55, "df_new_grid": [466, 773], "df_nuniqu": [230, 309], "df_original_grid": [466, 773], "df_panda": 1251, "df_pd": 117, "df_tempor": [592, 594, 596, 598, 600, 603, 605, 607, 773], "dfi": [117, 170], "diagon": [55, 273, 309], "diagonal_relax": 55, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 193, 213, 232, 238, 242, 243, 244, 262, 263, 266, 271, 273, 309, 773, 832, 883, 887, 889, 1242, 1254], "dictat": [413, 773, 887, 989], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 213, 232, 242, 243, 244, 262, 263, 266, 271, 309, 883], "did": [392, 964], "diff": [283, 309, 423, 424, 425, 426, 427, 428, 429, 511, 773, 855, 883, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1083, 1242], "differ": [36, 87, 90, 111, 129, 134, 149, 152, 154, 189, 201, 202, 213, 234, 241, 243, 244, 263, 266, 267, 273, 309, 387, 399, 413, 414, 416, 431, 437, 452, 461, 492, 511, 513, 522, 531, 561, 562, 564, 583, 584, 660, 685, 722, 725, 731, 773, 804, 812, 834, 883, 889, 940, 959, 971, 989, 990, 992, 1007, 1021, 1033, 1064, 1083, 1085, 1101, 1110, 1111, 1125, 1126, 1196, 1242, 1264, 1266, 1268], "digit": [63, 573, 608, 609, 634, 773, 889, 1141, 1142, 1164, 1170, 1242, 1271], "dimens": [116, 118, 120, 122, 138, 139, 147, 309, 585, 773, 883, 1127, 1223, 1242], "dimension": [118, 120, 122, 267, 309, 883, 1242], "direct": [36, 132, 141, 145, 148, 152, 252, 266, 277, 309, 353, 515, 613, 773, 840, 883, 923, 1087, 1149, 1242], "directli": [6, 30, 54, 131, 159, 163, 168, 244, 266, 309, 438, 440, 441, 584, 748, 773, 795, 883, 1015, 1017, 1018, 1126, 1221, 1242, 1253, 1268, 1271], "directori": [36, 41, 141, 309, 887], "dirpath": [31, 33, 37, 38, 41, 143, 309], "disabl": [41, 45, 46, 84, 85, 141, 160, 213, 309, 794, 883], "disable_string_cach": 85, "disallow": 159, "discard": [192, 309, 448, 773, 808, 883, 1025, 1242], "disco": [636, 1172], "discont": [636, 1172], "discourag": [531, 773], "discoveri": [234, 309], "discret": [384, 387, 435, 463, 492, 511, 576, 773, 957, 959, 1012, 1035, 1064, 1083, 1119, 1242], "disk": [41, 42, 43, 44, 45, 135, 309, 841, 883], "dispatch": 889, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 180, 199, 309, 799, 804, 883], "distanc": [216, 309, 463, 773, 817, 883, 1035, 1242], "distinct": [36, 163, 232, 234, 287, 309, 359, 471, 474, 523, 579, 588, 719, 773, 929, 1043, 1046, 1095, 1121, 1130, 1242, 1258, 1267, 1269, 1271], "distinct_count": [41, 45, 309, 883], "distribut": [480, 619, 773, 1054, 1156, 1242], "div": 1261, "divid": [20, 384, 417, 430, 438, 440, 441, 452, 480, 576, 773, 957, 993, 1006, 1015, 1017, 1018, 1054, 1119, 1242, 1262], "divis": [452, 683, 773, 1262], "divisor": [257, 280, 309, 518, 524, 602, 603, 606, 607, 624, 688, 705, 707, 749, 750, 754, 762, 773, 845, 853, 883, 1138, 1140, 1160, 1232, 1242], "dl": [271, 309], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 143, 152, 153, 154, 155, 180, 189, 212, 215, 216, 234, 261, 273, 277, 309, 383, 391, 494, 530, 655, 656, 657, 745, 748, 764, 773, 790, 794, 795, 799, 804, 817, 821, 830, 841, 883, 889, 956, 963, 1021, 1066, 1191, 1192, 1193, 1226, 1242], "do_polars_oper": 29, "do_someth": 131, "do_various_th": 168, "doc": [35, 37, 38, 132, 135, 137, 152, 154, 178, 309], "document": [87, 132, 309, 312, 313, 419, 422, 641, 660, 662, 663, 667, 769, 940, 995, 998, 1177, 1196, 1198, 1199, 1203, 1242, 1246], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 175, 182, 189, 192, 196, 201, 202, 214, 215, 242, 243, 244, 274, 283, 286, 309, 312, 313, 433, 448, 452, 461, 522, 656, 657, 685, 769, 773, 793, 799, 801, 808, 812, 816, 821, 849, 855, 859, 883, 947, 1009, 1021, 1025, 1032, 1033, 1151, 1242, 1246, 1263], "doesn": [35, 129, 143, 201, 216, 309, 435, 773, 812, 883, 1012, 1242], "dog": [626, 666, 669, 704, 1162, 1202, 1205], "doi": 1264, "dollar": [646, 647, 1182, 1183], "domain": [1, 634, 1170], "don": [55, 201, 216, 219, 274, 277, 309, 383, 494, 531, 773, 812, 849, 883, 889, 956, 1066, 1101, 1242], "done": [130, 149, 168, 171, 173, 216, 309, 324, 325, 569, 773, 788, 791, 817, 883], "dot": [47, 769, 773, 841, 883, 1242], "doubl": [268, 309], "dow": 1264, "down": [143, 146, 147, 148, 149, 451, 773, 1027, 1242], "download": [143, 146, 841, 883], "downstream": [267, 309, 612, 773, 1147, 1242], "dr": 145, "drago": [638, 1174], "dragon": 638, "dragonfr": 1174, "dragonfruit": [638, 650, 661, 1174, 1186, 1197], "dramat": 134, "draw": [20, 25, 159, 163, 1271], "drawback": 769, "drawfn": 1271, "drawing_charact": 20, "dremio": 131, "driver": [34, 131, 132, 309], "drop": [1, 119, 183, 184, 219, 274, 283, 309, 387, 389, 390, 492, 493, 576, 773, 802, 849, 855, 883, 959, 961, 962, 1064, 1065, 1119, 1242, 1267], "drop_dupl": [274, 309, 849, 883], "drop_first": [264, 309, 1218, 1242], "drop_in_plac": 309, "drop_nan": [390, 773, 962, 1242], "drop_nul": [309, 389, 773, 883, 961, 1242], "dset": 149, "dst": [417, 430, 993, 1006], "dst_offset": [392, 964], "dt": [1, 36, 47, 134, 140, 241, 309, 589, 719, 773, 782, 834, 883, 889, 1249, 1263, 1264], "dt1": 1263, "dt2": 1263, "dtm": [36, 309, 395, 889, 967, 1263], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 156, 157, 158, 159, 163, 170, 173, 176, 201, 216, 241, 265, 266, 267, 268, 271, 277, 286, 309, 369, 370, 381, 382, 433, 442, 455, 489, 497, 528, 530, 531, 537, 574, 581, 582, 589, 592, 594, 596, 598, 600, 603, 605, 607, 614, 640, 660, 676, 680, 686, 696, 721, 725, 729, 730, 732, 733, 734, 735, 745, 748, 755, 764, 773, 791, 796, 812, 817, 834, 859, 883, 888, 889, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 937, 938, 939, 940, 945, 954, 955, 958, 959, 1009, 1014, 1041, 1057, 1058, 1061, 1069, 1093, 1100, 1101, 1128, 1150, 1176, 1196, 1213, 1220, 1221, 1223, 1224, 1225, 1226, 1230, 1242, 1268, 1271], "dtype_format": [36, 309], "dtypekind": 170, "dtypeoper": [1, 50], "dubiou": 87, "due": [173, 201, 216, 241, 244, 279, 309, 320, 400, 413, 417, 430, 552, 553, 555, 557, 559, 560, 589, 592, 594, 596, 598, 600, 603, 605, 607, 701, 714, 715, 717, 718, 760, 761, 773, 791, 812, 817, 834, 883, 972, 989, 993, 1006], "dummi": [264, 309, 1218, 1242], "duplic": [47, 92, 208, 215, 216, 274, 278, 309, 320, 469, 552, 576, 773, 816, 817, 849, 852, 883, 1040, 1119, 1242, 1269], "duplicateerror": [576, 773, 1119, 1242], "durat": [168, 216, 279, 309, 392, 400, 423, 424, 425, 426, 427, 428, 429, 433, 439, 680, 714, 715, 717, 718, 760, 761, 773, 817, 883, 889, 964, 972, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1016, 1223, 1225, 1242], "dure": [46, 91, 129, 130, 143, 168, 189, 309, 1021, 1242], "dutch": [391, 701, 963], "dynam": [201, 309, 358, 522, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 773, 812, 883, 887, 928, 1094], "dynamicgroupbi": [201, 309], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 141, 146, 149, 161, 181, 199, 203, 212, 218, 260, 261, 267, 277, 309, 318, 386, 435, 439, 442, 468, 525, 531, 536, 537, 538, 540, 541, 542, 544, 545, 614, 619, 637, 656, 657, 721, 735, 752, 763, 773, 800, 819, 832, 883, 889, 1012, 1016, 1039, 1156, 1173, 1242, 1259, 1263, 1271], "e101": [36, 309], "e_filt": [540, 542], "e_sum_ov": [540, 542], "e_sum_slic": [540, 542], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 147, 152, 153, 154, 155, 157, 177, 179, 185, 192, 199, 200, 201, 214, 216, 219, 232, 234, 241, 243, 245, 266, 271, 275, 278, 279, 287, 288, 290, 292, 294, 295, 303, 309, 334, 368, 384, 417, 430, 448, 471, 474, 500, 503, 510, 520, 527, 531, 569, 576, 579, 587, 588, 595, 599, 610, 615, 622, 634, 638, 642, 643, 650, 652, 653, 661, 682, 696, 699, 704, 729, 730, 755, 763, 773, 794, 797, 798, 803, 808, 812, 817, 830, 834, 850, 852, 860, 862, 864, 866, 867, 875, 883, 904, 944, 957, 993, 1006, 1043, 1046, 1072, 1075, 1082, 1092, 1119, 1121, 1129, 1130, 1143, 1152, 1170, 1174, 1178, 1179, 1186, 1188, 1189, 1197, 1212, 1242, 1268, 1269, 1271], "eager": [201, 216, 234, 277, 309, 393, 396, 399, 401, 410, 411, 413, 414, 416, 417, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 592, 594, 596, 598, 600, 603, 605, 607, 696, 700, 714, 715, 717, 718, 725, 729, 730, 745, 748, 752, 755, 760, 761, 764, 772, 773, 812, 821, 883, 964, 965, 968, 971, 972, 973, 974, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1268], "eagerli": [522, 1250], "ear": [650, 661, 1186], "earlier": [216, 309], "earliest": [201, 309, 416, 660, 663, 716, 812, 876, 883, 992, 1196, 1199], "easi": 168, "easili": [47, 247, 271, 283, 288, 309, 755, 769, 836, 855, 860, 883], "east": 148, "ebf1d": [36, 309], "eee": [1, 36, 309, 889], "effect": [36, 194, 201, 309, 400, 452, 531, 554, 556, 558, 773, 812, 858, 859, 883, 964, 972], "effici": [117, 131, 212, 214, 309, 530, 773], "efgh": 1263, "eg": [17, 25, 36, 55, 132, 168, 266, 309, 417, 660, 663, 683, 773, 889, 1032, 1196, 1199, 1242], "egnaro": 1263, "either": [76, 159, 211, 215, 216, 217, 232, 241, 242, 266, 267, 309, 439, 530, 574, 576, 589, 660, 691, 699, 755, 773, 816, 817, 819, 834, 883, 887, 889, 1016, 1119, 1196, 1242, 1254, 1271], "element": [13, 14, 25, 154, 155, 158, 161, 172, 179, 211, 234, 242, 255, 257, 272, 280, 309, 326, 327, 328, 329, 330, 331, 342, 343, 367, 368, 371, 374, 375, 376, 377, 379, 380, 381, 382, 383, 389, 390, 443, 444, 448, 461, 472, 483, 491, 493, 494, 495, 498, 503, 511, 512, 513, 514, 518, 524, 526, 527, 530, 531, 569, 570, 579, 582, 590, 591, 593, 595, 597, 599, 601, 602, 604, 606, 611, 616, 617, 618, 622, 623, 624, 652, 653, 664, 678, 679, 681, 682, 688, 699, 705, 707, 749, 750, 754, 762, 773, 789, 798, 843, 845, 848, 853, 883, 896, 897, 898, 899, 900, 901, 912, 913, 936, 942, 945, 948, 949, 950, 952, 953, 954, 955, 956, 961, 962, 1019, 1020, 1025, 1034, 1044, 1053, 1055, 1056, 1063, 1065, 1066, 1067, 1070, 1075, 1083, 1084, 1085, 1086, 1098, 1099, 1101, 1115, 1121, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1145, 1153, 1154, 1155, 1159, 1160, 1188, 1189, 1200, 1214, 1215, 1216, 1220, 1227, 1228, 1232, 1242, 1258, 1259], "elementwis": [530, 590, 591, 593, 595, 597, 599, 602, 604, 606, 773, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1242], "elif": 763, "elig": [821, 883], "elimin": [480, 773, 1054, 1242], "elis": [226, 309, 826, 883], "ellipsi": [199, 309], "elppa": 1263, "els": [130, 763], "email": [634, 1170], "email_part": [634, 1170], "emphas": [309, 313], "emploi": 889, "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 174, 175, 201, 225, 276, 309, 625, 632, 733, 751, 792, 793, 812, 825, 851, 883, 889, 945, 947, 1041, 1161, 1168, 1242], "en": [20, 36, 309], "enabl": [28, 29, 41, 45, 46, 84, 85, 141, 152, 153, 154, 155, 167, 247, 268, 283, 309, 321, 323, 583, 584, 612, 627, 636, 648, 687, 769, 773, 794, 836, 855, 883, 893, 894, 1125, 1126, 1147, 1163, 1172, 1184, 1224, 1231, 1242], "enable_string_cach": 84, "enclos": [454, 773], "encod": [59, 65, 75, 126, 129, 130, 143, 264, 309, 363, 454, 587, 629, 672, 773, 932, 1129, 1165, 1218, 1242], "encount": [107, 129, 130, 143, 201, 309, 561, 562, 640, 641, 705, 709, 723, 773, 812, 883, 1110, 1111, 1176, 1177, 1242], "end": [33, 36, 42, 129, 130, 143, 201, 234, 309, 362, 365, 366, 392, 417, 442, 516, 626, 631, 634, 638, 644, 650, 654, 655, 656, 659, 696, 701, 713, 714, 715, 716, 717, 718, 721, 729, 730, 760, 761, 763, 769, 773, 812, 813, 820, 830, 883, 889, 934, 964, 993, 1051, 1088, 1167, 1170, 1174, 1180, 1186, 1190, 1191, 1192, 1197, 1242, 1263], "endpoint": [384, 576, 773, 957, 1119, 1242], "ends_a": 1263, "ends_in_digit": 1263, "ends_with": [362, 366, 626, 654, 889, 1190, 1261], "ends_with_expr": 365, "ends_with_lit": 365, "engin": [14, 34, 131, 132, 134, 165, 200, 215, 219, 267, 274, 295, 309, 530, 752, 773, 811, 816, 821, 825, 849, 851, 867, 883, 1101, 1223, 1242, 1253, 1268], "engine_opt": [34, 134, 309], "enough": [494, 619, 773, 1066, 1156, 1242], "ensur": [10, 36, 132, 158, 161, 200, 232, 242, 267, 309, 468, 530, 773, 811, 821, 883, 887, 889, 1223, 1242], "enter": 168, "entir": [36, 53, 54, 134, 140, 309, 794, 795, 883], "entri": [309, 883, 1268], "entropi": [773, 1242], "enumer": [121, 129, 130, 143, 214, 309], "env": [4, 164], "env_onli": 30, "environ": [4, 30, 141, 143, 146, 148, 162, 165, 266, 309], "eol_char": [129, 130, 143], "eparg": 1263, "epoch": [61, 62, 725, 1264], "epoch_": [401, 973], "epoch_n": [401, 973], "epochtimeunit": [401, 725, 973], "eq": [192, 309, 437, 448, 773, 808, 883, 1242], "eq_miss": [773, 1242], "equal": [46, 85, 129, 130, 131, 143, 152, 153, 154, 155, 201, 216, 226, 255, 309, 384, 430, 436, 437, 439, 457, 482, 522, 564, 576, 582, 590, 591, 593, 595, 597, 599, 602, 604, 606, 622, 644, 645, 670, 699, 749, 750, 763, 769, 773, 812, 817, 826, 843, 883, 957, 993, 1016, 1094, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1180, 1181, 1206, 1242, 1260, 1271], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 201, 211, 230, 309, 318, 322, 436, 437, 439, 452, 457, 459, 482, 529, 548, 550, 563, 564, 565, 568, 574, 643, 675, 683, 690, 773, 812, 883, 1016, 1053, 1179, 1202, 1204, 1205, 1242, 1251, 1259], "err": 635, "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 143, 173, 234, 242, 267, 309, 320, 345, 346, 363, 391, 497, 499, 501, 552, 584, 626, 629, 633, 635, 637, 640, 641, 660, 662, 663, 667, 773, 791, 795, 867, 883, 915, 916, 932, 963, 1069, 1071, 1073, 1126, 1162, 1165, 1169, 1171, 1173, 1176, 1177, 1196, 1198, 1199, 1203, 1223, 1242, 1266], "escap": [129, 130, 132, 143], "esp": 14, "especi": [157, 588, 773, 883, 1130, 1242], "espresso": 889, "est": 717, "establish": 131, "estim": [129, 130, 171, 187, 309, 325, 440, 441, 480, 695, 773, 788, 883, 1014, 1017, 1018, 1054, 1242], "estimated_s": [309, 1242], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 146, 309, 773, 887, 889, 1144, 1146, 1242, 1264], "eu": [144, 145], "eur": [199, 309, 1271], "europ": [396, 400, 416, 968, 972, 992], "eval": [265, 309, 530, 531, 720, 773, 1101, 1220, 1242], "evalu": [42, 43, 44, 45, 190, 192, 216, 309, 322, 335, 337, 338, 383, 448, 465, 485, 486, 522, 568, 691, 693, 696, 700, 714, 715, 717, 718, 720, 729, 730, 745, 748, 755, 760, 761, 763, 764, 773, 794, 808, 814, 816, 817, 883, 905, 907, 908, 956, 1025, 1057, 1058, 1233, 1242, 1260], "even": [33, 42, 129, 309, 439, 573, 576, 773, 883, 889, 1016, 1119, 1242], "evenli": [201, 309, 812, 883], "event": [54, 795, 883], "eventu": [34, 309], "everi": [14, 33, 42, 129, 130, 143, 195, 201, 263, 279, 309, 337, 338, 339, 340, 343, 345, 351, 379, 380, 381, 382, 383, 417, 430, 444, 456, 487, 488, 492, 495, 498, 499, 500, 508, 511, 516, 520, 588, 632, 709, 710, 773, 810, 812, 883, 907, 908, 909, 910, 913, 915, 921, 952, 953, 954, 955, 956, 993, 1006, 1020, 1029, 1032, 1059, 1060, 1064, 1067, 1070, 1071, 1072, 1080, 1083, 1088, 1092, 1130, 1168, 1242], "everybodi": [627, 648, 1163, 1184], "everyth": 889, "ew": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "ewm_mean": [773, 1242], "ewm_mean_bi": [773, 1242], "ewm_std": [773, 1242], "ewm_var": [773, 1242], "ewma": [439, 773, 1016, 1242], "exact": [131, 157, 159, 163, 216, 253, 309, 325, 452, 632, 658, 659, 660, 662, 663, 683, 773, 1168, 1196, 1198, 1199], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 309, 652, 653, 658, 659, 719, 883, 1151, 1188, 1189, 1194, 1195, 1242], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 773, 785, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1270], "exc_tb": 1268, "exc_typ": 1268, "exc_val": 1268, "exce": [199, 309], "excel": [32, 36, 128, 134, 309, 785], "excelread": 134, "excelspreadsheetengin": 134, "except": [0, 152, 182, 196, 203, 216, 218, 260, 309, 369, 584, 638, 661, 721, 773, 785, 801, 817, 883, 889, 937, 1034, 1056, 1126, 1174, 1197, 1214, 1223, 1242, 1267], "exclud": [159, 163, 201, 309, 368, 379, 382, 391, 468, 537, 682, 701, 769, 773, 812, 883, 889, 963, 1039, 1242], "excluded_dtyp": [159, 160, 163], "exclus": [242, 309, 690, 696, 729, 730, 773], "execut": [35, 46, 55, 131, 132, 217, 256, 309, 386, 494, 687, 752, 773, 790, 800, 821, 830, 844, 883, 887, 1066, 1231, 1242, 1251, 1252, 1253, 1255, 1268, 1270], "execute_glob": 1268, "execute_opt": [131, 132], "exist": [1, 34, 35, 36, 47, 92, 133, 144, 159, 182, 196, 273, 278, 283, 284, 309, 320, 362, 365, 366, 395, 416, 703, 773, 797, 801, 803, 832, 835, 852, 854, 855, 856, 883, 889, 967, 992, 1270], "existing_t": 1270, "existing_table_path": [35, 309], "exit": [46, 84, 168, 1256, 1268], "exp": [438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242, 1261], "exp_a": 1262, "expand": [129, 141, 143, 148, 444, 536, 538, 582, 773, 887, 889, 1020, 1242], "expand_selector": 889, "expans": 671, "expect": [63, 65, 97, 105, 113, 129, 131, 143, 522, 531, 733, 773, 819, 821, 883], "expens": [129, 130, 141, 143, 147, 148, 162, 164, 213, 219, 242, 243, 244, 273, 274, 309, 531, 773, 797, 799, 803, 835, 849, 854, 883, 1021, 1101, 1242, 1271], "experiment": [271, 309, 855, 883], "explain": [53, 54, 794, 795, 883, 1267], "explainformat": [804, 883], "explicit": [36, 91, 131, 143, 157, 256, 278, 309, 747, 844, 852, 883], "explicitli": [91, 132, 157, 159, 168, 196, 309, 583, 755, 773, 784, 1268], "explod": [309, 368, 450, 569, 585, 682, 773, 883, 887, 1127, 1242, 1259], "explor": [180, 309, 799, 883], "expon": [574, 773, 1242, 1262], "exponenti": [438, 439, 440, 441, 443, 574, 773, 1015, 1016, 1017, 1018, 1019, 1242, 1262], "export": [36, 213, 214, 243, 244, 263, 266, 309, 769, 889], "expos": 785, "expr": [1, 47, 48, 49, 50, 51, 188, 190, 191, 215, 216, 230, 234, 242, 247, 248, 266, 271, 283, 284, 309, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 769, 773, 774, 775, 778, 779, 780, 781, 782, 805, 806, 807, 816, 817, 831, 836, 837, 855, 856, 883, 887, 889, 956, 963, 966, 967, 981, 989, 1006, 1016, 1023, 1024, 1028, 1066, 1072, 1088, 1092, 1162, 1167, 1173, 1190, 1242, 1266], "expr1": [1260, 1268], "expr2": [1260, 1268], "expr_unique_subset": [230, 309], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 172, 188, 190, 192, 200, 215, 216, 219, 230, 234, 242, 247, 248, 252, 255, 266, 271, 272, 283, 284, 286, 288, 295, 309, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 334, 335, 339, 340, 341, 342, 343, 346, 357, 362, 363, 364, 365, 366, 368, 373, 374, 375, 376, 377, 383, 384, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 442, 444, 445, 447, 448, 452, 454, 455, 457, 458, 459, 460, 465, 468, 469, 470, 471, 472, 473, 474, 482, 483, 487, 488, 490, 491, 494, 495, 501, 503, 521, 522, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 541, 543, 544, 546, 548, 550, 552, 553, 555, 557, 559, 560, 563, 564, 566, 568, 569, 573, 574, 575, 576, 578, 582, 583, 584, 585, 587, 588, 610, 611, 612, 615, 617, 618, 620, 622, 625, 626, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 646, 647, 650, 651, 652, 653, 661, 665, 674, 675, 678, 679, 682, 683, 684, 686, 687, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 737, 739, 742, 745, 747, 748, 749, 750, 751, 753, 755, 757, 759, 760, 761, 763, 764, 769, 772, 785, 789, 794, 795, 804, 805, 808, 811, 816, 817, 830, 836, 837, 840, 841, 843, 848, 855, 856, 857, 859, 860, 867, 883, 887, 889, 912, 946, 956, 963, 966, 967, 981, 1016, 1022, 1039, 1063, 1066, 1101, 1125, 1126, 1145, 1149, 1162, 1164, 1169, 1170, 1171, 1173, 1174, 1176, 1177, 1182, 1183, 1197, 1201, 1242, 1259, 1260, 1262, 1263, 1267], "expressioin": [445, 773, 1022, 1242], "exprlistnamespac": [450, 773], "exprmetanamespac": [535, 539], "exprnamespac": 495, "ext": 131, "extend": [0, 119, 281, 309, 445, 773, 785, 887, 895, 1022, 1242], "extend_const": [773, 1242], "extens": [268, 309, 1224, 1242], "extern": [857, 883], "extra": [35, 129, 130, 133, 135, 137, 143, 144, 145, 146, 189, 201, 309, 773, 812, 883, 887, 1021, 1242], "extract": [123, 256, 309, 394, 397, 399, 402, 404, 405, 406, 407, 408, 409, 412, 414, 415, 418, 420, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 573, 634, 635, 636, 640, 641, 650, 652, 773, 966, 969, 970, 971, 974, 976, 980, 981, 982, 984, 985, 988, 990, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1170, 1171, 1172, 1176, 1177, 1186, 1261], "extract_numb": [573, 773], "extracted_nr": 634, "extrem": [445, 590, 773, 1022, 1131, 1242], "extrema": [614, 773, 1150, 1242], "f": [48, 130, 131, 199, 214, 261, 267, 273, 277, 309, 318, 358, 522, 614, 632, 660, 663, 703, 773, 889, 928, 1094, 1168, 1196, 1199, 1259], "f32": [1, 50, 173, 256, 265, 271, 309, 614, 752, 773, 791, 844, 883, 889, 1100, 1242, 1266], "f4": [267, 309], "f5ed2452": [36, 309], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 173, 174, 175, 178, 180, 181, 182, 185, 190, 191, 194, 198, 199, 200, 201, 206, 207, 215, 216, 221, 222, 223, 224, 228, 234, 235, 236, 254, 255, 257, 259, 271, 280, 283, 288, 291, 293, 296, 297, 298, 299, 301, 302, 309, 317, 320, 326, 327, 328, 329, 330, 331, 349, 355, 360, 369, 371, 372, 374, 375, 376, 384, 385, 389, 390, 418, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 451, 452, 457, 459, 466, 467, 475, 476, 477, 478, 480, 482, 494, 505, 506, 518, 524, 525, 526, 527, 529, 532, 533, 534, 547, 550, 552, 561, 562, 563, 564, 570, 574, 576, 577, 578, 579, 583, 584, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 617, 618, 619, 623, 624, 674, 678, 679, 683, 688, 697, 698, 702, 703, 705, 707, 720, 721, 735, 738, 739, 740, 752, 754, 762, 769, 773, 791, 792, 799, 801, 806, 807, 811, 812, 815, 816, 817, 823, 824, 831, 843, 845, 853, 855, 857, 860, 863, 865, 868, 869, 870, 871, 873, 874, 883, 889, 896, 897, 898, 899, 900, 901, 919, 925, 930, 942, 943, 948, 949, 950, 957, 958, 961, 962, 994, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1035, 1037, 1038, 1066, 1077, 1078, 1090, 1096, 1097, 1098, 1099, 1115, 1119, 1121, 1126, 1131, 1133, 1134, 1136, 1137, 1138, 1140, 1141, 1142, 1154, 1155, 1159, 1215, 1216, 1230, 1242, 1250, 1258, 1259, 1262, 1265, 1268, 1271], "f_string": 724, "fa1e": [665, 1201], "facil": 131, "facilit": [176, 309], "factor": [438, 440, 441, 680, 773, 1015, 1017, 1018, 1225, 1242], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 170, 267, 274, 309, 335, 420, 522, 660, 662, 663, 667, 773, 849, 883, 1101, 1196, 1198, 1199, 1203, 1223, 1242, 1266], "fall": [384, 576, 773, 957, 1119, 1242], "fals": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 170, 172, 173, 174, 175, 180, 186, 194, 198, 199, 200, 201, 205, 206, 208, 209, 210, 213, 215, 216, 217, 222, 223, 229, 230, 232, 234, 235, 242, 243, 244, 245, 247, 250, 253, 255, 256, 259, 261, 262, 264, 267, 268, 272, 273, 274, 278, 279, 281, 283, 291, 293, 296, 297, 299, 302, 309, 321, 322, 323, 334, 337, 338, 341, 345, 346, 354, 359, 362, 365, 366, 368, 369, 378, 379, 380, 381, 382, 383, 384, 391, 403, 418, 435, 436, 437, 438, 440, 441, 459, 460, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 490, 494, 497, 499, 501, 510, 517, 523, 529, 530, 531, 535, 537, 539, 541, 544, 563, 564, 566, 568, 571, 572, 576, 579, 590, 591, 593, 595, 597, 599, 601, 602, 604, 606, 610, 612, 614, 619, 621, 622, 625, 626, 627, 628, 631, 636, 637, 639, 640, 646, 647, 648, 651, 652, 654, 660, 662, 663, 665, 682, 684, 687, 690, 691, 692, 693, 694, 696, 699, 700, 701, 704, 705, 708, 709, 714, 715, 717, 718, 729, 730, 733, 745, 748, 752, 755, 760, 761, 763, 764, 773, 789, 791, 792, 793, 794, 795, 799, 804, 811, 812, 816, 817, 819, 821, 830, 836, 839, 841, 843, 844, 848, 849, 852, 855, 863, 865, 868, 869, 871, 874, 883, 887, 889, 893, 894, 904, 907, 908, 911, 915, 916, 924, 929, 931, 932, 934, 935, 937, 939, 941, 944, 945, 951, 952, 953, 954, 955, 956, 957, 963, 975, 994, 1012, 1013, 1015, 1017, 1018, 1025, 1026, 1030, 1031, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1057, 1058, 1062, 1066, 1069, 1071, 1073, 1082, 1089, 1095, 1107, 1113, 1116, 1117, 1119, 1121, 1122, 1123, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1147, 1151, 1156, 1158, 1161, 1162, 1163, 1164, 1167, 1172, 1173, 1175, 1176, 1182, 1183, 1184, 1187, 1188, 1190, 1196, 1198, 1199, 1201, 1217, 1218, 1223, 1224, 1228, 1231, 1233, 1242, 1251, 1253, 1259, 1263, 1268], "far": [36, 309], "fashion": [215, 309, 804, 830, 841, 883], "fast": [41, 43, 45, 162, 164, 309, 445, 612, 773, 883, 887, 1022, 1147, 1242, 1271], "fast_executemani": [34, 309], "faster": [42, 43, 44, 45, 131, 134, 189, 267, 277, 309, 531, 685, 773, 883, 1021, 1101, 1242], "fastexcel": [134, 151], "favor": [34, 309], "fay": 126, "feat1": [266, 271, 309], "feat2": [266, 271, 309], "feather": [37, 135, 146, 309, 785], "featur": [1, 41, 52, 63, 65, 266, 271, 309], "feature_0": [857, 883], "feature_0_train": [857, 883], "feature_1": [857, 883], "feature_nam": [271, 309], "feb": [151, 1263], "februari": 1263, "fed": 656, "feel": [627, 648, 1163, 1184], "fetch": [125, 794, 813, 820, 883], "fetch_california_h": [271, 309], "few": [199, 309], "fewer": [638, 661, 883, 1174, 1197], "ff": 1258, "ff00": [665, 1201], "fff": 1, "ffff00": [363, 364, 629, 932, 933, 1165], "ffffff": [36, 309], "ffi": [187, 309, 1014, 1242], "fgg": 889, "fghi": 1263, "fh": 130, "fiction": 1250, "field": [32, 33, 35, 42, 76, 109, 112, 119, 275, 309, 358, 522, 531, 554, 556, 558, 587, 634, 635, 640, 652, 653, 673, 674, 687, 709, 710, 734, 755, 773, 850, 883, 928, 1094, 1101, 1129, 1171, 1188, 1189, 1210, 1212, 1242, 1264], "field_0": [358, 522, 928, 1094], "field_1": [358, 522, 928, 1094], "field_2": [928, 1094], "field_n": [358, 522, 928, 1094], "field_nam": [531, 773, 1101, 1242], "figsiz": [830, 841, 883], "figur": [609, 773, 841, 883, 1142, 1242], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 189, 249, 309, 386, 454, 543, 546, 556, 558, 773, 800, 838, 883, 887, 1021, 1242], "file_cache_ttl": [143, 146], "filenam": 135, "filesystem": [35, 133, 144, 145, 309], "fill": [47, 55, 174, 190, 191, 252, 277, 309, 313, 361, 379, 382, 446, 447, 453, 466, 467, 591, 593, 595, 597, 599, 602, 604, 606, 613, 724, 745, 748, 764, 773, 806, 807, 840, 857, 883, 1023, 1024, 1037, 1038, 1112, 1132, 1133, 1135, 1138, 1139, 1140, 1149, 1242], "fill_char": [644, 645, 1180, 1181], "fill_nan": [191, 309, 447, 773, 807, 883, 1024, 1242], "fill_nul": [47, 190, 309, 446, 773, 806, 857, 883, 1023, 1242], "fill_valu": [252, 277, 309, 613, 773, 840, 883, 1149, 1242], "fillnullstrategi": [191, 309, 447, 773, 807, 883, 1024, 1242], "film": 1250, "filter": [1, 48, 133, 143, 144, 149, 184, 208, 209, 210, 215, 234, 295, 309, 540, 542, 631, 654, 689, 713, 716, 723, 752, 763, 773, 802, 814, 816, 844, 867, 883, 889, 1146, 1242, 1257], "final": [13, 36, 47, 148, 216, 217, 309, 438, 440, 441, 773, 799, 883, 887, 1015, 1017, 1018, 1242, 1269], "find": [55, 197, 309, 611, 626, 627, 773, 1145, 1163, 1242], "find_pat": 637, "finish": [189, 309, 1021, 1242], "finit": [470, 683, 705, 773, 1042, 1242], "first": [41, 47, 129, 130, 134, 135, 137, 141, 143, 152, 153, 154, 155, 199, 201, 203, 216, 218, 219, 229, 233, 234, 241, 260, 264, 265, 273, 274, 279, 286, 292, 309, 334, 336, 345, 383, 387, 411, 413, 417, 433, 452, 462, 471, 484, 492, 494, 499, 500, 522, 530, 531, 541, 573, 574, 589, 611, 622, 626, 632, 633, 637, 638, 640, 641, 646, 647, 661, 702, 709, 723, 727, 763, 769, 773, 794, 812, 813, 817, 820, 829, 834, 849, 857, 859, 864, 883, 889, 904, 915, 956, 958, 959, 987, 989, 993, 1009, 1034, 1043, 1056, 1064, 1066, 1071, 1072, 1094, 1101, 1145, 1158, 1168, 1169, 1171, 1173, 1174, 1176, 1177, 1182, 1183, 1197, 1214, 1218, 1220, 1223, 1242, 1260, 1261, 1263, 1269, 1271], "first_column": [36, 309], "first_non_nul": [522, 1094], "first_part": [652, 653, 1188, 1189], "fisher": [480, 619, 773, 1054, 1156, 1242], "fit": [126, 213, 253, 277, 309, 614, 748, 773, 1150, 1151, 1242], "five": [270, 309, 1271], "fix": [10, 56, 65, 157, 433, 719, 1009], "flag": [52, 156, 267, 309, 612, 626, 633, 634, 637, 646, 647, 773, 804, 821, 883, 889, 1147, 1162, 1169, 1170, 1173, 1182, 1183, 1223, 1242, 1263], "flat": [126, 244, 309, 495, 585, 773, 1067, 1127, 1242], "flatten": 773, "flavour": [36, 131, 309], "flight": 131, "flight_sql": 131, "flightsql": 131, "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 170, 180, 187, 190, 216, 236, 245, 266, 267, 301, 309, 341, 372, 384, 389, 390, 418, 435, 436, 437, 438, 440, 441, 446, 451, 452, 457, 459, 466, 470, 473, 475, 476, 477, 478, 482, 490, 510, 525, 529, 530, 532, 547, 561, 562, 563, 564, 574, 576, 577, 590, 591, 593, 595, 597, 599, 600, 602, 604, 606, 608, 610, 683, 746, 748, 773, 799, 806, 817, 831, 841, 873, 883, 889, 911, 937, 943, 957, 958, 960, 961, 962, 994, 1012, 1014, 1015, 1017, 1018, 1023, 1027, 1035, 1054, 1062, 1082, 1097, 1110, 1111, 1118, 1119, 1120, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1143, 1146, 1156, 1160, 1213, 1223, 1232, 1242, 1268, 1271], "float16": [271, 309], "float32": [1, 10, 33, 42, 50, 173, 194, 265, 266, 267, 271, 309, 439, 733, 773, 791, 883, 889, 1016, 1041, 1100, 1221, 1223, 1226, 1242], "float4": [256, 309, 752, 844, 883, 1266], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 176, 185, 187, 194, 246, 271, 283, 309, 326, 327, 328, 329, 330, 331, 369, 374, 375, 376, 385, 418, 439, 442, 475, 476, 578, 617, 618, 678, 679, 721, 745, 748, 764, 769, 773, 796, 803, 835, 855, 883, 889, 994, 1016, 1224, 1230, 1242], "float_list": 72, "float_precis": [9, 10, 27, 33, 36, 42, 309, 883], "float_scientif": [33, 42, 309, 883], "floatfmt": 11, "floor": [49, 452, 773, 1242, 1261], "floor_a": 1262, "floordiv": [683, 773], "fmt": [11, 216, 309, 465, 724, 773, 814, 883], "fmt_number": [309, 313], "fmt_str_length": [12, 715, 718], "fmt_table_cell_list_len": 13, "fmt_titl": [36, 309], "fn": [709, 710, 723, 747], "foggi": [646, 647, 1182, 1183], "fold": [309, 541, 702, 709, 710, 747], "folder": 149, "follow": [36, 41, 52, 129, 130, 131, 133, 143, 144, 145, 152, 201, 216, 219, 233, 241, 267, 279, 309, 413, 417, 430, 439, 530, 573, 574, 579, 589, 592, 594, 596, 598, 600, 601, 603, 605, 607, 673, 683, 698, 714, 715, 717, 718, 735, 760, 761, 763, 765, 766, 768, 773, 774, 775, 778, 780, 781, 782, 812, 817, 829, 834, 883, 889, 989, 993, 1006, 1016, 1121, 1144, 1146, 1223, 1234, 1236, 1238, 1242, 1243, 1247, 1248, 1249, 1266, 1271], "font": [36, 309], "font_color": [36, 309], "font_siz": [36, 309], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 173, 176, 177, 178, 182, 183, 184, 185, 186, 189, 192, 194, 196, 197, 198, 202, 203, 204, 205, 206, 207, 209, 215, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 236, 238, 239, 242, 245, 246, 247, 249, 251, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 273, 274, 275, 280, 281, 282, 287, 309, 370, 384, 386, 413, 456, 462, 465, 484, 535, 537, 539, 540, 541, 542, 543, 544, 545, 576, 585, 625, 628, 630, 632, 634, 635, 639, 649, 651, 653, 655, 656, 657, 658, 659, 666, 669, 677, 695, 705, 706, 707, 722, 726, 727, 728, 731, 732, 736, 738, 740, 741, 743, 744, 746, 751, 754, 758, 762, 763, 769, 773, 791, 796, 797, 801, 802, 803, 808, 814, 815, 816, 828, 832, 835, 836, 849, 850, 854, 857, 883, 888, 889, 938, 957, 989, 1073, 1119, 1127, 1164, 1166, 1168, 1170, 1171, 1185, 1189, 1194, 1195, 1202, 1205, 1242, 1255, 1257, 1258, 1259, 1260, 1263, 1266], "foo1": 1263, "foo11": [194, 309], "foo_": [538, 651, 724], "foo_1": [264, 309], "foo_2": [264, 309], "foo_3_4": 1263, "foo_a": [234, 309], "foo_a_bar_1": 724, "foo_at_1": 1259, "foo_b": [234, 309], "foo_b_bar_2": 724, "foo_bar": [535, 539, 651, 733, 1255], "foo_bar2": [535, 539], "foo_bar_baz": 651, "foo_c_bar_3": 724, "foo_low": [666, 1263], "foo_mean": 1259, "foo_std": 1258, "foo_strip": 655, "foo_strip_end": 656, "foo_strip_start": 657, "foo_sum": [1258, 1259], "foo_titl": 668, "foo_uniqu": 1259, "foo_upp": [669, 1263], "foo_var": 1258, "foobar": [658, 659, 1194, 1195, 1263], "foobarbar": [659, 1195], "foofoobar": [658, 1194], "foral": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "forc": [216, 219, 267, 295, 309, 522, 816, 817, 867, 883, 1101, 1223, 1242], "force_parallel": [216, 309, 816, 817, 883], "form": [33, 42, 116, 118, 119, 120, 122, 138, 139, 147, 213, 243, 277, 309, 570, 773, 883, 1115, 1242, 1263], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 42, 87, 127, 129, 130, 131, 135, 137, 143, 149, 181, 188, 199, 213, 225, 234, 243, 244, 249, 263, 276, 307, 309, 313, 386, 417, 419, 422, 543, 544, 660, 662, 663, 667, 719, 773, 800, 804, 805, 825, 838, 851, 883, 995, 998, 1196, 1198, 1199, 1203, 1241, 1263, 1264], "formula": [36, 309, 435, 773, 1012, 1242], "fortran": [266, 267, 309], "forward": [191, 216, 252, 309, 353, 391, 410, 447, 453, 515, 613, 773, 807, 817, 840, 883, 923, 963, 986, 1024, 1087, 1149, 1242], "forward_fil": [279, 309, 361, 379, 382, 613, 773], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 185, 256, 309, 611, 637, 641, 658, 659, 660, 663, 773, 844, 883, 1145, 1173, 1177, 1194, 1195, 1196, 1199, 1242, 1253, 1268], "four": [270, 309, 1268], "fourth": [480, 773, 1054, 1242], "frac": [438, 440, 441, 619, 773, 1015, 1017, 1018, 1156, 1242], "fraction": [33, 42, 152, 153, 154, 155, 245, 309, 418, 510, 570, 610, 660, 663, 773, 883, 994, 1082, 1115, 1143, 1196, 1199, 1242], "fragment": 1268, "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 173, 174, 180, 213, 214, 217, 219, 226, 230, 233, 242, 243, 244, 256, 271, 277, 278, 309, 752, 791, 792, 799, 826, 829, 844, 852, 883, 889, 945, 1242, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1267, 1271], "frame_data": [1252, 1255], "frameinittyp": [309, 883], "frametyp": [47, 1268], "framework": [234, 276, 309, 851, 883], "freedom": [257, 280, 309, 518, 524, 602, 603, 606, 607, 624, 688, 705, 707, 749, 750, 754, 762, 773, 845, 853, 883, 1138, 1140, 1160, 1232, 1242], "freeli": [752, 844, 883, 889], "freez": [36, 309], "freeze_pan": [36, 309], "frequenc": [279, 309, 687, 773, 1231, 1242], "frequent": [1144, 1146, 1242], "fridai": [201, 309, 391, 419, 422, 701, 812, 883, 963, 995, 998], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 173, 180, 181, 182, 187, 189, 193, 199, 201, 213, 214, 215, 216, 217, 225, 234, 238, 241, 242, 244, 245, 247, 248, 256, 264, 271, 273, 274, 276, 277, 278, 279, 285, 309, 312, 313, 358, 384, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 442, 452, 454, 466, 480, 498, 510, 522, 531, 561, 562, 564, 569, 570, 573, 576, 578, 589, 590, 592, 594, 596, 598, 600, 603, 605, 607, 610, 622, 633, 634, 638, 640, 650, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 685, 697, 698, 701, 702, 713, 714, 715, 716, 717, 718, 719, 733, 748, 752, 759, 760, 761, 769, 772, 773, 791, 799, 800, 801, 812, 816, 817, 825, 832, 834, 836, 837, 844, 849, 851, 852, 857, 858, 883, 889, 928, 957, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1021, 1054, 1070, 1082, 1094, 1110, 1111, 1112, 1115, 1119, 1131, 1143, 1169, 1170, 1174, 1176, 1186, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1203, 1218, 1233, 1242, 1250, 1251, 1252, 1253, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271], "from_arrai": 752, "from_arrow": 117, "from_json": 773, "from_panda": 117, "from_repr": [265, 309, 1220, 1242], "fromkei": [48, 50], "front": [201, 309, 812, 883], "fruit": [262, 309, 586, 631, 654, 661, 773, 1167, 1190, 1197], "fruits_revers": [586, 773], "fsspec": [129, 130, 135, 137, 141, 143, 144, 145, 146, 151], "fsspecfileio": 145, "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 143, 144, 145, 147, 149, 215, 278, 309, 638, 640, 660, 661, 662, 663, 667, 714, 715, 816, 821, 852, 883, 889, 1174, 1176, 1196, 1197, 1198, 1199, 1203, 1242, 1257, 1271], "full_sent": 704, "fulli": [161, 233, 245, 267, 309], "funcnam": [36, 309], "function": [0, 36, 37, 38, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 170, 172, 178, 181, 187, 194, 219, 225, 233, 234, 238, 256, 261, 266, 267, 268, 271, 272, 273, 276, 277, 278, 295, 309, 313, 321, 358, 367, 368, 383, 384, 386, 417, 438, 440, 441, 463, 522, 530, 531, 553, 554, 569, 573, 576, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 619, 680, 681, 682, 691, 695, 706, 708, 709, 710, 722, 723, 725, 727, 728, 731, 734, 735, 738, 740, 743, 745, 747, 749, 750, 754, 758, 762, 764, 769, 773, 785, 789, 795, 800, 821, 825, 829, 832, 844, 848, 851, 852, 859, 867, 883, 887, 928, 936, 941, 956, 957, 993, 1014, 1015, 1017, 1018, 1035, 1094, 1101, 1119, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1146, 1151, 1156, 1217, 1221, 1224, 1226, 1227, 1242, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271], "function_nam": 887, "further": 769, "futur": [37, 38, 54, 170, 180, 250, 261, 309, 795, 799, 839, 883, 1217, 1242], "g": [33, 42, 126, 129, 133, 135, 137, 144, 146, 149, 161, 170, 181, 212, 267, 277, 309, 318, 386, 439, 442, 531, 614, 721, 773, 800, 832, 883, 1016, 1242, 1271], "g1": [448, 689, 773], "g2": [448, 689, 773], "g_1": [619, 773, 1156, 1242], "gag": 26, "galleri": [309, 312, 1242, 1246], "gamma": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "gantt": [830, 883], "gather": [130, 195, 309, 334, 456, 498, 699, 773, 810, 883, 904, 1029, 1070, 1242], "gather_everi": [309, 773, 883, 1242], "gb": [187, 309, 1014, 1242], "gbp": 1271, "gc": [35, 133, 144, 145, 309], "gca": 26, "gcaacgcatata": 26, "gcp": [141, 143, 145, 148], "gdp": [216, 309, 817, 883], "gdp2": [216, 309], "gdp_date": [216, 309], "ge": [773, 1242], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 170, 176, 178, 234, 245, 264, 267, 273, 309, 369, 510, 610, 615, 696, 714, 717, 729, 730, 732, 748, 760, 761, 773, 883, 937, 1082, 1143, 1152, 1218, 1242, 1271], "geq": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "germani": [216, 309], "get": [47, 54, 136, 142, 149, 172, 176, 177, 185, 193, 196, 198, 201, 203, 204, 208, 210, 211, 218, 221, 228, 229, 234, 241, 242, 246, 251, 254, 260, 268, 272, 282, 292, 303, 309, 319, 332, 333, 334, 336, 344, 347, 359, 368, 370, 379, 380, 381, 382, 391, 401, 449, 455, 462, 479, 481, 484, 496, 502, 523, 532, 533, 534, 540, 542, 547, 561, 562, 571, 572, 577, 588, 589, 620, 624, 632, 676, 677, 681, 682, 684, 688, 699, 701, 722, 727, 731, 735, 736, 737, 738, 740, 741, 742, 744, 754, 758, 762, 773, 789, 794, 795, 797, 803, 809, 812, 813, 818, 820, 834, 835, 842, 847, 848, 854, 864, 875, 883, 887, 888, 902, 903, 904, 905, 906, 914, 917, 929, 938, 944, 952, 953, 954, 955, 963, 973, 1011, 1026, 1030, 1034, 1039, 1040, 1052, 1056, 1068, 1074, 1095, 1102, 1104, 1105, 1107, 1109, 1110, 1111, 1116, 1117, 1120, 1130, 1157, 1160, 1168, 1214, 1218, 1224, 1228, 1232, 1242], "get_chunk": 1242, "get_column": [170, 269, 309], "get_column_index": 309, "get_worksheet_by_nam": [36, 309], "gevent": [54, 151, 795, 883], "ghi": [318, 634, 773, 889, 1170], "gil": [531, 773], "git": 52, "github": [132, 309], "give": [146, 147, 216, 225, 274, 276, 309, 401, 452, 480, 582, 683, 687, 773, 785, 825, 849, 851, 883, 973, 1054, 1231, 1242, 1267], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 187, 188, 190, 201, 211, 219, 232, 233, 242, 243, 244, 252, 255, 271, 278, 309, 341, 353, 358, 368, 373, 392, 396, 419, 421, 422, 435, 439, 463, 468, 490, 515, 522, 525, 531, 569, 573, 579, 582, 583, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 613, 634, 635, 644, 645, 660, 663, 670, 673, 682, 721, 722, 731, 734, 735, 748, 749, 750, 773, 805, 812, 821, 829, 840, 843, 852, 867, 883, 888, 889, 911, 923, 928, 946, 964, 968, 995, 997, 998, 1012, 1014, 1016, 1035, 1039, 1053, 1062, 1087, 1094, 1097, 1100, 1101, 1112, 1121, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1145, 1149, 1170, 1171, 1180, 1181, 1196, 1199, 1206, 1230, 1233, 1242, 1250, 1252, 1257, 1259, 1262, 1263, 1268, 1270, 1271], "glimps": [180, 203, 309], "glob": [129, 130, 141, 143, 146, 147, 148], "global": [46, 84, 85, 134, 150, 159, 167, 256, 309, 583, 584, 752, 773, 844, 883, 939, 940, 1125, 1126, 1242, 1251, 1253, 1267], "gmt": [396, 400, 416, 968, 972, 992], "go": [12, 129, 130, 143, 631, 1167], "godfath": 1250, "goe": 12, "gonfruit": 1197, "good": [41, 43, 45, 213, 309, 883, 1262], "goodby": 1, "googl": [133, 144, 145], "gpu": [266, 309, 1221, 1242], "gpu_devic": [266, 309], "gpudevic": [266, 309], "grade": [1054, 1242], "granular": 1268, "grape": 1263, "graph": [53, 131, 217, 309, 794, 814, 857, 883], "graphviz": [217, 309, 841, 883], "great": [309, 313], "great_tabl": [309, 313], "greater": [174, 216, 309, 457, 459, 468, 619, 644, 645, 653, 670, 773, 817, 883, 1039, 1156, 1180, 1181, 1189, 1206, 1242], "greatest": [1258, 1261], "greatli": [135, 146], "green": [46, 84, 85, 295, 687, 773, 867, 1231, 1242], "greenlet": [54, 795, 883], "greet": 1, "grid": [466, 773], "grid_point": [466, 773], "gridlin": [36, 309], "gross": 1250, "group": [9, 27, 41, 45, 130, 173, 200, 201, 214, 230, 232, 234, 241, 244, 277, 279, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 319, 368, 383, 444, 450, 455, 458, 494, 530, 531, 540, 542, 569, 579, 588, 589, 621, 622, 626, 633, 634, 635, 637, 646, 647, 682, 687, 735, 773, 791, 811, 812, 834, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 887, 889, 956, 1066, 1130, 1162, 1169, 1170, 1171, 1173, 1182, 1183, 1231, 1242, 1250, 1258, 1267, 1268], "group_bi": [201, 230, 234, 241, 279, 308, 309, 319, 368, 448, 450, 455, 458, 530, 531, 569, 621, 622, 682, 689, 735, 773, 794, 795, 804, 812, 830, 834, 841, 881, 883, 889], "group_by_dynam": [241, 309, 834, 883], "group_by_partit": [830, 883], "group_col": [448, 689, 773], "group_df": [295, 867], "group_dtyp": [569, 773], "group_index": [633, 1169], "group_to_row": [569, 773], "groupbi": [200, 309, 531, 735, 773], "grow": [281, 309], "grown": [205, 309], "gt": [309, 313, 773, 1242], "gte": [448, 689, 773], "guarante": [41, 45, 129, 130, 172, 180, 202, 272, 274, 309, 367, 368, 461, 681, 682, 773, 789, 799, 848, 849, 883, 936, 1032, 1033, 1227, 1242], "guid": [773, 887, 1271], "gzip": [41, 45, 309, 883], "h": [277, 309, 318, 419, 422, 614, 646, 647, 660, 663, 667, 773, 1182, 1183, 1196, 1199, 1203, 1263, 1264], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 170, 279, 285, 290, 309, 367, 368, 383, 454, 530, 541, 546, 638, 661, 671, 681, 682, 722, 731, 769, 773, 795, 858, 862, 867, 883, 936, 945, 956, 958, 1032, 1174, 1197, 1227, 1242], "half": [271, 309, 417, 438, 439, 440, 441, 773, 993, 1015, 1016, 1017, 1018, 1242], "half_lif": [438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242], "ham": [31, 33, 35, 37, 38, 41, 173, 176, 177, 178, 182, 183, 184, 185, 186, 192, 197, 202, 203, 205, 215, 218, 220, 222, 224, 227, 231, 236, 238, 239, 242, 245, 246, 247, 254, 257, 258, 260, 264, 265, 267, 268, 269, 274, 280, 281, 309, 370, 544, 769, 791, 796, 797, 801, 802, 803, 808, 816, 828, 832, 835, 836, 849, 857, 883, 938, 1257, 1258], "ham_a": [264, 309], "ham_b": [264, 309], "ham_right": [215, 309, 816, 883], "hamburg": 769, "hand": [36, 129, 130, 143, 309, 511, 512, 513, 514, 1083, 1084, 1085, 1086], "handi": [391, 701, 963], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 196, 309, 387, 492, 632, 670, 773, 794, 795, 883, 887, 959, 1064, 1168, 1206, 1242], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 309, 386, 773, 800, 883], "happen": [131, 396, 576, 773, 968, 1119, 1242], "hard": [143, 821, 883], "harder": [201, 309, 812, 883], "hardwar": 1271, "has_head": [129, 130, 134, 143], "has_nul": [773, 1032, 1242], "has_prefix": 654, "has_suffix": 631, "has_two": 1259, "has_valid": 1242, "hash": [202, 309, 773, 1242], "hash_row": 309, "hat": [646, 647, 1182, 1183], "have": [14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 189, 213, 215, 216, 234, 237, 241, 243, 244, 263, 271, 286, 309, 383, 386, 438, 440, 441, 531, 541, 579, 583, 584, 589, 635, 773, 800, 816, 825, 834, 851, 858, 859, 883, 887, 889, 956, 958, 1015, 1017, 1018, 1021, 1032, 1121, 1125, 1126, 1242, 1267, 1269, 1271], "haystack": [634, 1170], "he": 656, "head": [143, 199, 218, 260, 309, 324, 484, 569, 773, 820, 883, 1056, 1214, 1242], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 143, 185, 234, 273, 309, 883], "header_format": [36, 309], "header_nam": [273, 309], "headerless": 143, "heap": [187, 309, 773, 887, 1014, 1242], "heatmap": [36, 309], "height": [36, 126, 159, 184, 309], "hell": [655, 1191], "hello": [1, 20, 655, 656, 657, 889, 1073, 1191, 1192, 1193, 1252, 1255], "hello_": 724, "hello_data": 1255, "hello_world": 1255, "help": [36, 152, 153, 154, 155, 309, 312, 883, 1242, 1246], "helper": [309, 313, 769], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 147, 148, 157, 159, 163, 234, 309, 391, 530, 531, 635, 641, 701, 773, 841, 883, 889, 963, 1177], "hex": [363, 364, 629, 630, 665, 932, 933, 1165, 1166, 1201], "hexadecim": [932, 933], "hi": [1, 1263], "hidden": [36, 309], "hidden_column": [36, 309], "hide": [21, 22, 23, 24, 36, 309], "hide_gridlin": [36, 309], "hide_password": 131, "high": [244, 309, 313, 576, 773, 785, 1119, 1242], "higher": [41, 45, 180, 236, 301, 309, 577, 599, 600, 746, 773, 799, 831, 873, 883, 958, 1120, 1136, 1242], "highest": [309, 313, 579, 686, 705, 773, 883, 1121, 1242], "highli": [773, 887], "hippopotamu": [644, 645, 1180, 1181], "hist": [773, 1242, 1246], "histogram": [1242, 1246], "hit": [790, 883], "hive": [141, 148], "hive_partit": [141, 148], "hive_schema": [141, 148], "hmm": 889, "hold": [253, 267, 309, 1223, 1242], "holidai": [391, 701, 963], "horizont": [20, 55, 92, 194, 205, 221, 223, 228, 259, 277, 309, 692, 694, 703, 704, 709, 710, 712, 720, 723, 737, 739, 742, 747, 757, 857, 883], "host": [52, 129, 135, 137, 146, 148], "hour": [143, 146, 201, 216, 241, 279, 309, 405, 407, 408, 412, 413, 417, 418, 424, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 716, 717, 718, 719, 759, 760, 761, 773, 812, 817, 834, 883, 889, 989, 993, 1000, 1006, 1016, 1242, 1264], "hours_diff": 424, "hous": [271, 309], "how": [11, 35, 36, 47, 55, 92, 132, 141, 143, 148, 184, 215, 216, 234, 277, 278, 309, 342, 387, 416, 466, 491, 492, 569, 582, 601, 660, 663, 701, 716, 763, 773, 802, 816, 852, 857, 883, 887, 912, 959, 992, 1063, 1064, 1137, 1196, 1199, 1242], "howev": [1, 119, 131, 187, 219, 267, 309, 1014, 1242], "hstack": [92, 309], "html": [36, 37, 38, 117, 131, 135, 137, 170, 178, 309], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 178, 309, 633, 635, 841, 883, 1169, 1171], "hut": [646, 647, 1182, 1183], "hvplot": [151, 309, 312, 1242, 1246], "hvplottabularpolar": [309, 1242], "hyperbol": [327, 329, 331, 375, 618, 679, 773, 897, 899, 901, 949, 1155, 1216, 1242], "hyperloglog": [171, 309, 325, 695, 773, 788, 883], "hyphen": [625, 1161], "hypothesi": [157, 159, 162, 163, 1271], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 171, 172, 175, 176, 180, 181, 184, 186, 187, 189, 192, 196, 200, 201, 202, 203, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 225, 226, 230, 232, 233, 234, 239, 241, 242, 243, 244, 245, 248, 249, 250, 252, 254, 255, 256, 257, 260, 261, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 284, 286, 287, 295, 309, 313, 318, 321, 323, 324, 325, 335, 338, 345, 346, 353, 358, 367, 368, 383, 384, 386, 389, 390, 391, 392, 395, 403, 410, 411, 413, 417, 419, 430, 438, 439, 440, 441, 444, 448, 452, 461, 463, 465, 468, 480, 486, 493, 494, 497, 499, 501, 510, 515, 516, 518, 522, 524, 527, 530, 531, 535, 537, 539, 540, 541, 543, 551, 569, 574, 576, 579, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 615, 616, 619, 620, 621, 622, 624, 625, 626, 627, 628, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 655, 656, 657, 660, 661, 662, 663, 665, 667, 670, 674, 681, 682, 687, 688, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 715, 717, 718, 723, 727, 728, 729, 730, 732, 733, 735, 738, 740, 743, 745, 748, 749, 750, 751, 752, 754, 758, 760, 761, 762, 763, 764, 769, 773, 788, 789, 790, 793, 794, 795, 797, 799, 800, 802, 803, 804, 808, 811, 812, 815, 816, 817, 819, 821, 825, 826, 830, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 851, 852, 853, 854, 856, 859, 867, 877, 883, 887, 889, 893, 894, 895, 908, 915, 916, 923, 928, 936, 939, 941, 946, 947, 956, 957, 958, 961, 962, 963, 964, 967, 975, 989, 993, 995, 1006, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1025, 1032, 1033, 1034, 1035, 1039, 1041, 1051, 1053, 1054, 1056, 1058, 1065, 1066, 1069, 1071, 1073, 1082, 1087, 1088, 1094, 1101, 1119, 1121, 1123, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1147, 1149, 1152, 1153, 1156, 1157, 1160, 1161, 1162, 1163, 1164, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1186, 1189, 1191, 1192, 1193, 1196, 1197, 1198, 1199, 1201, 1203, 1206, 1214, 1217, 1221, 1223, 1224, 1226, 1227, 1231, 1232, 1242, 1250, 1251, 1256, 1260, 1263, 1266, 1268, 1269, 1271], "i0e0": 1271, "i16": [1, 50, 399, 414, 432, 614, 773, 889, 990, 1220, 1242, 1271], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 247, 256, 309, 344, 345, 347, 369, 394, 402, 404, 405, 406, 407, 408, 412, 434, 614, 701, 763, 773, 836, 883, 914, 915, 917, 966, 976, 980, 981, 982, 988, 1010, 1100, 1242, 1260, 1264, 1271], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 172, 173, 174, 175, 177, 181, 182, 184, 185, 188, 189, 191, 192, 195, 196, 198, 199, 200, 201, 203, 205, 206, 208, 210, 212, 215, 216, 218, 219, 220, 226, 227, 232, 233, 234, 235, 238, 239, 240, 241, 245, 247, 249, 252, 254, 255, 256, 258, 260, 262, 269, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 299, 302, 303, 309, 318, 320, 324, 334, 339, 340, 342, 343, 348, 350, 351, 352, 353, 354, 356, 359, 361, 367, 368, 373, 379, 380, 381, 382, 383, 384, 387, 388, 401, 421, 423, 424, 425, 426, 427, 428, 429, 439, 442, 444, 445, 447, 448, 449, 450, 452, 453, 455, 456, 458, 462, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 481, 484, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 528, 530, 531, 548, 549, 550, 552, 553, 555, 557, 559, 560, 565, 569, 570, 573, 574, 575, 576, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 610, 612, 613, 614, 615, 616, 620, 621, 622, 638, 646, 647, 661, 665, 670, 671, 673, 674, 675, 676, 677, 681, 682, 683, 684, 686, 689, 696, 699, 702, 703, 704, 709, 710, 711, 712, 713, 716, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 742, 744, 747, 751, 752, 753, 756, 757, 758, 759, 763, 769, 773, 789, 791, 792, 794, 795, 800, 801, 802, 805, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 820, 821, 822, 826, 827, 829, 830, 832, 833, 834, 836, 838, 840, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 855, 858, 859, 860, 861, 863, 864, 865, 867, 868, 871, 874, 875, 883, 889, 891, 892, 895, 913, 918, 920, 922, 923, 924, 926, 929, 936, 946, 947, 952, 953, 954, 955, 956, 957, 973, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1030, 1034, 1036, 1044, 1056, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1095, 1101, 1106, 1112, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1132, 1135, 1139, 1143, 1144, 1146, 1149, 1150, 1152, 1153, 1157, 1158, 1201, 1207, 1212, 1214, 1219, 1227, 1228, 1233, 1242, 1250, 1251, 1253, 1257, 1258, 1259, 1260, 1262, 1265, 1266, 1268, 1269, 1271], "i8": [357, 358, 399, 402, 405, 407, 408, 409, 412, 414, 415, 418, 431, 432, 521, 614, 745, 748, 764, 773, 927, 928, 959, 971, 974, 984, 985, 991, 994, 1007, 1008, 1093, 1128, 1150, 1230, 1242, 1264], "iceberg": [145, 785], "icon": [36, 309], "id": [26, 36, 55, 126, 129, 145, 266, 273, 286, 295, 309, 588, 646, 647, 685, 773, 859, 867, 883, 889, 1130, 1229, 1242, 1268, 1269, 1271], "id_char": 1271, "id_var": [225, 276, 309, 825, 851, 883], "ideal": 125, "ident": [123, 174, 175, 309, 419, 587, 588, 773, 792, 793, 883, 945, 947, 995, 1129, 1130, 1242], "identifi": [123, 131, 225, 232, 274, 276, 287, 309, 825, 849, 851, 883], "idiograph": 889, "idiomat": [769, 797, 803, 835, 854, 867, 883], "idx": [143, 201, 214, 286, 309, 345, 358, 522, 812, 859, 883, 928, 1094, 1173], "idx_lit": 1173, "idx_rx": 1173, "ieee": [683, 773], "if_set": 30, "if_table_exist": [34, 309], "ifnul": 1261, "ignor": [35, 131, 158, 159, 163, 223, 259, 278, 309, 321, 323, 346, 387, 416, 438, 440, 441, 492, 501, 561, 562, 625, 639, 691, 693, 704, 773, 852, 883, 889, 893, 894, 916, 959, 992, 1015, 1017, 1018, 1064, 1073, 1110, 1111, 1161, 1175, 1242], "ignore_error": [129, 130, 139, 143, 147], "ignore_nul": [223, 259, 309, 321, 323, 346, 438, 440, 441, 501, 625, 639, 691, 693, 704, 773, 893, 894, 916, 1015, 1017, 1018, 1073, 1161, 1175, 1242], "ignore_spac": 889, "ijkl": 1263, "ilmsuxu": [626, 633, 634, 637, 646, 647, 1162, 1169, 1170, 1173, 1182, 1183], "imbal": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "imdb_scor": 1250, "immedi": [579, 696, 700, 714, 715, 717, 718, 729, 730, 745, 748, 755, 760, 761, 764, 773, 1121, 1242, 1251], "immut": [267, 309, 1223, 1242], "impact": [201, 309, 812, 883, 1250, 1268], "impl": 145, "implement": [37, 38, 41, 117, 131, 170, 202, 219, 261, 295, 309, 312, 313, 461, 531, 552, 553, 555, 557, 559, 560, 671, 735, 773, 867, 1033, 1101, 1144, 1146, 1217, 1242, 1246], "implic": [386, 773, 800, 883], "implicit": [278, 309, 852, 883], "implicitli": [192, 309, 448, 763, 773, 808, 883, 1268], "implod": [773, 1242, 1259], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 173, 180, 181, 182, 184, 199, 201, 214, 216, 232, 234, 249, 256, 264, 266, 271, 276, 277, 279, 309, 312, 313, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 448, 537, 543, 590, 592, 594, 596, 598, 600, 603, 605, 607, 701, 713, 714, 715, 716, 717, 718, 719, 752, 760, 761, 769, 773, 785, 791, 795, 799, 800, 801, 802, 812, 817, 821, 838, 851, 883, 948, 950, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1042, 1045, 1047, 1048, 1131, 1154, 1215, 1242, 1246, 1251, 1265, 1268, 1271], "improv": [34, 45, 135, 146, 309, 530, 773, 883], "in_plac": [205, 253, 281, 309, 1122, 1151, 1158, 1242], "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 144, 145, 159, 160, 176, 180, 187, 192, 232, 234, 244, 271, 273, 277, 278, 309, 384, 418, 448, 452, 463, 468, 537, 576, 591, 593, 595, 597, 599, 601, 602, 604, 606, 651, 652, 655, 656, 701, 709, 749, 750, 773, 799, 808, 852, 883, 889, 957, 958, 994, 1014, 1025, 1035, 1039, 1119, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1187, 1188, 1191, 1242, 1268], "include_bom": [33, 42, 309, 883], "include_boundari": [201, 309, 812, 883], "include_break": [384, 576, 773, 957, 1119, 1242], "include_breakpoint": [463, 773, 1035, 1242], "include_categor": 889, "include_categori": [463, 773, 1035, 1242], "include_col": 159, "include_head": [33, 36, 42, 130, 273, 309, 883], "include_index": 121, "include_init": 709, "include_kei": [232, 244, 309], "include_nul": [278, 309, 852, 883], "inclus": [201, 241, 309, 468, 589, 592, 594, 596, 598, 600, 603, 605, 607, 651, 652, 696, 714, 715, 717, 718, 729, 730, 760, 761, 773, 812, 834, 883, 1039, 1187, 1188, 1242], "incom": 131, "incompat": 110, "incomplet": [584, 773, 1126, 1242], "incorpor": 1268, "incorrect": [250, 309, 433, 530, 612, 773, 839, 867, 883, 1009, 1147, 1242], "incorrectli": [129, 522], "increas": [36, 47, 129, 134, 140, 141, 148, 309, 383, 588, 773, 956, 1130, 1242], "independ": [53, 54, 156, 159, 163, 271, 309, 794, 795, 804, 830, 841, 883], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 141, 143, 146, 147, 148, 151, 170, 195, 197, 201, 206, 211, 213, 234, 239, 241, 242, 243, 252, 254, 266, 267, 269, 276, 278, 279, 285, 286, 309, 319, 332, 333, 334, 336, 339, 340, 345, 353, 358, 439, 455, 456, 458, 487, 488, 497, 498, 499, 515, 516, 522, 589, 592, 594, 596, 598, 600, 603, 605, 607, 611, 613, 620, 626, 633, 637, 638, 650, 661, 671, 699, 729, 732, 773, 810, 812, 834, 840, 842, 851, 852, 858, 859, 883, 889, 902, 903, 904, 905, 906, 909, 910, 915, 923, 928, 1016, 1028, 1029, 1053, 1059, 1060, 1069, 1070, 1071, 1087, 1088, 1094, 1112, 1144, 1145, 1149, 1157, 1169, 1173, 1174, 1186, 1197, 1242, 1259, 1263], "index_column": [201, 241, 309, 589, 773, 812, 834, 883], "indexord": [266, 267, 309], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 134, 135, 137, 140, 141, 143, 148, 156, 157, 163, 201, 241, 244, 250, 252, 264, 309, 335, 353, 455, 463, 469, 470, 471, 473, 474, 475, 476, 477, 478, 497, 515, 535, 536, 537, 538, 539, 589, 592, 594, 596, 598, 600, 603, 605, 607, 611, 613, 616, 699, 700, 744, 773, 812, 834, 839, 840, 883, 887, 889, 923, 1028, 1035, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1069, 1087, 1144, 1145, 1149, 1153, 1218, 1242, 1271], "indistinguish": [33, 42, 309, 883], "individu": [36, 45, 168, 241, 266, 267, 271, 309, 531, 634, 773, 794, 834, 883, 889, 944, 1170, 1242], "inequ": [563, 773], "inexact": [152, 153, 154, 155], "inf": [156, 159, 163, 331, 384, 463, 470, 473, 576, 683, 773, 901, 950, 957, 1035, 1042, 1045, 1100, 1115, 1119, 1230, 1242, 1265], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 147, 148, 219, 309, 530, 531, 585, 640, 660, 662, 663, 664, 667, 719, 733, 748, 773, 883, 1101, 1127, 1176, 1196, 1198, 1199, 1200, 1203, 1242], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 140, 143, 147, 309, 640, 883, 1176], "inference_length": [664, 1200], "inference_s": [219, 309], "infin": [683, 773], "infinit": [473, 683, 773, 1045, 1242], "influenc": [134, 821, 883], "influxdb": 131, "info": [133, 144, 145, 151, 309, 312, 1242, 1246], "inform": [19, 23, 34, 52, 133, 141, 143, 144, 145, 148, 152, 154, 178, 180, 309, 312, 313, 480, 619, 626, 633, 634, 637, 646, 647, 773, 799, 830, 883, 887, 940, 1054, 1156, 1162, 1169, 1170, 1173, 1182, 1183, 1242, 1246], "inherit": [242, 309, 386, 773, 800, 883], "init": [168, 1250], "initcap": 1261, "initi": [36, 76, 168, 309, 709, 723, 763, 1268], "initialis": [131, 168, 883], "inject": [36, 47, 309], "inlin": [18, 244, 309, 626, 633, 634, 637, 646, 647, 1162, 1169, 1170, 1173, 1182, 1183, 1259], "inner": [56, 72, 158, 215, 278, 309, 346, 357, 388, 501, 521, 531, 582, 680, 752, 773, 816, 852, 883, 916, 927, 960, 1073, 1093, 1101, 1225, 1242, 1257, 1268], "inner_dtyp": [158, 161], "innermost": [158, 161], "innter": 915, "inprocessqueri": [794, 883], "input": [0, 47, 53, 91, 119, 121, 129, 130, 172, 182, 200, 219, 223, 232, 238, 247, 248, 252, 255, 259, 272, 283, 284, 288, 309, 318, 368, 373, 439, 442, 454, 468, 526, 530, 531, 541, 569, 583, 584, 622, 638, 650, 656, 657, 658, 659, 661, 663, 674, 682, 690, 692, 694, 696, 699, 702, 703, 704, 712, 719, 721, 729, 730, 733, 734, 735, 737, 739, 742, 751, 755, 757, 763, 769, 773, 785, 789, 801, 811, 832, 836, 837, 840, 843, 848, 855, 856, 860, 883, 887, 946, 1016, 1039, 1098, 1099, 1101, 1125, 1126, 1149, 1174, 1186, 1197, 1199, 1242, 1262, 1263, 1265], "input_wildcard_expans": [773, 887], "insensit": [627, 634, 636, 646, 647, 648, 889, 1162, 1163, 1170, 1172, 1173, 1182, 1183, 1184], "insensitive_match": [626, 637], "insert": [34, 129, 130, 135, 137, 141, 143, 146, 147, 148, 206, 273, 275, 309, 611, 625, 639, 670, 773, 850, 883, 1145, 1161, 1175, 1206, 1242], "insert_aft": [36, 309], "insert_befor": [36, 309], "insert_column": 309, "insid": [54, 795, 883], "inspect": [773, 883], "instal": [95, 121, 129, 130, 132, 135, 137, 178, 268, 309, 391, 701, 841, 883, 963, 1224, 1242], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 159, 163, 168, 173, 189, 194, 309, 541, 709, 723, 769, 791, 821, 858, 859, 883, 1021, 1242], "instanti": [34, 36, 131, 161, 247, 266, 283, 309, 836, 855, 883, 888, 1221, 1242], "instantiat": [265, 309, 1220, 1242], "instantli": [54, 795, 883], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 149, 156, 157, 158, 159, 163, 171, 172, 199, 212, 213, 216, 219, 230, 232, 242, 243, 244, 247, 248, 249, 252, 266, 267, 268, 272, 284, 285, 309, 312, 313, 334, 353, 368, 369, 384, 398, 439, 442, 452, 515, 530, 543, 576, 583, 613, 625, 632, 642, 643, 646, 647, 655, 656, 657, 658, 659, 670, 682, 689, 696, 698, 700, 706, 714, 715, 717, 718, 719, 729, 730, 745, 748, 752, 755, 760, 761, 764, 773, 788, 789, 795, 804, 836, 837, 838, 840, 848, 856, 857, 858, 883, 889, 904, 923, 932, 937, 957, 970, 978, 979, 1016, 1032, 1087, 1119, 1125, 1144, 1146, 1149, 1158, 1161, 1168, 1178, 1179, 1182, 1183, 1191, 1192, 1193, 1206, 1223, 1224, 1242, 1246, 1250, 1251, 1255, 1268, 1269], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 172, 174, 180, 187, 190, 191, 195, 197, 199, 202, 203, 204, 206, 211, 213, 214, 216, 218, 219, 229, 230, 239, 241, 242, 245, 251, 252, 254, 257, 260, 265, 269, 272, 277, 280, 282, 285, 286, 292, 303, 309, 318, 341, 345, 353, 355, 358, 360, 361, 367, 368, 383, 387, 391, 438, 440, 441, 445, 446, 447, 453, 455, 456, 458, 461, 462, 463, 484, 490, 492, 497, 498, 499, 500, 510, 515, 516, 518, 520, 521, 522, 524, 568, 570, 573, 574, 576, 579, 582, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 615, 620, 624, 633, 638, 640, 644, 645, 646, 650, 652, 653, 661, 664, 665, 670, 677, 681, 682, 688, 690, 696, 705, 707, 713, 716, 719, 725, 727, 729, 730, 744, 745, 748, 749, 750, 754, 755, 758, 759, 762, 764, 773, 789, 792, 799, 806, 807, 810, 813, 817, 820, 830, 840, 842, 845, 847, 848, 853, 854, 858, 859, 864, 875, 883, 888, 889, 902, 903, 911, 915, 923, 925, 928, 930, 936, 937, 944, 945, 956, 959, 960, 963, 1014, 1015, 1017, 1018, 1022, 1023, 1024, 1028, 1029, 1033, 1034, 1035, 1053, 1055, 1056, 1062, 1064, 1069, 1070, 1071, 1072, 1082, 1087, 1088, 1090, 1092, 1093, 1094, 1096, 1107, 1108, 1110, 1111, 1112, 1114, 1115, 1118, 1119, 1121, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1149, 1152, 1157, 1160, 1169, 1174, 1176, 1180, 1181, 1182, 1186, 1188, 1189, 1197, 1200, 1201, 1206, 1213, 1214, 1220, 1227, 1232, 1242, 1253, 1256, 1268, 1271], "int16": [1, 50, 271, 309, 381, 382, 414, 676, 773, 889, 954, 955, 990, 1213, 1220, 1242], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 201, 214, 241, 266, 309, 344, 345, 347, 369, 394, 404, 405, 406, 407, 412, 434, 439, 589, 680, 748, 773, 812, 834, 883, 889, 911, 914, 915, 917, 966, 976, 980, 981, 982, 988, 1010, 1016, 1100, 1225, 1226, 1242], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 176, 185, 194, 201, 233, 241, 246, 247, 261, 268, 309, 339, 340, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 381, 382, 423, 424, 425, 426, 427, 428, 429, 433, 439, 442, 530, 531, 554, 556, 558, 573, 581, 589, 640, 665, 676, 680, 696, 721, 729, 730, 733, 748, 755, 769, 773, 796, 803, 812, 829, 834, 835, 836, 883, 889, 909, 910, 912, 913, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 930, 954, 955, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1016, 1101, 1123, 1201, 1213, 1223, 1224, 1225, 1226, 1242], "int64arrai": [1217, 1242], "int8": [1, 50, 76, 194, 309, 357, 358, 381, 382, 399, 402, 408, 409, 415, 418, 431, 432, 521, 676, 745, 748, 764, 773, 888, 927, 928, 954, 955, 959, 971, 974, 984, 985, 991, 994, 1007, 1008, 1093, 1128, 1213, 1223, 1230, 1242], "int_rang": [201, 277, 286, 295, 309, 696, 732, 812, 821, 859, 867, 883], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 184, 201, 241, 264, 267, 309, 322, 372, 418, 451, 452, 568, 574, 576, 581, 588, 589, 601, 638, 661, 665, 690, 696, 725, 729, 730, 748, 773, 802, 812, 834, 883, 889, 943, 994, 1027, 1119, 1123, 1130, 1137, 1144, 1174, 1197, 1201, 1223, 1242, 1262, 1268, 1271], "integer_list": 72, "integr": [36, 271, 309, 1271], "intend": [1, 152, 153, 154, 155, 670, 1206], "intens": [219, 295, 309, 569, 773, 1101, 1242], "interact": [159, 163, 180, 309, 799, 883], "interchang": [117, 170], "interest": [130, 419, 422, 995, 998], "interfac": [0, 106, 107, 785, 1268], "interleav": 1263, "intermedi": [207, 309, 815, 883, 1271], "intern": [37, 38, 131, 150, 213, 261, 309, 452, 773, 1217, 1242, 1251], "interpol": [180, 236, 301, 309, 447, 467, 534, 577, 599, 600, 746, 773, 799, 831, 873, 883, 958, 1038, 1120, 1136, 1242], "interpolate_bi": [773, 1242], "interpolationmethod": [466, 773, 1037, 1242], "interpret": [120, 122, 129, 130, 143, 309, 883], "intersect": [36, 309, 512, 889, 1084, 1267], "interv": [201, 241, 279, 309, 384, 417, 430, 463, 468, 576, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 834, 883, 957, 971, 973, 974, 980, 982, 984, 985, 988, 990, 991, 993, 997, 1006, 1007, 1035, 1039, 1119, 1242], "intoexpr": [172, 200, 201, 241, 247, 248, 252, 255, 272, 283, 284, 288, 309, 324, 342, 362, 365, 366, 368, 391, 439, 445, 463, 467, 468, 491, 511, 512, 513, 514, 569, 583, 584, 592, 594, 596, 598, 600, 603, 605, 607, 611, 613, 622, 627, 636, 648, 651, 652, 653, 658, 659, 674, 682, 692, 694, 699, 702, 703, 704, 705, 707, 709, 712, 716, 723, 737, 739, 742, 748, 751, 755, 757, 773, 789, 811, 812, 834, 836, 837, 840, 843, 848, 855, 856, 860, 883, 887, 912, 931, 934, 935, 963, 1016, 1022, 1038, 1039, 1063, 1125, 1126, 1145, 1149, 1187, 1188, 1189, 1194, 1195, 1242], "intoexprcolumn": [192, 309, 341, 345, 346, 353, 367, 368, 373, 417, 445, 448, 490, 498, 501, 510, 515, 570, 574, 610, 613, 633, 638, 641, 650, 655, 656, 657, 661, 665, 670, 681, 682, 696, 701, 714, 715, 717, 718, 729, 730, 760, 761, 763, 773, 808, 840, 883, 911, 915, 916, 923, 946, 993, 1022, 1062, 1070, 1073, 1082, 1087, 1115, 1169, 1174, 1177, 1186, 1191, 1192, 1193, 1197, 1206, 1242], "introduc": [46, 85, 660, 662, 663, 1196, 1198, 1199], "introduct": 1267, "intuit": [452, 773, 889], "invalid": [33, 42, 107, 129, 130, 143, 309, 369, 640, 641, 665, 683, 773, 883, 932, 937, 1176, 1177, 1201, 1242], "invalid_valu": 932, "invalidoperationerror": [584, 773, 1126, 1242, 1266], "invari": [821, 883], "invers": [326, 327, 328, 329, 330, 331, 773, 896, 897, 898, 899, 900, 901, 1223, 1242, 1265], "invert": 889, "invok": [530, 773], "io": [31, 33, 36, 37, 38, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 181, 249, 309, 386, 454, 543, 773, 800, 838, 883], "iobas": [39, 40, 138, 139, 181, 249, 309, 386, 543, 546, 773, 800, 838, 883], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 309, 785, 883], "ipccompress": [37, 38, 309], "is_between": [773, 1242], "is_dupl": [309, 773, 1242], "is_elementwis": [530, 773, 887], "is_empti": [309, 1242], "is_finit": [773, 1242], "is_first_distinct": [773, 1242], "is_in": [93, 192, 309, 773, 1242], "is_infinit": [773, 1242], "is_last_distinct": [773, 1242], "is_nan": [773, 1242], "is_not_nan": [773, 1242], "is_not_nul": [773, 1242], "is_nul": [184, 309, 773, 802, 883, 1242], "is_numer": 1271, "is_odd": [247, 309, 836, 883, 889], "is_selector": 889, "is_sort": 1242, "is_uniqu": [309, 773, 1242], "isn": 763, "iso": [404, 431, 432, 976, 1007, 1008, 1263], "iso8601": [129, 130, 143], "iso_lang": 1263, "iso_year": 434, "isodow": 1264, "isoweek": 1264, "isoyear": 1264, "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 143, 309, 381, 382, 676, 773, 954, 955, 1213, 1242, 1268], "ital": [36, 309], "item": [13, 55, 130, 199, 242, 245, 309, 341, 345, 346, 387, 444, 490, 492, 499, 501, 510, 610, 653, 773, 911, 915, 916, 959, 1020, 1062, 1064, 1071, 1073, 1082, 1143, 1189, 1242], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 172, 182, 192, 200, 201, 212, 213, 214, 241, 242, 243, 244, 247, 248, 255, 272, 273, 283, 284, 287, 288, 309, 368, 383, 391, 448, 569, 622, 674, 682, 692, 694, 699, 701, 702, 703, 704, 712, 737, 739, 742, 751, 755, 757, 763, 769, 773, 789, 801, 808, 811, 812, 834, 836, 837, 843, 848, 855, 856, 860, 883, 887, 888, 956, 963, 1144, 1242, 1271], "iter_batch": 131, "iter_column": 309, "iter_row": [214, 242, 243, 244, 309], "iter_slic": 309, "its": [123, 151, 187, 267, 309, 395, 417, 430, 439, 587, 622, 763, 773, 797, 803, 854, 883, 940, 967, 993, 1006, 1014, 1016, 1129, 1223, 1242, 1270], "itself": [157, 309, 312, 313, 531, 591, 593, 595, 597, 599, 601, 602, 604, 606, 749, 750, 773, 819, 883, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1242, 1246, 1250, 1251, 1268], "ix": [234, 309], "j": [273, 309], "jan": [817, 883], "jax": [266, 309, 1221, 1242], "jax_enable_x64": [266, 309], "jaxexporttyp": [266, 309], "jjk": 889, "jkl": [634, 1170], "jklmn": 1263, "job": [790, 883], "join": [46, 47, 53, 54, 55, 85, 192, 216, 278, 309, 448, 466, 569, 625, 752, 773, 794, 795, 804, 808, 817, 830, 841, 852, 857, 883, 1161, 1251, 1253, 1259, 1267, 1268], "join_asof": [215, 309, 816, 883], "join_nul": [215, 309, 816, 883], "joinstrategi": [47, 215, 309, 816, 883], "joinvalid": [215, 309, 816, 883], "jpy": 1271, "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 181, 249, 309, 386, 454, 543, 546, 640, 641, 672, 773, 785, 800, 838, 883, 887, 1176, 1177, 1209], "json_path": [641, 1177], "json_path_match": [640, 1176], "json_str": [5, 138, 139], "json_val": [641, 1177], "jsonpath": [640, 641, 1176, 1177], "jst": [123, 889], "jul": [660, 1196, 1263], "juli": [1263, 1264], "just": [36, 121, 131, 143, 225, 276, 309, 825, 851, 883, 889], "k": [172, 244, 272, 273, 309, 367, 368, 378, 480, 681, 682, 773, 789, 848, 883, 936, 951, 1054, 1227, 1242], "k_2": [619, 773, 1156, 1242], "k_3": [619, 773, 1156, 1242], "kanji": 889, "karen": [234, 309], "kathmandu": [969, 970, 996], "kb": [187, 309, 1014, 1242], "kde": [1242, 1246], "keep": [47, 129, 130, 143, 146, 274, 278, 279, 309, 454, 530, 545, 553, 583, 702, 773, 849, 852, 883, 1125, 1242], "kei": [36, 41, 45, 47, 52, 55, 141, 143, 145, 148, 201, 213, 215, 216, 226, 232, 234, 238, 240, 243, 244, 278, 309, 448, 531, 583, 584, 755, 773, 812, 816, 817, 826, 832, 833, 852, 883, 889, 1125, 1126, 1242, 1257], "kept": [274, 309, 849, 883], "keyerror": 16, "keystrok": 769, "keyword": [35, 133, 141, 144, 159, 163, 178, 200, 233, 242, 247, 248, 268, 283, 284, 288, 309, 448, 573, 674, 751, 755, 763, 773, 811, 829, 836, 837, 855, 856, 860, 883, 1224, 1242, 1254], "kleen": [321, 323, 691, 692, 693, 694, 773, 893, 894, 1242], "klmnoopqrstuvwxyz": [214, 309], "knight": 1250, "know": [47, 131, 234, 276, 309, 522, 530, 773, 851, 883], "known": [135, 358, 522, 867, 928, 1094], "kurtosi": [773, 1242], "kuzu_db_conn": 131, "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 178, 192, 233, 268, 309, 573, 773, 808, 829, 883, 887, 1224, 1242, 1254, 1268], "k\u00f9zudb": 131, "l1": 55, "l2": 55, "label": [201, 266, 271, 309, 313, 384, 576, 590, 591, 593, 595, 597, 599, 602, 604, 606, 773, 812, 830, 883, 957, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1242], "label_column": [271, 309], "lag": [252, 309, 353, 515, 613, 703, 773, 840, 883, 923, 1087, 1149, 1242], "lake": [35, 133, 144, 309, 785], "lambda": [143, 194, 219, 233, 234, 238, 295, 309, 358, 438, 439, 440, 441, 522, 530, 531, 553, 554, 709, 710, 723, 734, 735, 747, 773, 821, 829, 832, 867, 883, 928, 1015, 1016, 1017, 1018, 1094, 1101, 1242], "land": [391, 963], "languag": [143, 201, 216, 241, 279, 309, 413, 417, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006, 1016, 1242], "larg": [10, 11, 14, 47, 131, 134, 140], "large_str": [214, 261, 268, 309], "larger": [10, 42, 43, 44, 45, 53, 54, 452, 705, 773, 794, 795, 883], "largest": [172, 272, 309, 368, 681, 682, 773, 789, 848, 883, 1227, 1242], "last": [35, 143, 146, 152, 153, 154, 155, 203, 216, 218, 234, 244, 255, 260, 267, 274, 303, 309, 334, 345, 354, 383, 399, 410, 414, 431, 474, 499, 517, 520, 522, 552, 553, 555, 557, 559, 560, 584, 621, 622, 638, 653, 661, 677, 699, 758, 769, 773, 817, 843, 847, 849, 875, 883, 889, 904, 915, 924, 956, 971, 986, 990, 1007, 1034, 1046, 1056, 1071, 1089, 1092, 1126, 1158, 1174, 1189, 1197, 1214, 1223, 1242, 1261, 1263], "last_column": [36, 309], "later": [216, 249, 309, 543, 838, 883], "latest": [117, 133, 144, 170, 416, 453, 541, 660, 663, 716, 773, 992, 1196, 1199], "latt": 889, "latter": [36, 189, 309, 1021, 1242], "lazi": [1, 55, 143, 159, 216, 233, 234, 256, 309, 531, 725, 745, 748, 764, 773, 799, 816, 817, 857, 860, 861, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 883, 889, 1250, 1251, 1252, 1253, 1254, 1256, 1268, 1271], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 795, 883], "lazy_fram": [53, 54], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 176, 181, 217, 233, 234, 249, 256, 309, 386, 448, 522, 543, 752, 773, 785, 881, 882, 889, 1250, 1251, 1254, 1256, 1268, 1269, 1271], "lazygroupbi": [811, 812, 834, 883], "lbl": [266, 271, 309], "ldf": [1, 860, 861, 863, 865, 868, 869, 870, 871, 872, 873, 874], "ldot": [439, 773, 1016, 1242], "le": [631, 773, 1242], "lead": [14, 41, 123, 149, 223, 250, 252, 259, 309, 353, 455, 458, 515, 530, 531, 612, 613, 655, 657, 705, 773, 821, 839, 840, 867, 883, 923, 1087, 1101, 1147, 1149, 1191, 1193, 1242], "leap": [403, 413, 975, 989], "leap_year": 403, "learn": [271, 309], "least": [97, 234, 309, 570, 633, 635, 773, 1115, 1169, 1171, 1242, 1261], "leav": [6, 225, 276, 309, 522, 825, 851, 883], "left": [15, 16, 36, 47, 152, 153, 154, 155, 201, 215, 216, 241, 278, 309, 384, 438, 440, 441, 466, 468, 576, 589, 592, 594, 596, 598, 600, 603, 605, 607, 611, 680, 702, 709, 710, 714, 715, 717, 718, 723, 747, 760, 761, 763, 773, 812, 816, 817, 834, 852, 883, 957, 1015, 1017, 1018, 1039, 1119, 1145, 1225, 1242, 1253, 1257, 1261], "left_clos": [384, 576, 773, 957, 1119, 1242], "left_on": [215, 216, 278, 309, 816, 817, 852, 883], "leftmost": [611, 773, 1145, 1242, 1263], "len": [12, 36, 159, 163, 176, 214, 234, 286, 290, 295, 309, 377, 531, 540, 542, 587, 706, 729, 773, 796, 854, 859, 862, 867, 883, 888, 1129, 1242], "len_byt": [12, 643, 1179], "len_char": [642, 1178], "length": [55, 56, 72, 134, 140, 143, 157, 161, 199, 201, 241, 254, 309, 312, 383, 417, 430, 516, 522, 541, 583, 584, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 620, 638, 642, 643, 644, 645, 650, 661, 670, 745, 748, 749, 750, 764, 773, 812, 830, 834, 842, 883, 887, 944, 956, 967, 993, 1006, 1088, 1094, 1112, 1125, 1126, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1157, 1174, 1178, 1179, 1180, 1181, 1186, 1197, 1206, 1242, 1259, 1261], "leq": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "less": [143, 216, 309, 452, 482, 529, 530, 653, 773, 817, 883, 1189, 1271], "letter": [188, 292, 303, 309, 442, 627, 634, 636, 648, 721, 773, 805, 864, 875, 883, 889, 1163, 1170, 1172, 1184, 1263], "level": [10, 36, 41, 45, 126, 143, 146, 147, 148, 194, 219, 230, 256, 309, 313, 448, 773, 785, 813, 820, 844, 883, 1268], "lexic": [59, 889, 941], "lf": [42, 43, 44, 45, 50, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 862, 866, 883, 1258, 1268, 1271], "lf1": [752, 844, 883, 1254, 1256, 1269], "lf2": [752, 844, 883, 1254, 1256, 1269], "lf3": [883, 1254], "lf4": [883, 1254], "lf5": 883, "lf6": 883, "lf_other": [857, 883], "lib": [773, 1217, 1242], "librari": [1, 99, 131, 134, 530, 773, 887, 1271], "life": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "lifetim": [168, 784, 1256], "light": [36, 309], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 201, 208, 210, 215, 244, 249, 266, 267, 309, 386, 392, 454, 494, 530, 545, 579, 633, 656, 657, 687, 769, 773, 790, 795, 800, 812, 883, 887, 964, 1066, 1121, 1169, 1231, 1242], "limit": [10, 11, 45, 131, 132, 165, 191, 309, 361, 447, 453, 773, 807, 813, 883, 1024, 1242, 1259, 1267], "line": [10, 20, 36, 129, 130, 134, 143, 199, 208, 210, 309, 312, 633, 1169], "line_termin": [33, 42, 309, 883], "linear": [180, 207, 236, 301, 309, 466, 467, 489, 534, 577, 599, 600, 703, 704, 746, 773, 799, 815, 831, 873, 883, 958, 1037, 1038, 1061, 1120, 1136, 1242], "lineitem": [125, 130, 132], "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 177, 182, 185, 187, 188, 192, 198, 200, 201, 205, 213, 229, 232, 241, 242, 243, 244, 247, 255, 262, 263, 271, 273, 274, 275, 277, 283, 288, 289, 309, 319, 346, 357, 358, 359, 384, 391, 444, 450, 455, 464, 472, 530, 531, 541, 542, 569, 576, 582, 585, 590, 591, 593, 595, 597, 599, 602, 604, 606, 621, 622, 632, 634, 636, 651, 671, 673, 680, 699, 701, 703, 715, 718, 720, 728, 730, 733, 735, 753, 755, 761, 769, 773, 797, 803, 805, 808, 811, 812, 836, 843, 849, 850, 855, 857, 860, 861, 883, 888, 889, 916, 927, 928, 929, 944, 957, 963, 1014, 1020, 1025, 1028, 1030, 1035, 1036, 1044, 1101, 1119, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1163, 1168, 1170, 1172, 1184, 1187, 1222, 1225, 1242, 1250, 1255, 1259, 1260, 1270, 1271], "list_of_seri": 735, "lit": [1, 320, 362, 468, 552, 637, 703, 709, 723, 745, 748, 764, 773, 1024, 1242], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 247, 248, 252, 278, 283, 284, 309, 320, 362, 373, 395, 436, 437, 445, 452, 457, 459, 468, 482, 529, 548, 550, 563, 564, 574, 583, 584, 626, 628, 637, 646, 647, 674, 675, 683, 692, 694, 696, 702, 703, 704, 712, 713, 716, 729, 733, 737, 739, 742, 751, 755, 757, 759, 773, 807, 836, 837, 840, 852, 855, 856, 883, 889, 931, 946, 967, 1022, 1039, 1125, 1126, 1144, 1146, 1149, 1162, 1164, 1173, 1182, 1183, 1242, 1263], "littl": [243, 309], "lmn": 889, "ln": [438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242, 1261], "ln_a": 1262, "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 309, 773, 785, 813, 820, 883, 887, 1271], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 134, "load_workbook": 134, "loader": [271, 309], "lobster": [637, 1173], "loc": [309, 313], "local": [4, 35, 131, 133, 144, 145, 148, 309, 430, 571, 572, 773, 939, 940, 969, 970, 993, 996, 1006, 1116, 1117, 1242, 1251], "localhost": 131, "localis": [417, 430, 1006], "locat": [36, 189, 239, 269, 275, 309, 611, 773, 850, 883, 1021, 1028, 1144, 1145, 1242], "lock": 165, "log": [29, 49, 368, 435, 527, 550, 574, 682, 773, 1012, 1242, 1261], "log10": [773, 1242, 1261], "log10_a": 1262, "log16_a": 1262, "log1p": [773, 1242, 1261], "log1p_a": 1262, "log2": 1261, "logarithm": [525, 526, 527, 773, 1097, 1098, 1099, 1242, 1262], "logic": [55, 219, 295, 309, 312, 313, 321, 323, 386, 531, 680, 691, 692, 693, 694, 735, 773, 800, 804, 816, 838, 867, 883, 893, 894, 1101, 1223, 1225, 1242, 1246], "london": [396, 400, 416, 968, 972, 992], "london_timezon": [416, 992], "london_to_amsterdam": [416, 992], "long": [188, 225, 234, 276, 277, 309, 805, 825, 851, 883], "longer": [129, 130, 143], "longest": 522, "look": [10, 201, 309, 362, 522, 812, 883, 931], "lookup": 769, "loop": [531, 773], "lose": [393, 965], "lossi": [129, 130, 143], "love": [627, 648, 1163, 1184], "low": [17, 131, 576, 773, 1119, 1242], "low_memori": [129, 130, 141, 143, 147, 148], "lower": [143, 180, 201, 236, 301, 309, 373, 468, 528, 553, 577, 581, 599, 600, 696, 714, 715, 717, 718, 746, 760, 761, 773, 799, 812, 831, 873, 883, 946, 958, 1039, 1100, 1120, 1123, 1136, 1230, 1242, 1259, 1261], "lower_bound": [201, 309, 373, 468, 773, 812, 883, 946, 1039, 1230, 1242], "lowercas": [559, 666, 1202, 1263], "lowest": [528, 773], "lru_cach": [219, 309, 531, 773, 1101, 1242], "lst": 158, "lt": [448, 689, 773, 1242], "ltrim": 1261, "lyric": [627, 648, 1163, 1184], "lz4": [37, 38, 41, 43, 45, 309, 883], "lzo": [41, 45, 309, 883], "m": [62, 64, 215, 309, 392, 393, 395, 400, 401, 419, 421, 422, 433, 633, 660, 662, 663, 667, 716, 717, 718, 719, 725, 816, 883, 889, 964, 965, 967, 972, 973, 995, 997, 998, 1009, 1169, 1196, 1198, 1199, 1203, 1254, 1263, 1264], "m_2": [619, 773, 1156, 1242], "m_3": [619, 773, 1156, 1242], "m_i": [619, 773, 1156, 1242], "machin": 1271, "maco": 151, "made": [36, 131, 309], "mai": [1, 35, 37, 38, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 129, 130, 131, 133, 135, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 180, 181, 187, 189, 201, 216, 219, 241, 249, 256, 261, 266, 268, 271, 277, 278, 279, 309, 313, 383, 384, 386, 391, 392, 393, 404, 413, 417, 419, 422, 430, 442, 463, 497, 522, 530, 531, 540, 543, 576, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 636, 640, 642, 701, 709, 710, 714, 715, 717, 718, 723, 747, 749, 750, 760, 761, 773, 794, 795, 799, 800, 804, 812, 817, 821, 834, 838, 844, 852, 858, 859, 867, 883, 940, 941, 956, 957, 958, 963, 964, 965, 976, 989, 993, 995, 998, 1006, 1014, 1021, 1035, 1069, 1101, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1172, 1176, 1178, 1217, 1221, 1224, 1226, 1242, 1271], "main": [151, 795, 883], "maintain": [42, 43, 44, 45, 255, 309, 359, 523, 611, 622, 684, 699, 773, 799, 843, 883, 929, 1095, 1145, 1228, 1242], "maintain_ord": [42, 43, 44, 45, 200, 232, 234, 255, 274, 279, 289, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 319, 359, 368, 455, 458, 523, 531, 622, 682, 684, 699, 773, 795, 804, 811, 830, 841, 843, 849, 861, 863, 865, 868, 869, 870, 871, 872, 873, 874, 883, 929, 1095, 1228, 1242], "major": [134, 266, 309], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 146, 226, 230, 237, 267, 279, 309, 440, 441, 463, 559, 560, 569, 582, 652, 773, 826, 883, 887, 1017, 1018, 1035, 1188, 1223, 1242], "man": [649, 1185], "manag": [46, 84, 85, 784, 785, 1256, 1268], "mandatori": [36, 309], "mango": [631, 654, 1167, 1190], "mani": [131, 132, 189, 309, 636, 648, 1021, 1172, 1184, 1242], "manner": 131, "many_to_mani": [215, 309, 816, 883], "many_to_on": [215, 309, 816, 883], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 173, 176, 193, 213, 219, 238, 242, 243, 244, 246, 262, 309, 320, 417, 430, 530, 531, 552, 554, 555, 557, 559, 560, 583, 584, 687, 734, 773, 791, 832, 835, 883, 888, 889, 958, 993, 1006, 1101, 1125, 1126, 1231, 1242, 1251, 1253, 1254, 1268], "map_": 103, "map_batch": [773, 883], "map_el": [94, 219, 309, 530, 690, 773, 1242], "map_row": 309, "map_to_scalar": [530, 773], "mapelementsstrategi": [531, 773], "mapping_strategi": [569, 773], "march": [419, 422, 995, 998], "mariadb": 132, "mark": [126, 369, 773, 937, 1242], "markdown": 20, "marker": [36, 309], "mask": [208, 210, 309, 363, 469, 471, 474, 479, 571, 572, 626, 629, 637, 773, 932, 1025, 1032, 1039, 1040, 1043, 1046, 1052, 1116, 1117, 1146, 1162, 1165, 1173, 1233, 1242], "mass": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "massag": [225, 276, 309, 825, 851, 883], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 131, 138, 139, 147, 152, 153, 154, 155, 173, 191, 215, 216, 242, 278, 309, 537, 538, 583, 584, 601, 626, 627, 628, 631, 633, 634, 636, 637, 640, 641, 646, 647, 648, 654, 660, 662, 663, 763, 769, 773, 791, 807, 816, 817, 852, 883, 889, 1013, 1125, 1126, 1137, 1162, 1163, 1164, 1167, 1169, 1170, 1172, 1173, 1176, 1177, 1182, 1183, 1184, 1190, 1196, 1198, 1199, 1242, 1263], "matches_overlap": 636, "matches_supertyp": [191, 309, 807, 883], "materi": [219, 244, 295, 309, 794, 830, 867, 877, 883, 889, 1101, 1242], "materialis": [213, 214, 242, 243, 309], "math": [1, 10, 51, 234, 309, 385, 773, 948, 950, 1154, 1215, 1242, 1261, 1265, 1267], "mathemat": [683, 720, 773, 1261], "mathshortcut": [1, 51], "matplotlib": [151, 830, 841, 883], "matter": [201, 213, 241, 243, 244, 263, 309, 589, 656, 657, 773, 812, 834, 883], "max": [25, 36, 41, 45, 126, 180, 191, 200, 221, 234, 241, 309, 313, 379, 447, 522, 530, 569, 579, 583, 584, 589, 591, 592, 612, 653, 737, 753, 773, 799, 807, 811, 834, 883, 952, 958, 1024, 1094, 1121, 1132, 1147, 1189, 1242, 1250, 1259, 1261], "max_a": [241, 309, 589, 773, 834, 883], "max_binary_s": 131, "max_col": [157, 159], "max_colname_length": [199, 309], "max_color": [36, 309], "max_data_s": 163, "max_elem": 1259, "max_horizont": [309, 736], "max_items_per_column": [199, 309], "max_level": 126, "max_siz": [158, 159, 161, 163, 1271], "max_text_s": 131, "max_valu": 1271, "max_width": [522, 1094], "maxim": [296, 332, 773, 868, 902, 1242], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 140, 143, 147, 149, 157, 158, 159, 161, 163, 199, 201, 220, 221, 309, 339, 487, 532, 561, 571, 579, 638, 640, 643, 650, 661, 736, 737, 773, 812, 822, 883, 909, 977, 1059, 1102, 1110, 1116, 1121, 1174, 1176, 1179, 1186, 1197, 1242, 1258], "mb": [187, 309, 1014, 1242], "me": [627, 648, 1163, 1184], "mean": [41, 45, 129, 130, 135, 141, 143, 180, 191, 200, 201, 216, 223, 234, 241, 279, 288, 309, 413, 417, 430, 444, 447, 452, 589, 592, 593, 594, 596, 598, 600, 603, 605, 607, 619, 625, 633, 639, 714, 715, 717, 718, 719, 739, 760, 761, 763, 773, 799, 807, 811, 812, 817, 821, 834, 860, 883, 958, 989, 993, 1006, 1020, 1024, 1032, 1133, 1156, 1161, 1169, 1175, 1242, 1258, 1259], "mean_horizont": [309, 738], "measur": [225, 276, 309, 313, 825, 851, 883], "measure_a": [309, 313], "measure_b": [309, 313], "median": [180, 234, 309, 447, 595, 596, 773, 799, 857, 883, 958, 1134, 1242, 1261], "mediat": 1268, "medium": [36, 309], "megan": [226, 309, 826, 883], "melt": [276, 309, 851, 883], "member": [201, 309, 812, 883, 1044, 1242], "membership": [341, 490, 911, 1062], "memori": [14, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 141, 143, 146, 147, 148, 170, 189, 219, 243, 244, 253, 267, 295, 309, 569, 580, 614, 773, 794, 795, 883, 1021, 1101, 1122, 1150, 1151, 1223, 1242], "memory_map": [135, 141, 146], "merg": [35, 215, 216, 226, 309, 816, 817, 826, 883], "merge_sort": [309, 883], "messi": [633, 635, 1169, 1171], "met": 763, "meta": [386, 773], "metadata": [0, 145, 785], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 176, 180, 181, 184, 189, 196, 200, 207, 213, 219, 230, 236, 242, 243, 244, 252, 274, 283, 290, 295, 301, 309, 318, 321, 322, 353, 373, 386, 419, 422, 436, 437, 445, 452, 454, 457, 459, 466, 482, 515, 529, 531, 546, 548, 550, 552, 553, 555, 557, 559, 560, 563, 564, 565, 568, 574, 577, 579, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 613, 656, 657, 658, 659, 664, 670, 675, 683, 685, 690, 705, 735, 746, 765, 766, 768, 769, 773, 774, 775, 778, 779, 780, 781, 782, 785, 795, 799, 800, 802, 815, 831, 840, 849, 855, 862, 867, 873, 883, 888, 895, 923, 946, 958, 995, 998, 1021, 1022, 1037, 1087, 1101, 1120, 1121, 1136, 1149, 1200, 1206, 1225, 1234, 1236, 1238, 1242, 1243, 1247, 1248, 1249, 1251, 1255], "metric": 131, "micro": [418, 994], "microsecond": [62, 64, 201, 213, 216, 241, 243, 244, 263, 279, 309, 413, 417, 425, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 716, 717, 718, 719, 759, 760, 761, 773, 812, 817, 830, 834, 883, 889, 989, 993, 1001, 1006, 1016, 1242, 1264], "microsoft": [36, 309], "mid_color": [36, 309], "midnight": 77, "midpoint": [180, 236, 301, 309, 577, 599, 600, 746, 773, 799, 831, 873, 883, 958, 1120, 1136, 1242], "might": [37, 38, 129, 130, 143, 165, 234, 261, 267, 276, 309, 531, 685, 773, 843, 851, 883, 1217, 1242], "millennia": 1264, "millennium": 1264, "milli": [418, 994], "millisecond": [201, 216, 241, 279, 309, 402, 408, 413, 417, 426, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 889, 989, 993, 1002, 1006, 1016, 1242, 1264], "milliseconds_diff": [425, 426, 428], "mimic": 703, "min": [36, 41, 45, 180, 191, 228, 234, 241, 309, 380, 447, 569, 579, 589, 597, 598, 742, 751, 773, 799, 807, 834, 883, 887, 953, 958, 1024, 1121, 1135, 1242, 1259, 1261, 1264, 1271], "min_a": [241, 309, 589, 773, 834, 883], "min_col": [157, 159], "min_color": [36, 309], "min_elem": 1259, "min_horizont": [309, 741, 751], "min_period": [383, 438, 440, 441, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 749, 750, 773, 956, 1015, 1017, 1018, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1242], "min_siz": [158, 159, 161, 163, 1271], "min_valu": 1271, "mincol": 157, "minim": [299, 333, 340, 488, 614, 622, 773, 871, 903, 910, 1060, 1105, 1150, 1242], "minimum": [41, 45, 157, 158, 159, 161, 163, 194, 227, 228, 309, 438, 440, 441, 547, 562, 572, 579, 741, 742, 773, 827, 883, 983, 1015, 1017, 1018, 1111, 1117, 1121, 1242, 1258, 1271], "minu": [413, 565, 773, 989], "minut": [201, 216, 241, 279, 309, 402, 405, 407, 412, 413, 417, 418, 427, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 716, 717, 718, 719, 759, 760, 761, 773, 812, 817, 834, 883, 889, 989, 993, 1003, 1006, 1016, 1242, 1264], "minutes_diff": 427, "misc": 1256, "miscellan": 785, "mismatch": [55, 108, 139, 147, 152, 154], "miss": [55, 129, 130, 143, 190, 196, 309, 361, 438, 440, 441, 446, 453, 475, 476, 522, 773, 806, 883, 1015, 1017, 1018, 1023, 1242], "missing_utf8_is_empty_str": [129, 130, 143], "mix": [11, 216, 267, 309, 752, 844, 883, 889, 958, 1242], "mixin": 1, "mlnm": 406, "mm": [36, 309], "mn": 1263, "mno": [16, 20], "mnop": 1263, "mo": 719, "mocha": 889, "mod": [773, 1261], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 234, 256, 309, 634, 745, 748, 764, 773, 794, 795, 804, 883, 1170, 1242, 1250, 1251, 1268], "model": [271, 309], "modifi": [129, 130, 143, 165, 168, 189, 205, 212, 213, 281, 309, 335, 416, 433, 626, 633, 634, 637, 646, 647, 773, 895, 992, 1009, 1021, 1162, 1169, 1170, 1173, 1182, 1183, 1202, 1204, 1205, 1242], "modul": [87, 95, 134, 772, 889, 1271], "modulu": [548, 773], "moment": [41, 178, 309, 480, 619, 773, 1054, 1156, 1242], "mon": 1264, "mondai": [201, 309, 391, 430, 432, 701, 812, 883, 963, 1006, 1008], "monkei": [644, 645, 1180, 1181], "month": [201, 216, 241, 279, 309, 399, 410, 411, 413, 417, 419, 422, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 713, 714, 715, 716, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 971, 986, 987, 989, 993, 995, 998, 1006, 1016, 1242, 1264], "month_nam": [419, 422], "monthbegin": [411, 987], "monthend": [410, 986], "moos": 889, "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 152, 154, 159, 168, 178, 180, 192, 212, 213, 219, 225, 230, 242, 243, 245, 256, 266, 267, 271, 274, 276, 295, 309, 312, 313, 322, 359, 448, 452, 460, 480, 510, 523, 527, 530, 531, 568, 610, 619, 634, 642, 660, 662, 663, 684, 695, 706, 722, 728, 731, 738, 740, 743, 744, 753, 763, 769, 773, 799, 825, 844, 849, 851, 883, 887, 889, 929, 940, 958, 1031, 1054, 1082, 1095, 1101, 1143, 1156, 1170, 1178, 1196, 1198, 1199, 1221, 1223, 1228, 1242, 1246, 1256, 1257, 1266, 1269, 1270, 1271], "more_bi": [232, 255, 309, 622, 773, 843, 883], "more_column": [188, 275, 309, 442, 721, 773, 805, 850, 883, 889], "more_expr": [569, 699, 702, 703, 704, 773], "more_nam": [671, 769], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 267, 309, 541, 549, 570, 584, 653, 773, 1106, 1115, 1126, 1189, 1223, 1242, 1253, 1268], "mostli": [261, 309, 448, 773], "move": [18, 244, 309, 391, 438, 439, 440, 441, 591, 593, 597, 604, 773, 963, 1015, 1016, 1017, 1018, 1132, 1133, 1135, 1139, 1242], "mssql": [34, 309], "much": [219, 277, 295, 309, 383, 497, 531, 642, 643, 735, 773, 867, 956, 1069, 1101, 1178, 1179, 1242], "mul": 773, "multi": [8, 36, 129, 130, 271, 309, 442, 633, 773, 1169], "multi_fram": [36, 309], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 182, 187, 189, 192, 200, 201, 205, 214, 232, 234, 244, 247, 250, 255, 278, 283, 288, 309, 368, 497, 536, 541, 549, 550, 569, 583, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 622, 671, 682, 699, 706, 723, 734, 736, 741, 747, 753, 756, 763, 769, 773, 794, 795, 801, 808, 811, 812, 836, 839, 843, 852, 855, 860, 867, 883, 895, 924, 1014, 1021, 1069, 1089, 1106, 1125, 1127, 1158, 1242, 1254, 1259], "multipli": [590, 591, 593, 595, 597, 599, 602, 604, 606, 674, 773, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1242], "multithread": [255, 309, 622, 699, 773, 843, 883, 924, 1089, 1158, 1242], "must": [36, 65, 117, 118, 133, 144, 145, 149, 180, 188, 201, 216, 226, 234, 241, 242, 309, 384, 522, 576, 583, 584, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 763, 773, 799, 805, 812, 817, 821, 826, 834, 841, 883, 887, 957, 958, 1119, 1125, 1126, 1242], "mutual": [242, 309], "my": [145, 149, 668, 1204], "my_column": 867, "my_column_": [273, 309], "my_column_0": [273, 309], "my_column_1": [273, 309], "my_column_2": [273, 309], "my_custom_aggreg": 735, "my_fil": 135, "my_holidai": [391, 701, 963], "my_larger_than_ram_fil": [42, 43, 44, 45, 883], "my_long_fil": 143, "my_struct": 755, "mydf": 143, "myrol": 132, "mysql": 132, "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 174, 189, 195, 201, 203, 213, 214, 218, 219, 243, 244, 245, 252, 257, 260, 263, 265, 280, 292, 294, 303, 309, 325, 353, 358, 367, 368, 383, 387, 391, 393, 395, 401, 421, 433, 445, 448, 456, 462, 484, 492, 498, 500, 510, 511, 515, 518, 520, 522, 524, 570, 573, 582, 602, 603, 606, 607, 610, 613, 619, 624, 638, 642, 643, 646, 652, 653, 655, 656, 661, 663, 677, 681, 682, 683, 687, 688, 690, 705, 707, 716, 717, 718, 719, 725, 727, 745, 748, 749, 750, 754, 758, 762, 764, 773, 792, 794, 810, 812, 813, 820, 840, 845, 847, 853, 864, 866, 875, 883, 889, 923, 928, 936, 945, 956, 959, 963, 965, 967, 973, 997, 1009, 1021, 1022, 1029, 1034, 1056, 1064, 1070, 1072, 1082, 1083, 1087, 1092, 1094, 1115, 1138, 1140, 1143, 1149, 1156, 1160, 1174, 1178, 1179, 1182, 1188, 1189, 1197, 1199, 1214, 1220, 1227, 1231, 1232, 1242, 1253, 1254, 1260, 1263, 1264, 1266, 1268, 1271], "n0": [358, 522], "n00": [928, 1094], "n01": [928, 1094], "n02": [928, 1094], "n1": [358, 522], "n2": [1, 358], "n3": 1, "n_1": [448, 773], "n_2": [448, 773], "n_3": [448, 773], "n_bar": 1258, "n_bit": 1263, "n_byte": [642, 643, 1263], "n_char": [642, 643, 1263], "n_chunk": [309, 895, 1021, 1122, 1242], "n_elem": 1259, "n_even": 889, "n_field_strategi": [522, 1094], "n_film": 1250, "n_foo_uniqu": 1258, "n_row": [127, 129, 130, 135, 137, 141, 143, 146, 147, 148, 214, 309, 883], "n_thread": [129, 130], "n_uniqu": [309, 325, 773, 1242], "na": [268, 309, 654, 1224, 1242], "naiv": [395, 396, 663, 967, 968, 1199], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 172, 173, 176, 177, 182, 183, 184, 188, 192, 193, 196, 197, 199, 200, 211, 212, 213, 215, 216, 219, 221, 223, 225, 226, 228, 232, 234, 238, 242, 243, 244, 246, 247, 248, 255, 256, 259, 262, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 294, 309, 313, 320, 358, 362, 363, 365, 366, 368, 384, 419, 422, 442, 448, 468, 475, 476, 477, 478, 522, 531, 536, 538, 540, 542, 545, 569, 576, 586, 622, 634, 635, 646, 647, 671, 673, 674, 682, 687, 691, 692, 693, 694, 695, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 711, 712, 721, 722, 727, 728, 731, 736, 737, 738, 739, 740, 741, 742, 743, 746, 749, 750, 751, 752, 754, 755, 756, 757, 758, 762, 763, 769, 773, 789, 791, 796, 797, 801, 802, 805, 808, 811, 816, 817, 825, 826, 832, 835, 836, 837, 843, 844, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 866, 883, 887, 888, 889, 892, 928, 945, 957, 995, 998, 1013, 1094, 1119, 1124, 1169, 1170, 1171, 1182, 1183, 1207, 1210, 1218, 1219, 1224, 1231, 1242, 1251, 1252, 1253, 1254, 1255, 1256, 1267, 1268, 1271], "name_gener": [273, 309], "named_agg": [288, 860], "named_bi": [200, 309, 811, 883], "named_expr": [247, 248, 283, 284, 309, 674, 751, 755, 836, 837, 855, 856, 883], "named_fram": [1254, 1268], "nameless": 121, "namespac": [1, 131, 308, 309, 671, 752, 772, 785, 881, 882, 1242, 1271], "nan": [121, 159, 170, 190, 267, 268, 309, 389, 390, 436, 437, 446, 457, 459, 466, 475, 476, 477, 478, 482, 529, 532, 547, 561, 562, 563, 564, 590, 683, 705, 773, 806, 883, 897, 901, 961, 962, 1023, 1047, 1048, 1110, 1111, 1131, 1223, 1224, 1242, 1271], "nan_as_nul": 170, "nan_max": [773, 1242], "nan_min": [773, 1242], "nan_to_nul": [121, 309, 883, 1242], "nana": 1263, "nanmax": [561, 562, 773, 1110, 1111, 1242], "nanosecond": [77, 201, 216, 241, 279, 309, 413, 417, 418, 428, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 989, 993, 994, 1004, 1006, 1016, 1242, 1264], "nansum": [590, 773, 1131, 1242], "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 213, 219, 243, 244, 263, 267, 295, 309, 531, 735, 752, 773, 779, 844, 867, 883, 1101, 1223, 1242, 1268, 1271], "natur": [527, 773, 1099, 1242, 1257, 1262], "ndarrai": [120, 192, 267, 309, 455, 611, 773, 808, 883, 1028, 1144, 1145, 1223, 1242], "ndjson": [44, 883], "ne": [564, 773, 1242], "ne_miss": [773, 1242], "nearest": [49, 180, 216, 236, 301, 309, 372, 451, 466, 577, 599, 600, 746, 773, 799, 817, 831, 873, 883, 943, 958, 1027, 1037, 1120, 1136, 1242, 1262], "nearest_pow2": 49, "necessari": [33, 34, 42, 46, 85, 134, 267, 309, 883, 1223, 1242], "need": [55, 86, 95, 123, 129, 130, 132, 201, 241, 244, 253, 309, 522, 589, 614, 664, 719, 745, 748, 764, 773, 812, 834, 883, 1150, 1200, 1242, 1271], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 203, 218, 241, 252, 254, 260, 286, 309, 353, 515, 516, 573, 574, 589, 613, 620, 638, 650, 661, 773, 834, 840, 842, 858, 859, 883, 889, 923, 1034, 1056, 1087, 1088, 1149, 1157, 1174, 1186, 1197, 1214, 1242], "negat": [566, 773, 1113, 1242], "neither": [123, 134, 140, 245, 309, 358, 522, 928, 1094], "nest": [46, 123, 126, 160, 161, 187, 309, 785, 1014, 1242, 1268, 1271], "nest_asyncio": 151, "nesting_level": 160, "net": [634, 1170], "netherland": [216, 309], "never": [33, 42, 131, 215, 216, 242, 309, 816, 817, 883], "new": [34, 35, 36, 143, 168, 195, 205, 206, 219, 230, 231, 238, 273, 275, 277, 278, 283, 284, 309, 320, 395, 444, 454, 456, 466, 553, 554, 569, 583, 584, 588, 646, 647, 652, 653, 671, 673, 769, 773, 785, 810, 832, 850, 852, 855, 856, 867, 883, 892, 967, 1020, 1029, 1112, 1124, 1125, 1126, 1130, 1182, 1183, 1188, 1189, 1207, 1210, 1219, 1242, 1268, 1270], "new_column": [129, 130, 134, 143], "new_dat": 413, "new_df": [278, 309, 852, 883], "new_fil": [31, 33, 37, 38, 41, 309], "new_from_index": 1242, "new_id": [273, 309], "new_lf": [852, 883], "new_tabl": 1270, "new_valu": [709, 710, 723, 747], "new_york": 717, "newli": 47, "newlin": [40, 139, 147, 309], "next": [49, 201, 216, 241, 279, 309, 361, 391, 413, 417, 430, 579, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 963, 989, 993, 1006, 1121, 1242], "next_batch": 130, "next_pow2": 49, "nfruit": 661, "nl": [391, 701, 963], "nnel_id": 123, "no1": 889, "no_default": [196, 309, 583, 584, 773, 1125, 1126, 1242], "no_optim": [42, 43, 44, 45, 53, 54, 794, 795, 821, 830, 883], "nodataerror": [129, 130, 134, 140, 143], "nodd": [633, 1169], "node": [790, 794, 814, 821, 825, 830, 832, 851, 883], "nodefault": [196, 309, 583, 584, 773, 1125, 1126, 1242], "non": [4, 33, 35, 36, 42, 47, 62, 63, 121, 150, 172, 179, 214, 225, 241, 247, 248, 252, 272, 273, 276, 278, 283, 284, 309, 367, 368, 373, 377, 378, 391, 416, 468, 522, 530, 531, 570, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 628, 634, 642, 670, 674, 681, 682, 692, 694, 702, 703, 704, 706, 708, 712, 719, 737, 739, 742, 749, 750, 751, 755, 757, 773, 789, 798, 825, 834, 836, 837, 840, 848, 851, 852, 855, 856, 883, 887, 889, 936, 946, 951, 958, 963, 992, 1039, 1094, 1101, 1115, 1125, 1126, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1149, 1164, 1170, 1178, 1206, 1223, 1227, 1242, 1260, 1268], "non_exist": [416, 992], "non_numer": [33, 42, 309, 883], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 54, 56, 59, 62, 63, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 174, 179, 180, 184, 190, 191, 194, 196, 199, 201, 202, 207, 211, 215, 216, 217, 219, 222, 225, 230, 231, 234, 241, 242, 245, 249, 252, 254, 255, 262, 264, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 279, 290, 294, 309, 321, 323, 324, 336, 337, 338, 345, 346, 358, 361, 373, 377, 378, 379, 382, 384, 389, 390, 398, 413, 416, 437, 438, 439, 440, 441, 442, 445, 446, 447, 453, 460, 461, 463, 466, 467, 468, 475, 476, 477, 478, 483, 485, 486, 493, 499, 501, 503, 510, 511, 512, 513, 514, 516, 522, 530, 531, 540, 543, 544, 546, 551, 564, 565, 566, 567, 569, 570, 576, 579, 580, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 613, 614, 615, 616, 620, 621, 625, 626, 628, 630, 631, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 665, 667, 670, 671, 672, 673, 680, 687, 692, 693, 694, 696, 702, 703, 704, 706, 708, 712, 714, 715, 716, 717, 718, 719, 721, 722, 729, 730, 731, 732, 733, 734, 735, 737, 739, 742, 748, 749, 750, 755, 757, 759, 760, 761, 763, 773, 792, 793, 795, 798, 799, 802, 804, 806, 807, 812, 815, 816, 817, 819, 821, 825, 828, 834, 838, 840, 841, 842, 843, 849, 850, 851, 852, 857, 862, 866, 867, 876, 877, 883, 887, 889, 893, 894, 902, 903, 907, 908, 915, 916, 928, 945, 946, 951, 957, 958, 960, 961, 962, 970, 977, 978, 979, 983, 992, 1012, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1031, 1033, 1035, 1037, 1038, 1039, 1049, 1050, 1053, 1054, 1055, 1057, 1058, 1061, 1065, 1071, 1073, 1075, 1082, 1083, 1084, 1085, 1086, 1088, 1094, 1101, 1102, 1103, 1104, 1105, 1114, 1119, 1120, 1121, 1125, 1126, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1149, 1152, 1153, 1156, 1157, 1160, 1161, 1162, 1164, 1166, 1167, 1170, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1196, 1197, 1198, 1199, 1201, 1203, 1206, 1209, 1219, 1220, 1221, 1223, 1224, 1225, 1231, 1232, 1242, 1250, 1252, 1253, 1254, 1256, 1259, 1260, 1264, 1268], "nonexist": [416, 992], "nor": [134, 140, 245, 309], "normal": [35, 126, 201, 309, 435, 480, 619, 687, 773, 812, 883, 1012, 1054, 1156, 1231, 1242], "normalised_scor": 131, "norowsreturnederror": [242, 309], "not_": [283, 309, 773, 855, 883, 889, 1242], "not_c": [283, 309, 855, 883], "notabl": 131, "notat": [11, 36, 309], "note": [4, 10, 20, 35, 36, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 149, 152, 154, 157, 159, 163, 165, 168, 170, 176, 178, 180, 181, 190, 201, 202, 211, 212, 213, 215, 216, 219, 230, 233, 234, 241, 242, 243, 244, 249, 252, 256, 263, 266, 268, 271, 273, 274, 276, 278, 279, 283, 285, 286, 309, 353, 373, 381, 382, 386, 389, 390, 396, 410, 411, 413, 417, 430, 439, 446, 452, 454, 461, 468, 475, 476, 494, 497, 515, 522, 531, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 619, 625, 626, 632, 633, 634, 635, 637, 638, 642, 643, 646, 647, 650, 655, 656, 657, 660, 661, 670, 671, 676, 683, 692, 694, 701, 709, 714, 715, 717, 718, 719, 723, 733, 745, 747, 748, 752, 760, 761, 763, 764, 769, 773, 784, 795, 799, 800, 806, 812, 813, 816, 817, 820, 832, 834, 838, 840, 841, 843, 844, 849, 851, 852, 855, 858, 859, 883, 889, 923, 946, 954, 955, 958, 961, 962, 968, 986, 987, 989, 993, 1006, 1016, 1023, 1032, 1033, 1039, 1066, 1069, 1087, 1101, 1125, 1126, 1130, 1137, 1144, 1146, 1149, 1151, 1156, 1161, 1162, 1168, 1169, 1170, 1171, 1173, 1174, 1178, 1179, 1182, 1183, 1186, 1191, 1192, 1193, 1196, 1197, 1206, 1213, 1224, 1226, 1242, 1246, 1250, 1251, 1255, 1256, 1266, 1268], "noth": [20, 633, 641, 1169, 1177], "notic": [131, 309, 883, 1242], "notimplementederror": 170, "now": [47, 134, 241, 267, 309, 834, 883, 1223, 1242], "np": [120, 192, 267, 309, 455, 611, 773, 808, 883, 1028, 1042, 1045, 1047, 1048, 1144, 1145, 1242], "nr": [292, 303, 864, 875], "nth": [195, 309, 456, 653, 769, 773, 810, 883, 1029, 1189, 1242], "nthe": [633, 1169], "nthose": [633, 1169], "nu": 631, "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 143, 147, 149, 156, 159, 163, 170, 172, 174, 179, 180, 184, 186, 191, 192, 194, 207, 215, 222, 223, 224, 231, 234, 236, 252, 255, 257, 258, 259, 262, 267, 268, 272, 275, 278, 280, 283, 290, 309, 321, 323, 324, 334, 337, 338, 345, 346, 353, 354, 361, 363, 367, 368, 369, 373, 377, 378, 379, 382, 387, 389, 390, 413, 416, 423, 424, 425, 426, 427, 428, 429, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 453, 460, 466, 467, 475, 476, 477, 478, 483, 485, 486, 492, 493, 496, 497, 499, 501, 502, 503, 511, 512, 513, 514, 515, 517, 522, 530, 531, 551, 564, 565, 566, 567, 570, 580, 584, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 613, 614, 616, 621, 622, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 654, 660, 661, 663, 665, 670, 671, 672, 673, 680, 681, 682, 691, 692, 693, 694, 699, 702, 703, 704, 706, 708, 712, 716, 721, 732, 733, 737, 739, 742, 749, 750, 755, 757, 763, 773, 789, 792, 798, 799, 802, 807, 808, 815, 816, 828, 840, 843, 848, 850, 852, 855, 857, 862, 883, 889, 893, 894, 904, 907, 908, 915, 916, 923, 924, 932, 936, 937, 945, 946, 951, 959, 961, 962, 992, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1013, 1015, 1016, 1017, 1018, 1022, 1024, 1025, 1031, 1032, 1037, 1038, 1049, 1050, 1051, 1055, 1057, 1058, 1061, 1064, 1065, 1068, 1069, 1071, 1073, 1074, 1075, 1084, 1086, 1087, 1089, 1094, 1101, 1114, 1115, 1126, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1149, 1153, 1158, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1186, 1188, 1189, 1190, 1196, 1197, 1199, 1201, 1206, 1209, 1220, 1223, 1224, 1225, 1227, 1242, 1253, 1257, 1259, 1260, 1264, 1266, 1268, 1269, 1271], "null_behavior": [387, 492, 773, 959, 1064, 1242], "null_count": [41, 45, 180, 184, 309, 383, 773, 799, 883, 956, 958, 1242], "null_equ": [186, 309, 1013, 1242], "null_on_oob": [345, 497, 499, 915, 1069, 1071], "null_prob": [156, 159, 163], "null_valu": [33, 42, 129, 130, 143, 309, 883], "nullabl": [35, 309], "nullbehavior": [387, 492, 773, 959, 1064, 1242], "nullif": 1261, "nulls_last": [255, 309, 334, 354, 517, 621, 622, 699, 773, 843, 883, 904, 924, 1051, 1089, 1158, 1242], "num": [13, 36, 270, 309, 468, 773, 1039, 1242], "num_row": 170, "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 172, 174, 179, 187, 188, 190, 191, 199, 203, 204, 213, 214, 218, 229, 230, 241, 245, 252, 257, 260, 272, 277, 280, 282, 290, 292, 294, 303, 309, 335, 351, 353, 358, 361, 367, 368, 377, 383, 384, 387, 391, 394, 402, 404, 406, 408, 409, 418, 431, 432, 434, 438, 439, 440, 441, 445, 446, 447, 453, 462, 475, 476, 483, 484, 492, 500, 503, 508, 510, 515, 518, 520, 522, 524, 569, 573, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 615, 624, 638, 640, 642, 643, 646, 650, 652, 653, 661, 664, 677, 681, 682, 688, 701, 705, 706, 707, 719, 727, 732, 749, 750, 754, 758, 762, 773, 789, 792, 798, 805, 806, 807, 813, 820, 830, 840, 845, 847, 848, 853, 854, 862, 864, 866, 875, 883, 888, 921, 923, 928, 936, 945, 956, 957, 959, 963, 966, 974, 976, 981, 984, 985, 994, 1007, 1008, 1010, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1034, 1055, 1056, 1064, 1072, 1075, 1080, 1082, 1087, 1092, 1094, 1107, 1108, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1149, 1152, 1160, 1174, 1176, 1178, 1179, 1182, 1186, 1188, 1189, 1197, 1200, 1214, 1227, 1232, 1242, 1257, 1262, 1271], "number_of_two": [342, 491], "numbers_decim": 664, "numer": [10, 16, 33, 36, 42, 133, 144, 173, 182, 216, 267, 268, 276, 277, 309, 318, 369, 373, 452, 468, 527, 548, 550, 574, 582, 614, 635, 670, 675, 683, 773, 785, 791, 801, 817, 851, 883, 889, 937, 946, 958, 1039, 1150, 1171, 1206, 1223, 1242, 1262, 1271], "numeric_dtyp": 1271, "numericliter": [373, 773, 946, 1242], "numpi": [90, 120, 151, 178, 213, 243, 244, 263, 267, 268, 309, 530, 561, 562, 590, 773, 883, 1042, 1045, 1047, 1048, 1110, 1111, 1131, 1223, 1224, 1242], "nworld": 655, "o": [135, 146, 367, 368, 383, 632, 681, 682, 773, 936, 956, 1168, 1191, 1227, 1242, 1254], "oauth": 145, "obj": 889, "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 170, 176, 181, 200, 201, 216, 217, 232, 241, 244, 249, 256, 266, 267, 268, 309, 386, 543, 714, 715, 717, 718, 733, 752, 760, 761, 773, 785, 800, 812, 817, 834, 844, 883, 889, 1217, 1242, 1251, 1253, 1256, 1268, 1270], "observ": [384, 438, 439, 440, 441, 576, 773, 957, 1015, 1016, 1017, 1018, 1119, 1242], "obtain": 522, "obvious": 673, "occur": [36, 53, 54, 91, 100, 106, 309, 342, 491, 549, 579, 773, 794, 795, 804, 830, 841, 883, 912, 1063, 1106, 1121, 1223, 1242], "occurr": [463, 471, 474, 687, 773, 1035, 1043, 1046, 1231, 1242], "oct": 1263, "octet_length": 1261, "octob": 1263, "od": [140, 785], "odbc": [34, 131, 309], "odd": 633, "odi": 636, "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 215, 216, 309, 391, 701, 794, 795, 804, 816, 817, 821, 830, 883, 963], "offer": [233, 309, 573, 773, 829, 883, 1264, 1268], "offic": [36, 309], "offset": [64, 129, 130, 135, 137, 141, 143, 146, 147, 148, 195, 201, 241, 254, 285, 286, 309, 391, 392, 400, 410, 411, 413, 417, 430, 456, 498, 516, 589, 620, 650, 663, 773, 810, 812, 834, 842, 858, 859, 883, 963, 964, 972, 986, 987, 989, 993, 1006, 1029, 1070, 1088, 1157, 1186, 1199, 1242, 1267], "offset_bi": 719, "often": [132, 168, 201, 241, 309, 342, 491, 582, 589, 773, 812, 834, 883, 912, 1063, 1256, 1268], "ok": 522, "old": [35, 238, 309, 583, 584, 773, 832, 883, 1125, 1126, 1242], "old_tabl": 1270, "older": [41, 45, 309, 883], "oldw": 656, "omit": [27, 119, 123, 157, 168, 230, 244, 266, 271, 309, 729, 730, 760, 761, 889, 1269], "onc": [129, 130, 165, 219, 243, 245, 288, 309, 510, 530, 531, 610, 658, 659, 773, 790, 860, 883, 1082, 1101, 1143, 1194, 1195, 1242, 1254], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 162, 164, 168, 173, 181, 191, 192, 199, 200, 201, 213, 225, 234, 241, 242, 243, 249, 250, 252, 267, 270, 276, 289, 309, 319, 353, 384, 386, 447, 448, 452, 455, 458, 460, 515, 522, 527, 543, 552, 553, 555, 557, 559, 560, 588, 589, 613, 621, 633, 634, 635, 648, 671, 735, 753, 763, 769, 773, 791, 800, 807, 808, 811, 812, 825, 834, 838, 839, 840, 851, 857, 861, 883, 895, 923, 928, 957, 1024, 1031, 1087, 1094, 1099, 1119, 1130, 1149, 1169, 1170, 1171, 1184, 1207, 1223, 1242, 1246, 1256, 1257, 1259, 1262, 1270], "one_to_mani": [215, 309, 816, 883], "one_to_on": [215, 309, 816, 883], "oneormoredatatyp": [36, 157, 309], "ones": 889, "onf": [650, 1186], "onli": [1, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 184, 189, 201, 202, 213, 216, 219, 234, 241, 243, 244, 263, 265, 266, 267, 278, 279, 295, 309, 319, 321, 323, 335, 372, 373, 386, 391, 413, 420, 442, 451, 461, 530, 531, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 569, 581, 627, 636, 648, 685, 701, 735, 773, 794, 797, 800, 802, 803, 812, 813, 817, 820, 834, 835, 852, 854, 867, 883, 887, 889, 893, 894, 895, 943, 946, 963, 989, 1021, 1027, 1033, 1101, 1123, 1163, 1172, 1184, 1217, 1220, 1223, 1242, 1250, 1253, 1268, 1269, 1271], "onlin": [189, 309, 1021, 1242], "ont": [636, 1172], "onto": 159, "oof": [649, 1185, 1259, 1263], "op": [20, 163, 309, 537, 582, 773, 883, 1242], "opaqu": 867, "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 181, 309, 386, 773, 800, 883], "openoffic": 140, "openpyxl": [134, 151], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 175, 189, 192, 194, 200, 206, 217, 219, 226, 230, 232, 233, 234, 237, 239, 241, 244, 245, 250, 252, 261, 267, 268, 273, 276, 277, 287, 288, 309, 318, 319, 322, 353, 378, 379, 380, 381, 382, 383, 436, 437, 452, 454, 457, 459, 482, 510, 511, 512, 513, 514, 515, 522, 529, 545, 548, 550, 551, 552, 553, 555, 557, 559, 560, 563, 564, 565, 568, 569, 574, 581, 610, 613, 675, 683, 690, 691, 693, 703, 704, 708, 720, 752, 763, 773, 785, 793, 797, 799, 803, 811, 813, 816, 820, 825, 826, 835, 839, 840, 844, 851, 854, 860, 883, 887, 923, 947, 951, 952, 953, 954, 955, 956, 1021, 1082, 1083, 1084, 1085, 1086, 1087, 1123, 1143, 1149, 1217, 1222, 1223, 1224, 1242, 1267, 1268], "operand": [683, 773], "opp": 889, "oppos": 701, "opposit": [252, 309, 353, 515, 613, 773, 840, 883, 923, 1087, 1149, 1242], "opt": [271, 309], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 213, 217, 233, 237, 243, 274, 309, 790, 794, 795, 804, 821, 830, 841, 849, 858, 859, 867, 883, 942, 1144, 1242], "optimis": [131, 219, 244, 295, 309, 883, 1101, 1146, 1242, 1271], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 141, 143, 144, 145, 146, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 181, 196, 201, 211, 216, 225, 249, 256, 262, 273, 276, 278, 309, 386, 391, 480, 537, 543, 590, 591, 593, 595, 597, 599, 602, 604, 606, 619, 627, 636, 648, 650, 687, 755, 763, 773, 785, 800, 812, 816, 817, 825, 838, 844, 851, 852, 883, 889, 963, 1054, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1156, 1163, 1172, 1184, 1186, 1219, 1231, 1242, 1259, 1263], "optional_memb": [472, 773, 1044, 1242], "or_": 773, "oracl": 132, "orang": [177, 290, 291, 293, 294, 296, 297, 299, 301, 302, 309, 368, 682, 773, 862, 863, 865, 866, 868, 869, 871, 873, 874, 1263], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 131, 150, 152, 153, 154, 155, 172, 176, 177, 184, 185, 192, 200, 201, 215, 232, 233, 234, 241, 243, 245, 246, 250, 255, 266, 267, 272, 274, 279, 309, 334, 354, 359, 367, 368, 389, 390, 448, 493, 510, 517, 523, 569, 574, 579, 589, 610, 611, 612, 621, 622, 649, 656, 657, 658, 659, 673, 681, 682, 684, 685, 687, 699, 752, 763, 773, 784, 789, 797, 802, 803, 808, 811, 812, 816, 825, 834, 835, 839, 843, 844, 848, 849, 851, 883, 888, 889, 904, 924, 929, 936, 941, 961, 962, 1025, 1051, 1065, 1082, 1089, 1095, 1121, 1128, 1143, 1145, 1147, 1158, 1185, 1210, 1227, 1228, 1229, 1231, 1242, 1250, 1253, 1259, 1267, 1268, 1271], "order_bi": [569, 773], "ordin": [414, 579, 773, 990, 1121, 1242, 1269], "ordinal_dai": [399, 432], "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 178, 309, 841, 883], "orient": [48, 50, 91, 120, 122, 230, 309, 883, 1250], "origin": [47, 129, 130, 143, 184, 192, 274, 309, 389, 390, 416, 417, 430, 448, 493, 531, 552, 569, 581, 582, 583, 584, 585, 587, 628, 633, 641, 697, 698, 773, 802, 808, 849, 883, 961, 962, 992, 993, 1006, 1025, 1065, 1125, 1126, 1127, 1129, 1164, 1169, 1177, 1242], "orld": 1192, "other": [1, 20, 32, 36, 37, 38, 41, 54, 128, 129, 130, 131, 134, 143, 152, 153, 154, 155, 184, 186, 189, 192, 215, 216, 225, 226, 234, 242, 244, 247, 248, 261, 271, 276, 278, 281, 283, 284, 307, 309, 318, 322, 324, 334, 335, 373, 388, 436, 437, 448, 452, 457, 459, 468, 472, 482, 489, 511, 512, 513, 514, 529, 535, 539, 548, 550, 563, 564, 568, 583, 584, 622, 674, 675, 680, 683, 690, 692, 694, 699, 702, 703, 704, 712, 719, 737, 739, 742, 751, 755, 757, 773, 785, 795, 802, 808, 816, 817, 825, 826, 836, 837, 851, 852, 855, 856, 857, 883, 889, 895, 946, 960, 1013, 1021, 1044, 1061, 1083, 1084, 1085, 1086, 1125, 1126, 1217, 1225, 1233, 1241, 1242, 1256, 1268], "other_df": [215, 309], "other_lf": [816, 883], "otherwis": [34, 131, 134, 141, 158, 161, 165, 196, 219, 226, 244, 247, 266, 271, 295, 309, 358, 363, 373, 384, 438, 439, 440, 441, 522, 531, 540, 569, 573, 574, 576, 581, 626, 629, 632, 637, 638, 643, 650, 661, 687, 691, 719, 722, 731, 735, 763, 773, 826, 836, 867, 883, 928, 932, 946, 957, 1015, 1016, 1017, 1018, 1094, 1101, 1119, 1123, 1144, 1146, 1162, 1165, 1168, 1173, 1174, 1179, 1186, 1197, 1231, 1242, 1260], "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 151, 241, 244, 309, 345, 363, 497, 499, 626, 629, 637, 763, 834, 883, 915, 932, 1069, 1071, 1162, 1165, 1173, 1266], "outcom": [569, 773], "outer": [47, 55, 278, 309, 852, 883], "outermost": 46, "outlin": 7, "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 42, 172, 180, 213, 219, 223, 226, 232, 234, 243, 247, 249, 259, 272, 279, 283, 309, 321, 323, 346, 367, 368, 384, 501, 522, 530, 531, 540, 543, 553, 576, 583, 625, 639, 643, 681, 682, 687, 691, 692, 693, 694, 703, 704, 705, 734, 735, 773, 785, 789, 799, 804, 821, 825, 826, 836, 838, 848, 851, 855, 867, 883, 893, 894, 916, 936, 957, 1073, 1101, 1119, 1161, 1175, 1179, 1227, 1231, 1242], "output_path": [841, 883], "outsid": [373, 773, 946, 1242], "over": [125, 129, 130, 131, 133, 134, 143, 159, 160, 172, 189, 212, 213, 214, 219, 242, 243, 244, 256, 272, 273, 287, 295, 309, 313, 367, 368, 383, 386, 439, 447, 530, 531, 540, 542, 543, 544, 545, 553, 554, 579, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 681, 682, 709, 710, 723, 734, 735, 747, 752, 773, 789, 844, 848, 867, 883, 889, 936, 956, 1016, 1021, 1101, 1132, 1133, 1135, 1139, 1227, 1242, 1268], "overflow": [173, 309, 369, 381, 382, 665, 676, 773, 791, 883, 937, 954, 955, 1201, 1213, 1242], "overhead": [46, 85, 143, 146, 147, 148], "overlap": [628, 634, 636, 1164, 1170, 1172], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 156, 157, 163, 165, 309, 883], "overridden": [36, 116, 118, 120, 122, 138, 139, 165, 309, 883], "overview": [309, 773, 785, 883, 1242, 1267, 1271], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 170, 278, 309, 320, 674, 773, 852, 883], "overwrite_schema": [35, 309], "ow": 655, "own": [763, 1223, 1242, 1271], "p": [49, 233, 309, 573, 755, 773, 829, 883, 889, 1173, 1174, 1254], "pa": [35, 116, 149, 309, 752], "pa_tabl": 752, "pacif": [392, 964], "pack": [230, 309], "packag": [131, 309, 313, 391, 701, 887, 963], "pad": [644, 645, 670, 1180, 1181, 1206], "pad_end": [645, 1181], "pad_start": [644, 670, 1180, 1206], "page": [41, 45, 135, 141, 146, 148, 309, 773, 785, 883, 1242, 1267], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 238, 309, 832, 883, 1271], "pairwis": [178, 309], "panda": [34, 117, 121, 126, 151, 201, 268, 274, 276, 309, 410, 411, 680, 752, 773, 812, 849, 851, 883, 986, 987, 1224, 1225, 1242, 1251, 1253, 1268], "pandas_df": 1268, "pane": [36, 309], "panic": 99, "pap": 1174, "papa": 638, "papai": [638, 1174], "papaya": [638, 650, 661, 1174, 1186, 1197], "parallel": [53, 55, 125, 132, 141, 148, 201, 216, 217, 233, 248, 284, 309, 383, 494, 687, 763, 773, 785, 812, 816, 817, 837, 856, 867, 883, 956, 1066, 1231, 1242], "parallelis": [219, 295, 309, 1101, 1242], "parallelstrategi": [141, 148], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 158, 159, 163, 242, 309, 883], "paramet": [2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 170, 172, 173, 174, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 211, 213, 214, 215, 216, 218, 219, 223, 225, 226, 229, 230, 232, 233, 234, 236, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 288, 292, 294, 295, 301, 303, 309, 318, 320, 321, 322, 323, 324, 334, 341, 342, 345, 346, 353, 354, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 373, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 391, 393, 395, 396, 401, 413, 416, 417, 418, 419, 421, 422, 430, 433, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 466, 467, 468, 472, 480, 482, 484, 489, 490, 491, 492, 494, 497, 498, 499, 500, 501, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 529, 530, 531, 537, 543, 544, 548, 550, 553, 554, 555, 556, 557, 558, 563, 564, 568, 569, 570, 573, 574, 576, 577, 579, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 671, 673, 674, 675, 677, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 773, 789, 791, 792, 794, 795, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 820, 821, 825, 826, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 864, 866, 867, 873, 875, 883, 887, 888, 889, 892, 893, 894, 895, 904, 911, 912, 915, 916, 923, 924, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 965, 967, 968, 973, 989, 992, 993, 994, 995, 997, 998, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1034, 1035, 1037, 1038, 1039, 1051, 1054, 1056, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1093, 1094, 1095, 1101, 1115, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1152, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1206, 1207, 1210, 1214, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1227, 1228, 1231, 1232, 1233, 1242, 1250, 1251, 1252, 1253, 1254, 1256, 1260, 1263, 1268], "parameteris": 131, "parametr": 785, "paramount": [821, 883], "parent": [194, 309], "parenthes": 18, "parquet": [41, 45, 141, 142, 148, 309, 785, 883], "parquetcompress": [41, 309], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 141, 143, 146, 147, 148, 172, 200, 247, 248, 252, 255, 272, 283, 284, 288, 309, 368, 373, 468, 569, 583, 584, 622, 640, 664, 665, 674, 682, 692, 694, 699, 702, 703, 704, 712, 725, 737, 739, 742, 751, 753, 755, 757, 763, 773, 789, 811, 836, 837, 840, 843, 848, 855, 856, 860, 883, 946, 1039, 1125, 1126, 1149, 1176, 1200, 1201, 1242, 1250], "parseerror": [665, 1201], "parser": [129, 134], "part": [116, 134, 266, 271, 309, 569, 634, 652, 653, 773, 804, 830, 841, 857, 883, 1170, 1188, 1189, 1264], "parti": [530, 773], "partial": [119, 129, 143, 309, 883], "particip": [36, 309], "particular": [129, 135, 137, 146, 172, 187, 272, 309, 367, 368, 681, 682, 773, 789, 848, 883, 936, 1014, 1227, 1242], "partit": [41, 132, 133, 141, 144, 148, 149, 214, 232, 309, 569, 773], "partition_bi": [130, 214, 309, 569, 773], "partition_col": [41, 132, 309], "partition_df": 130, "partition_num": 132, "partition_on": 132, "partition_rang": 132, "partitioned_object": [41, 309], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 149, 152, 154, 157, 159, 161, 163, 172, 178, 182, 200, 201, 203, 218, 232, 233, 234, 241, 247, 252, 255, 260, 268, 271, 272, 279, 283, 288, 309, 312, 353, 368, 391, 401, 413, 416, 445, 465, 515, 530, 531, 569, 573, 583, 584, 589, 613, 622, 655, 656, 657, 682, 691, 699, 701, 708, 725, 755, 763, 769, 773, 789, 801, 811, 812, 814, 821, 829, 834, 836, 840, 841, 843, 848, 855, 860, 867, 883, 887, 888, 923, 963, 973, 992, 1022, 1034, 1056, 1087, 1101, 1125, 1126, 1149, 1191, 1192, 1193, 1214, 1224, 1242, 1246, 1254, 1268], "pass_nam": [531, 773], "pass_name_to_appli": [773, 887], "password": [129, 132, 135, 137, 146], "past": [32, 309, 821, 883], "pat": [637, 1173], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 249, 309, 386, 543, 546, 612, 641, 773, 800, 838, 841, 883, 887, 1147, 1177, 1242, 1271], "pathlib": [31, 33, 37, 38, 41, 143, 309], "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 213, 309, 538, 626, 627, 628, 633, 634, 635, 636, 637, 646, 647, 648, 867, 889, 1144, 1146, 1162, 1163, 1164, 1169, 1170, 1171, 1172, 1173, 1182, 1183, 1184, 1242, 1263], "paya": 661, "pct": 159, "pct_chang": [773, 1242], "pd": [117, 121, 680, 752, 773, 1224, 1225, 1242, 1251, 1268], "pd_df": 121, "pd_frame": 752, "pd_seri": 121, "pea": 638, "peak": [243, 309, 571, 572, 773, 1116, 1117, 1242], "peak_max": [773, 1242], "peak_min": [773, 1242], "pear": [638, 650, 661, 1174, 1186, 1197], "pearson": [178, 309, 480, 619, 705, 773, 1054, 1156, 1242], "penalti": [660, 662, 663, 1196, 1198, 1199], "per": [14, 33, 36, 42, 134, 157, 159, 172, 199, 230, 231, 234, 248, 255, 272, 284, 298, 300, 301, 309, 345, 368, 494, 497, 499, 530, 531, 552, 553, 555, 557, 559, 560, 622, 682, 687, 699, 773, 789, 837, 843, 848, 856, 870, 872, 873, 883, 887, 915, 1066, 1069, 1071, 1231, 1242], "percent": [570, 773, 1115, 1242], "percentag": [156, 159, 163, 570, 773, 1115, 1242], "percentil": [180, 309, 799, 883, 958, 1242], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 141, 143, 146, 147, 148, 170, 200, 201, 216, 219, 237, 241, 243, 244, 267, 295, 309, 452, 522, 530, 531, 569, 589, 627, 636, 642, 643, 648, 660, 662, 663, 773, 812, 817, 834, 843, 858, 859, 883, 1101, 1163, 1172, 1178, 1179, 1184, 1196, 1198, 1199, 1223, 1242], "perhap": [273, 309], "period": [129, 130, 143, 201, 241, 309, 417, 430, 438, 440, 441, 570, 589, 714, 715, 717, 718, 760, 761, 773, 812, 834, 883, 993, 1006, 1015, 1017, 1018, 1115, 1242], "persist": 1256, "phase": [34, 277, 309], "philadelphia": [646, 647], "physic": [46, 59, 85, 129, 130, 216, 234, 309, 680, 773, 790, 816, 817, 883, 940, 1225, 1242], "pi": [10, 385, 773, 948, 950, 1154, 1215, 1242, 1261, 1265], "pick": [160, 763], "pickl": [386, 773, 800, 883], "pip": [391, 701, 963], "pipe": [309, 773, 883], "pipelin": [134, 271, 309], "pitfal": 101, "pivot": [277, 309, 889], "pivot_long": [276, 309, 851, 883], "pivot_wid": [234, 309], "pivotagg": [234, 309], "pixel": [36, 309], "pk": [435, 773, 1012, 1242], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 773, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1246, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1271], "pl_frame": 752, "place": [10, 11, 33, 42, 183, 189, 205, 206, 234, 239, 244, 255, 281, 309, 313, 334, 346, 354, 501, 517, 621, 622, 699, 773, 843, 883, 895, 904, 916, 924, 1021, 1073, 1089, 1122, 1158, 1242], "placehold": 724, "plai": [12, 704], "plain": [804, 883], "plan": [216, 217, 309, 386, 773, 790, 794, 800, 804, 816, 817, 838, 841, 883, 1270], "plane": [697, 698], "platform": 151, "ple": 1263, "pleas": [121, 131, 132, 201, 309, 312, 313, 439, 706, 719, 773, 812, 883, 1016, 1242, 1246], "plenti": 889, "plot": [309, 830, 841, 883, 1242], "plu": [384, 527, 773, 957, 1099, 1119, 1242, 1262], "plugin": [0, 773, 785], "plugin_path": 887, "point": [10, 11, 36, 37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 190, 201, 217, 256, 261, 266, 271, 277, 278, 309, 313, 372, 383, 384, 389, 417, 418, 446, 451, 452, 463, 475, 476, 510, 531, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 749, 750, 773, 794, 795, 804, 806, 812, 821, 832, 844, 852, 883, 941, 943, 956, 957, 961, 993, 994, 1023, 1027, 1035, 1082, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1217, 1221, 1226, 1242, 1268], "poison": [561, 562, 773, 1110, 1111, 1242], "pola": 309, "polar": [1, 309, 312, 313, 772, 773, 779, 785, 883, 887, 888, 889, 1242, 1246, 1267, 1268, 1270], "polars_df": 1268, "polars_file_cache_ttl": [143, 146], "polars_hypothesis_profil": [162, 164], "polars_max_thread": 165, "polars_seri": 1268, "polarsdatafram": 170, "polarsdataset": [271, 309], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 173, 219, 266, 271, 309, 369, 442, 530, 531, 583, 584, 640, 721, 733, 734, 735, 745, 748, 764, 769, 773, 791, 883, 889, 937, 1101, 1125, 1126, 1176, 1242], "polarsintegertyp": [696, 729, 730], "polarstemporaltyp": [660, 1196], "polarstyp": 55, "pool": [14, 54, 165, 166, 795, 883], "poor": 131, "pop2": [216, 309], "popul": [216, 309, 817, 883], "port": [34, 129, 131, 132, 135, 137, 146, 309], "portion": 1263, "pos_a": 1263, "posit": [36, 182, 188, 200, 232, 247, 248, 252, 255, 275, 283, 284, 288, 309, 353, 438, 440, 441, 442, 515, 569, 574, 576, 613, 622, 635, 637, 646, 647, 665, 674, 697, 698, 699, 702, 703, 704, 721, 751, 755, 769, 773, 801, 805, 811, 836, 837, 840, 843, 850, 855, 856, 860, 883, 889, 923, 1015, 1017, 1018, 1087, 1119, 1149, 1171, 1201, 1242, 1269], "position": 1242, "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 200, 213, 219, 243, 274, 295, 309, 528, 531, 540, 590, 653, 686, 773, 811, 843, 849, 883, 1101, 1131, 1189, 1242], "post": 47, "postgresql": [34, 131, 132, 309, 569, 773, 1266], "potenti": [101, 103, 134, 143, 146, 147, 213, 242, 244, 309, 552, 797, 799, 803, 835, 854, 883, 887], "pow": [773, 1242, 1261], "pow_n": 49, "power": [753, 1242, 1262], "powersofn": 49, "pre": [522, 531, 576, 745, 748, 764, 773, 1119, 1242], "preced": [159, 889], "precis": [10, 11, 33, 36, 42, 63, 131, 213, 243, 244, 263, 266, 271, 309, 393, 664, 883, 889, 965, 1200], "predefin": [234, 309], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 192, 211, 242, 309, 448, 689, 723, 763, 773, 794, 795, 804, 808, 821, 830, 832, 841, 858, 859, 883, 1025, 1144, 1146, 1242], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 794, 795, 804, 821, 830, 841, 883], "predict": [234, 237, 279, 309], "prefer": [129, 130, 133, 134, 143, 164, 172, 189, 213, 219, 242, 243, 272, 295, 309, 367, 368, 442, 531, 681, 682, 773, 789, 848, 883, 936, 1021, 1101, 1227, 1242, 1251, 1271], "prefix": [35, 129, 130, 143, 168, 309, 320, 366, 538, 553, 556, 557, 559, 560, 654, 657, 658, 670, 773, 889, 935, 1190, 1194, 1206], "prefix_": 556, "prefix_a": 556, "prefix_b": 556, "presenc": [722, 731, 889, 1032, 1242], "present": [119, 159, 196, 309, 472, 656, 657, 773, 841, 883], "preserv": [184, 192, 200, 215, 219, 267, 268, 309, 389, 390, 391, 410, 411, 448, 493, 583, 616, 632, 773, 802, 808, 816, 883, 961, 962, 963, 1025, 1065, 1125, 1153, 1168, 1224, 1242], "pressur": [45, 129, 130, 141, 143, 147, 148, 614, 773, 883, 1150, 1242], "presum": [530, 773], "prev_pow2": 49, "prevent": [267, 309, 320, 381, 382, 552, 676, 773, 883, 954, 955, 1213, 1242], "preview": [199, 309], "previou": [49, 168, 391, 552, 553, 555, 557, 559, 560, 570, 673, 773, 963, 1115, 1242], "previous": [2, 3], "price": 1271, "primari": [134, 1268, 1271], "primarili": 1, "primit": [35, 309, 472, 773], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 185, 199, 200, 214, 217, 265, 287, 309, 465, 544, 773, 794, 814, 883, 889, 1044, 1220, 1242, 1271], "prior": 121, "prioriti": 160, "probabl": [435, 576, 773, 1012, 1119, 1242], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 243, 309, 794, 795, 883], "process_index": [266, 309], "produc": [2, 3, 159, 163, 215, 309, 342, 491, 540, 734, 816, 821, 883, 912, 1063], "product": [47, 178, 215, 309, 381, 388, 773, 816, 883, 954, 960, 1242], "profil": [162, 164, 794, 883], "programmat": [180, 309, 799, 883], "progress": [63, 65], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 621, 622, 773, 794, 795, 804, 821, 830, 832, 841, 883], "projection_pushdown": [42, 43, 44, 45, 53, 54, 794, 795, 804, 821, 830, 841, 883], "prompt": 123, "propag": [346, 437, 501, 561, 562, 564, 625, 639, 703, 704, 773, 916, 1073, 1110, 1111, 1161, 1175, 1242], "propagate_nan": 705, "properti": [36, 170, 176, 177, 185, 193, 204, 246, 251, 282, 286, 309, 313, 796, 797, 803, 835, 854, 859, 883, 888, 889, 1242, 1271], "proport": [687, 773, 1231, 1242], "protocol": [35, 117, 132, 170, 309], "prototyp": 769, "provid": [34, 36, 129, 130, 132, 133, 134, 141, 143, 144, 145, 148, 159, 163, 192, 196, 211, 256, 266, 309, 363, 364, 442, 463, 522, 530, 531, 629, 630, 633, 640, 641, 656, 657, 658, 659, 725, 755, 773, 785, 808, 844, 883, 932, 933, 1035, 1053, 1101, 1165, 1166, 1169, 1176, 1177, 1221, 1242, 1254, 1260, 1263, 1268, 1271], "prune": [141, 148, 821, 883], "public": [132, 309, 773, 785, 883, 1242, 1267], "pulp": 1250, "pure": [36, 309, 537], "purpos": [551, 773, 794, 883], "push": [143, 146, 147, 148, 149], "pushdown": [42, 43, 44, 45, 53, 54, 794, 795, 804, 821, 830, 832, 841, 858, 859, 883, 1144, 1146, 1242], "put": [33, 42, 309, 313, 883], "pwd": 131, "py": 145, "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 261, 267, 268, 309, 752, 785, 1217, 1223, 1224, 1242, 1251, 1253, 1268], "pyarrow_opt": [41, 133, 141, 144, 309], "pyarrow_t": 1268, "pydant": 151, "pyiceberg": [145, 151], "pyodbc": [34, 309], "pyodbc_uri": [34, 309], "pyspark": 165, "pytest": [152, 154], "python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 170, 213, 219, 243, 244, 263, 295, 309, 386, 391, 395, 452, 530, 531, 635, 701, 714, 715, 717, 718, 760, 761, 763, 773, 779, 800, 867, 883, 963, 967, 977, 978, 979, 983, 1101, 1171, 1222, 1242, 1267], "pythondatatyp": [56, 72], "pythonliter": [1102, 1103, 1104, 1105, 1144, 1242], "pytorch": [271, 309, 1226, 1242], "q": [244, 309, 755, 1254], "q1": [36, 309], "q2": [36, 309], "q3": [36, 309], "q4": [36, 309], "qcut": [384, 773, 957, 1242], "qhoo": 1271, "qmark": 131, "qqr": 889, "quad": [439, 773, 1016, 1242], "qualifi": [34, 309], "quantifi": [634, 1170], "quantil": [309, 576, 599, 600, 773, 883, 1119, 1136, 1242], "quarter": [201, 216, 241, 279, 309, 413, 417, 430, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006, 1264], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 189, 217, 233, 256, 309, 530, 531, 641, 752, 773, 794, 795, 804, 813, 820, 830, 841, 844, 858, 859, 867, 876, 883, 1021, 1101, 1177, 1242, 1250, 1251, 1253, 1257, 1267, 1269, 1270], "quick": [769, 958, 1242, 1271], "quit": [216, 309], "quot": [33, 34, 42, 129, 130, 132, 143, 309, 883], "quote_char": [33, 42, 129, 130, 143, 309, 883], "quote_plu": 132, "quote_styl": [33, 42, 309, 883], "quotient": 1262, "r": [129, 130, 143, 309, 573, 628, 632, 633, 634, 635, 646, 647, 773, 889, 1164, 1168, 1169, 1170, 1171, 1182, 1183, 1197, 1254, 1263], "r1": 55, "r2": 55, "r3": 55, "rab": [626, 649, 1162, 1185, 1259], "rad": 1265, "radian": [385, 697, 773, 1261], "radix": [665, 1201], "rai": [697, 698], "raini": [646, 647, 1182, 1183], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 143, 152, 154, 170, 196, 234, 242, 267, 309, 345, 363, 391, 416, 497, 499, 540, 574, 576, 584, 626, 629, 637, 660, 662, 663, 665, 667, 716, 733, 773, 915, 932, 963, 992, 1069, 1071, 1119, 1126, 1162, 1165, 1173, 1196, 1198, 1199, 1201, 1203, 1223, 1242], "raise_if_empti": [129, 130, 134, 140, 143], "raise_if_undetermin": 540, "raker": 126, "ram": [42, 43, 44, 45, 883], "ran": [773, 887], "random": [36, 37, 135, 150, 157, 202, 245, 309, 461, 510, 579, 610, 615, 687, 773, 785, 1033, 1082, 1121, 1143, 1152, 1231, 1242], "randomli": 158, "rang": [17, 36, 131, 132, 180, 187, 201, 214, 309, 325, 385, 391, 399, 409, 414, 415, 417, 430, 431, 466, 696, 701, 703, 713, 714, 715, 716, 717, 718, 729, 730, 759, 760, 761, 773, 799, 812, 883, 889, 958, 963, 971, 985, 990, 991, 993, 1006, 1007, 1014, 1115, 1242, 1263], "rank": [334, 494, 699, 705, 720, 773, 904, 1066, 1242], "rankmethod": [579, 773, 1121, 1242], "rare": [392, 964], "rather": [216, 309, 454, 530, 544, 576, 588, 670, 773, 817, 883, 1119, 1130, 1206, 1242], "raw": 132, "raw_output": [841, 883], "re": [196, 201, 212, 274, 276, 309, 410, 411, 419, 422, 812, 849, 851, 883, 986, 987, 995, 998, 1268], "reach": [644, 645, 670, 1180, 1181, 1206], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 189, 309, 386, 454, 763, 773, 800, 883, 1021, 1242], "read_arrow_batches_from_odbc": 131, "read_clipboard": [32, 309], "read_csv": [128, 134, 143], "read_csv_batch": 125, "read_databas": 132, "read_database_uri": 131, "read_excel": 140, "read_ndjson": 138, "read_od": 134, "read_opt": 134, "read_parquet": 148, "read_tabl": 141, "readabl": 769, "reader": [41, 45, 125, 129, 130, 135, 137, 141, 309, 883], "readi": 877, "readthedoc": [36, 309], "real": [634, 1170], "realli": [383, 627, 648, 773, 956, 1163, 1184, 1242], "realloc": [143, 146, 147, 189, 309, 1021, 1242], "rearrang": [219, 309], "reason": [165, 180, 309, 522, 530, 773, 799, 883], "receiv": [47, 131, 143, 219, 233, 295, 309, 531, 573, 773, 829, 883, 1271], "recent": [152, 153, 154, 155, 267, 309, 570, 584, 773, 1115, 1126, 1223, 1242, 1253, 1268], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 141, 143, 146, 147, 148, 189, 309, 773, 944, 1021, 1030, 1107, 1242], "recognis": [15, 16, 20, 889], "recommend": [165, 180, 213, 217, 233, 309, 790, 799, 883, 889], "record": [33, 38, 42, 126, 137, 149, 309, 817, 883], "record_batch": [214, 309], "recordbatch": [116, 214, 309, 752, 1251, 1253, 1268], "recurs": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "red": [46, 84, 85, 295, 687, 773, 867, 1231, 1242], "redempt": 1250, "redshift": 132, "reduc": [45, 129, 130, 141, 143, 146, 147, 148, 243, 296, 297, 299, 302, 309, 614, 710, 723, 773, 868, 869, 871, 874, 883, 1103, 1118, 1150, 1213, 1242], "reduct": [194, 309], "ref": [633, 635, 1169, 1171], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 178, 181, 309, 312, 313, 386, 419, 422, 579, 633, 646, 647, 660, 662, 663, 667, 773, 800, 883, 995, 998, 1121, 1182, 1183, 1196, 1198, 1199, 1203, 1242, 1246], "referenc": [36, 309, 673, 1251, 1268], "refin": 134, "reg": 126, "regard": [129, 705], "regardless": [121, 172, 200, 216, 272, 309, 368, 396, 641, 682, 763, 773, 789, 848, 883, 968, 1177], "regex": [442, 537, 538, 626, 628, 631, 633, 634, 635, 637, 646, 647, 654, 671, 721, 773, 889, 1162, 1164, 1167, 1169, 1170, 1171, 1173, 1182, 1183, 1190], "regexp_lik": 1261, "region": [36, 145, 309], "regist": [1, 48, 49, 50, 51, 162, 164, 256, 309, 773, 844, 883, 887, 1250, 1251, 1253, 1254, 1255, 1256, 1268, 1270], "register_dataframe_namespac": [1, 49, 50, 51], "register_expr_namespac": [1, 48, 50, 51], "register_glob": [1252, 1254, 1256, 1268], "register_lazyframe_namespac": [1, 48, 49, 51], "register_mani": [1252, 1253, 1256], "register_plugin": 773, "register_plugin_funct": [773, 887], "register_series_namespac": [1, 48, 49, 50], "registr": [256, 309, 752, 785, 844, 883, 1256, 1268], "regrid": [466, 773], "regular": [124, 213, 242, 243, 279, 286, 309, 442, 626, 628, 633, 634, 635, 637, 646, 647, 701, 721, 769, 773, 859, 883, 889, 1162, 1164, 1169, 1170, 1171, 1173, 1182, 1183, 1266], "reinterpret": [773, 1242], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 309, 413, 438, 440, 441, 687, 773, 989, 1015, 1017, 1018, 1231, 1242], "relat": [131, 168, 646, 647, 889, 1182, 1183, 1257], "releas": [54, 531, 773, 795, 883, 1271], "release_year": 1250, "relev": 55, "reliabl": [84, 85], "remain": [129, 130, 143, 184, 187, 192, 234, 309, 389, 390, 448, 493, 583, 652, 653, 773, 802, 808, 821, 883, 961, 962, 1014, 1025, 1065, 1125, 1188, 1189, 1242, 1256], "remaind": [653, 1189, 1262], "remap": 86, "remot": [129, 130, 135, 137], "remov": [4, 129, 130, 143, 170, 182, 264, 309, 442, 553, 655, 656, 657, 658, 659, 721, 773, 801, 883, 1191, 1192, 1193, 1194, 1195, 1218, 1242, 1270], "removes_pronoun": 648, "renam": [1, 119, 129, 130, 166, 200, 247, 248, 283, 284, 288, 290, 309, 320, 454, 545, 546, 552, 553, 554, 555, 557, 559, 560, 673, 674, 751, 755, 773, 811, 836, 837, 855, 856, 860, 862, 883, 892, 1173, 1210, 1219, 1242, 1268], "rename_field": [652, 653, 1188, 1189], "render": [841, 883], "render_as_str": 131, "reoconstruct": [244, 309], "repeat": [135, 146, 580, 582, 745, 764, 773], "repeat_bi": 773, "replac": [34, 35, 129, 130, 143, 190, 191, 239, 273, 276, 283, 284, 309, 395, 416, 446, 530, 531, 584, 647, 648, 663, 773, 806, 851, 855, 856, 883, 967, 992, 1023, 1126, 1144, 1146, 1183, 1184, 1199, 1242, 1261], "replace_al": [584, 646, 773, 1125, 1126, 1182, 1242], "replace_column": 309, "replace_strict": [583, 773, 1125, 1242], "replace_time_zon": [392, 398, 400, 969, 970, 996], "replace_with": [648, 1184], "replic": [680, 773, 1225, 1242], "report": 131, "repr": 123, "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 234, 256, 257, 266, 267, 280, 287, 309, 452, 475, 476, 518, 524, 530, 624, 638, 643, 650, 661, 688, 691, 705, 707, 719, 721, 733, 734, 735, 744, 749, 750, 754, 762, 769, 773, 844, 845, 853, 883, 889, 1144, 1160, 1174, 1179, 1186, 1197, 1223, 1232, 1242, 1268], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 249, 265, 309, 394, 399, 402, 404, 405, 406, 407, 408, 409, 412, 414, 415, 418, 431, 432, 434, 543, 680, 773, 804, 819, 838, 883, 940, 966, 971, 974, 975, 976, 980, 981, 982, 984, 985, 988, 990, 991, 994, 1007, 1008, 1010, 1220, 1225, 1242], "request": [217, 309], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 178, 242, 266, 267, 268, 271, 309, 359, 438, 440, 441, 523, 531, 569, 614, 660, 662, 663, 684, 748, 773, 797, 803, 843, 854, 883, 929, 1013, 1015, 1017, 1018, 1095, 1150, 1196, 1198, 1199, 1223, 1224, 1228, 1242, 1246], "require_al": 889, "rerais": [54, 795, 883], "rerun": [189, 309, 1021, 1242], "resampl": [201, 309, 812, 883], "reset": [4, 168], "reset_index": [121, 201, 309, 812, 883], "reshap": [234, 267, 309, 495, 773, 1067, 1242], "resolv": [395, 796, 797, 803, 835, 854, 883], "resourc": 887, "respect": [36, 309, 627, 636, 648, 889, 1163, 1172, 1184, 1226, 1242], "respons": [132, 226, 309, 826, 883], "restor": 168, "restore_default": 168, "restrict": [30, 653, 1189], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 189, 201, 202, 215, 216, 230, 234, 241, 244, 249, 250, 252, 266, 267, 268, 279, 286, 288, 294, 309, 391, 417, 419, 422, 430, 438, 439, 440, 441, 445, 452, 461, 468, 480, 521, 522, 530, 531, 543, 569, 574, 576, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 612, 613, 632, 651, 652, 663, 683, 687, 708, 709, 710, 716, 717, 718, 719, 733, 734, 745, 748, 749, 750, 752, 764, 773, 790, 794, 799, 812, 816, 821, 830, 834, 838, 839, 840, 859, 860, 866, 877, 878, 883, 889, 895, 993, 995, 998, 1006, 1015, 1017, 1018, 1021, 1022, 1033, 1039, 1054, 1093, 1101, 1119, 1125, 1126, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1147, 1149, 1168, 1187, 1188, 1199, 1223, 1224, 1231, 1242, 1251, 1257, 1268, 1269, 1271], "resultset": 131, "retri": [141, 143, 146, 148], "retriev": [196, 266, 309, 339, 340, 487, 488, 671, 744, 909, 910, 1059, 1060, 1207, 1221, 1242, 1257], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 165, 166, 172, 174, 177, 178, 179, 183, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 217, 218, 219, 221, 223, 228, 229, 230, 232, 233, 234, 238, 241, 242, 243, 244, 245, 249, 256, 259, 260, 266, 267, 268, 271, 272, 273, 274, 279, 282, 283, 284, 290, 292, 294, 295, 298, 303, 309, 321, 323, 326, 327, 328, 329, 330, 331, 334, 335, 339, 340, 341, 343, 345, 346, 357, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 384, 385, 391, 392, 394, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 439, 444, 452, 455, 456, 458, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 484, 487, 488, 490, 495, 497, 499, 500, 501, 503, 510, 520, 521, 528, 530, 531, 541, 543, 544, 549, 573, 576, 578, 582, 583, 584, 585, 587, 588, 610, 611, 616, 617, 618, 625, 626, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 661, 665, 670, 677, 678, 679, 681, 682, 683, 685, 686, 687, 690, 691, 696, 697, 698, 699, 700, 701, 706, 708, 713, 714, 715, 716, 717, 718, 719, 722, 725, 727, 729, 730, 731, 732, 733, 734, 735, 745, 748, 751, 752, 755, 758, 759, 760, 761, 763, 764, 773, 789, 792, 794, 795, 797, 798, 799, 803, 804, 810, 812, 813, 816, 819, 820, 821, 829, 830, 832, 834, 838, 841, 847, 848, 849, 854, 855, 856, 862, 864, 866, 870, 875, 877, 883, 887, 889, 893, 894, 895, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 927, 929, 931, 932, 933, 936, 939, 941, 945, 951, 957, 958, 963, 964, 966, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1016, 1020, 1021, 1029, 1032, 1034, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1067, 1069, 1071, 1072, 1073, 1075, 1082, 1092, 1093, 1100, 1101, 1106, 1113, 1119, 1125, 1126, 1127, 1128, 1129, 1130, 1143, 1145, 1153, 1161, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1185, 1186, 1187, 1188, 1189, 1197, 1201, 1206, 1214, 1217, 1224, 1227, 1229, 1230, 1231, 1233, 1242, 1250, 1251, 1255, 1257, 1258, 1259, 1260, 1262, 1263, 1266, 1268, 1269, 1270, 1271], "return_as_str": [199, 309, 544], "return_dtyp": [36, 219, 309, 530, 531, 583, 584, 690, 734, 735, 773, 1101, 1125, 1126, 1242], "return_typ": [266, 271, 309], "returns_scalar": [530, 735, 773, 887], "reus": [53, 54, 794, 795, 804, 830, 841, 883], "revers": [172, 187, 272, 309, 368, 378, 379, 380, 381, 382, 553, 555, 557, 682, 708, 773, 789, 848, 883, 951, 952, 953, 954, 955, 1242, 1259, 1261], "reverse_": 555, "reverse_a": 555, "reverse_b": 555, "revert": [7, 9, 10], "rhap": 636, "rhapsodi": 636, "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 201, 215, 216, 241, 278, 309, 384, 438, 440, 441, 468, 511, 512, 513, 514, 576, 589, 592, 594, 596, 598, 600, 603, 605, 607, 611, 619, 702, 714, 715, 717, 718, 760, 761, 773, 812, 816, 817, 834, 852, 883, 957, 1015, 1017, 1018, 1039, 1083, 1084, 1085, 1086, 1119, 1145, 1156, 1242, 1257, 1261], "right_on": [215, 216, 278, 309, 816, 817, 852, 883], "rightmost": [611, 773, 1145, 1242, 1263], "rld": [655, 657, 1193], "rle": [588, 773, 1130, 1242], "rle_id": [587, 773, 1242], "rle_id_a": [588, 773], "rle_id_ab": [588, 773], "rn": [129, 130, 143], "role": 132, "roll": [201, 309, 391, 410, 411, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 703, 749, 750, 773, 812, 883, 963, 986, 987, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1242], "rollback": [411, 987], "rolled_forward": 391, "rollforward": [410, 986], "rolling_map": [773, 1242], "rolling_max": [773, 1242], "rolling_max_bi": 773, "rolling_mean": [773, 1242], "rolling_mean_bi": 773, "rolling_median": [773, 1242], "rolling_median_bi": 773, "rolling_min": [773, 1242], "rolling_min_bi": 773, "rolling_quantil": [773, 1242], "rolling_quantile_bi": 773, "rolling_row_max": [592, 773], "rolling_row_mean": [594, 773], "rolling_row_median": [596, 773], "rolling_row_min": [598, 773], "rolling_row_quantil": [600, 773], "rolling_row_std": [603, 773], "rolling_row_sum": [605, 773], "rolling_row_var": [607, 773], "rolling_skew": [773, 1242], "rolling_std": [773, 1242], "rolling_std_bi": 773, "rolling_sum": [590, 773, 1131, 1242], "rolling_sum_bi": 773, "rolling_var": [773, 1242], "rolling_var_bi": 773, "rollinggroupbi": [241, 309], "rollinginterpolationmethod": [180, 236, 301, 309, 577, 599, 600, 746, 773, 799, 831, 873, 883, 958, 1120, 1136, 1242], "ronaldo": [633, 1169], "root": [133, 144, 371, 542, 552, 553, 555, 557, 559, 560, 623, 772, 773, 942, 1159, 1242, 1262], "round": [20, 36, 49, 123, 131, 309, 372, 376, 451, 609, 678, 773, 943, 1027, 1142, 1242, 1261], "round_sig_fig": [773, 1242], "round_str": 993, "round_td": 993, "rounded_corn": 20, "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 172, 174, 184, 189, 192, 194, 195, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 225, 230, 234, 241, 244, 245, 254, 260, 263, 265, 266, 271, 272, 274, 276, 277, 278, 285, 286, 290, 292, 294, 295, 303, 309, 313, 334, 335, 343, 358, 368, 444, 452, 456, 462, 484, 495, 522, 569, 570, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 620, 622, 632, 640, 677, 682, 696, 699, 704, 706, 708, 723, 727, 729, 730, 732, 747, 749, 750, 758, 763, 773, 789, 792, 794, 802, 808, 809, 810, 812, 813, 816, 817, 818, 820, 821, 825, 842, 847, 848, 849, 851, 852, 858, 859, 862, 864, 866, 867, 875, 883, 904, 913, 1020, 1021, 1029, 1034, 1056, 1067, 1115, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1157, 1168, 1176, 1214, 1242, 1250, 1257, 1259, 1269, 1271], "row_group": [141, 148], "row_group_s": [41, 45, 309, 883], "row_height": [36, 309], "row_index": [36, 309], "row_index_nam": [129, 130, 135, 137, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 141, 143, 146, 147, 148], "row_nr": [285, 309, 858, 883], "row_tot": [36, 309], "rowname_col": [309, 313], "rows_by_kei": [213, 243, 309], "rowserror": [242, 309], "rowtotalsdefinit": [36, 309], "rpc": 131, "rstrip": 553, "rtol": [152, 153, 154, 155], "rtrim": 1261, "ru": 1263, "rule": [129, 141, 143, 148, 194, 309, 627, 648, 663, 1163, 1184, 1199], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 200, 217, 219, 248, 274, 284, 295, 309, 383, 494, 530, 531, 587, 588, 643, 751, 773, 794, 795, 804, 811, 821, 825, 830, 837, 841, 849, 851, 856, 883, 889, 956, 1066, 1101, 1129, 1130, 1179, 1242, 1268, 1271], "runtimeerror": [267, 309, 1223, 1242], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 219, 295, 309, 635, 883, 887, 1101, 1171, 1242], "s1": [46, 84, 85, 154, 155, 194, 309, 928, 1013, 1030, 1053, 1061, 1094, 1122, 1233, 1242], "s2": [1, 46, 84, 85, 154, 155, 194, 309, 928, 944, 960, 1013, 1030, 1044, 1053, 1061, 1094, 1107, 1122, 1233, 1242], "s3": [1, 35, 133, 144, 145, 148, 149, 309, 928, 1094, 1242], "s_bar": 1259, "s_dt": [1263, 1264], "s_dt1": 1263, "s_dt2": 1263, "s_foo": 1259, "s_from_str_repr": [1220, 1242], "s_head_5": 638, "s_head_n": 638, "s_tail_5": 661, "s_tail_n": 661, "s_tm": [1263, 1264], "safe": [581, 773, 1123, 1242], "sam": 12, "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 192, 200, 219, 234, 243, 244, 255, 274, 283, 284, 288, 295, 309, 317, 324, 357, 389, 390, 448, 452, 454, 455, 458, 521, 535, 539, 569, 583, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 622, 632, 642, 673, 769, 773, 794, 795, 808, 811, 821, 843, 849, 855, 856, 860, 883, 889, 891, 927, 961, 962, 967, 1093, 1101, 1125, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1168, 1178, 1233, 1242, 1255, 1257, 1264], "samoa": [392, 964], "sampl": [129, 130, 295, 309, 619, 773, 867, 1156, 1242], "sample_s": [129, 130], "sampled_from": 1271, "satisfi": [468, 773, 1039, 1242], "saturdai": [201, 309, 812, 883], "save": [2, 3, 6, 201, 216, 241, 279, 309, 392, 400, 413, 417, 430, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 719, 760, 761, 769, 773, 785, 812, 817, 834, 883, 972, 989, 993, 1006], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [211, 219, 242, 309, 530, 611, 638, 643, 650, 661, 733, 735, 773, 887, 1053, 1145, 1174, 1179, 1186, 1197, 1242], "scale": [28, 63, 187, 309, 531, 573, 664, 773, 889, 1014, 1200, 1242], "scale_negative_even": [573, 773], "scan": [119, 122, 129, 130, 131, 134, 138, 140, 143, 144, 145, 146, 147, 148, 149, 309, 640, 813, 820, 883, 1176], "scan_csv": [42, 43, 44, 45, 129, 130, 883], "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "scatter": [309, 312, 1242], "scenario": 1242, "schedul": [54, 795, 883], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 147, 148, 174, 175, 176, 182, 185, 187, 214, 217, 219, 226, 230, 267, 271, 309, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 398, 521, 522, 540, 554, 556, 558, 640, 690, 755, 773, 785, 792, 793, 796, 797, 801, 803, 821, 826, 854, 867, 883, 889, 947, 1176, 1242, 1250], "schema_mod": [35, 309], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 214, 267, 309, 883, 889], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 309, 883], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 148, 309, 755, 821, 867, 883], "schindler": 1250, "scientif": [11, 33, 42, 309, 883], "scikit": [271, 309], "scipi": [480, 619, 773, 1054, 1156, 1242, 1246], "scope": [168, 784, 889, 1253, 1256, 1268], "score": [36, 234, 309], "scroll": [36, 309], "sdiff": 513, "search": [216, 309, 522, 627, 636, 648, 817, 843, 883, 1163, 1172, 1184], "search_sort": [773, 1242], "searchsortedsid": [611, 773, 1145, 1242], "searchstrategi": [156, 158, 159, 160, 161, 163], "season": [646, 647], "sec": [1264, 1271], "second": [33, 42, 143, 146, 152, 153, 154, 155, 201, 216, 241, 279, 309, 402, 405, 407, 408, 412, 413, 417, 429, 430, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 646, 647, 660, 663, 716, 717, 718, 719, 759, 760, 761, 763, 773, 812, 817, 834, 883, 889, 989, 993, 1005, 1006, 1016, 1182, 1183, 1196, 1199, 1242, 1263, 1264, 1269, 1271], "second_part": [652, 653, 1188, 1189], "seconds_diff": 429, "secret": [145, 148], "section": [234, 309, 626, 633, 634, 637, 646, 647, 714, 715, 717, 718, 760, 761, 1162, 1169, 1170, 1173, 1182, 1183], "secur": [386, 773, 800, 883], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 135, 137, 141, 143, 144, 145, 148, 152, 153, 154, 155, 159, 163, 178, 201, 215, 233, 234, 309, 312, 313, 373, 447, 480, 530, 619, 626, 633, 634, 637, 638, 646, 647, 661, 714, 715, 717, 718, 747, 760, 761, 769, 773, 794, 795, 812, 883, 887, 889, 940, 946, 1054, 1156, 1162, 1169, 1170, 1173, 1174, 1182, 1183, 1197, 1242, 1246, 1271], "seed": [150, 202, 245, 309, 461, 510, 579, 610, 615, 773, 1033, 1082, 1121, 1143, 1152, 1242], "seed_1": [202, 309, 461, 773, 1033, 1242], "seed_2": [202, 309, 461, 773, 1033, 1242], "seed_3": [202, 309, 461, 773, 1033, 1242], "seen": [361, 453, 773], "seen_group": 130, "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 171, 211, 212, 216, 219, 230, 233, 242, 248, 254, 256, 269, 275, 279, 286, 309, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 348, 349, 350, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 383, 385, 387, 388, 389, 390, 393, 395, 396, 404, 410, 411, 413, 416, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435, 438, 440, 441, 442, 443, 444, 445, 449, 451, 453, 456, 460, 461, 463, 464, 465, 466, 469, 470, 473, 479, 480, 481, 483, 494, 495, 522, 525, 526, 527, 528, 530, 531, 532, 533, 534, 537, 547, 549, 551, 552, 554, 556, 558, 561, 562, 566, 567, 568, 569, 571, 572, 575, 577, 578, 579, 580, 581, 582, 585, 586, 587, 590, 601, 608, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 632, 633, 634, 635, 636, 637, 639, 660, 671, 673, 676, 678, 679, 681, 682, 684, 685, 686, 687, 688, 691, 693, 695, 698, 699, 700, 703, 705, 706, 707, 708, 711, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 736, 738, 740, 741, 743, 744, 747, 748, 752, 753, 754, 755, 756, 758, 762, 769, 773, 788, 797, 817, 829, 837, 842, 844, 850, 857, 859, 883, 889, 992, 1028, 1066, 1144, 1146, 1157, 1177, 1196, 1242, 1250, 1251, 1252, 1253, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270], "select_from": [158, 161, 163], "select_seq": [309, 883], "selector": [0, 36, 173, 182, 184, 188, 225, 232, 234, 264, 266, 271, 274, 276, 277, 309, 313, 442, 448, 537, 773, 785, 791, 801, 802, 805, 825, 849, 851, 883], "selectortyp": [36, 309, 889], "self": [1, 48, 49, 50, 51, 53, 54, 256, 287, 309, 752, 773, 794, 795, 804, 830, 841, 844, 857, 883, 895, 937, 947, 951, 1021, 1025, 1036, 1100, 1101, 1112, 1116, 1117, 1122, 1125, 1126, 1144, 1146, 1147, 1158, 1230, 1233, 1242, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268], "semi": [126, 215, 309, 816, 883, 1257], "semigraph": 20, "sens": [129, 135, 137, 146, 226, 279, 309, 569, 773, 826, 883], "sensit": [626, 634, 637, 646, 647, 1162, 1170, 1173, 1182, 1183], "sep": 126, "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 232, 234, 264, 273, 275, 309, 343, 346, 495, 501, 531, 632, 704, 709, 710, 773, 850, 883, 913, 916, 1067, 1073, 1168, 1212, 1218, 1242, 1263], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [36, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 172, 180, 188, 189, 215, 216, 225, 230, 232, 233, 234, 244, 255, 264, 266, 271, 272, 276, 277, 278, 279, 309, 358, 368, 384, 455, 472, 522, 530, 573, 576, 583, 584, 622, 658, 659, 673, 682, 699, 709, 710, 723, 725, 734, 735, 744, 747, 753, 773, 789, 799, 805, 816, 817, 825, 829, 843, 848, 851, 852, 883, 889, 928, 957, 958, 1021, 1094, 1119, 1125, 1126, 1210, 1242], "sequenti": [53, 54, 248, 284, 309, 794, 795, 804, 830, 837, 841, 856, 883], "ser": [969, 970, 996], "seri": [0, 1, 11, 25, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 152, 154, 155, 159, 183, 192, 194, 196, 198, 201, 202, 205, 206, 208, 210, 212, 221, 223, 228, 239, 241, 245, 259, 262, 265, 267, 269, 270, 289, 309, 324, 335, 358, 362, 370, 372, 416, 445, 448, 451, 455, 456, 465, 470, 472, 473, 475, 476, 477, 478, 489, 495, 497, 522, 528, 530, 531, 579, 580, 581, 582, 583, 584, 589, 590, 601, 612, 614, 638, 660, 661, 662, 663, 667, 671, 681, 686, 696, 700, 709, 710, 714, 715, 717, 718, 723, 725, 729, 730, 733, 734, 735, 745, 747, 748, 751, 752, 755, 760, 761, 764, 773, 785, 808, 812, 834, 861, 883, 887, 1234, 1236, 1238, 1241, 1243, 1246, 1247, 1248, 1249, 1251, 1253, 1268, 1271], "serial": [39, 40, 181, 309, 386, 546, 773, 800, 883], "serializ": [773, 887], "serializationformat": [181, 249, 309, 386, 543, 773, 800, 838, 883], "server": [34, 131, 132, 309], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "session": 131, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 177, 184, 193, 196, 200, 202, 213, 216, 223, 225, 243, 245, 247, 249, 254, 259, 261, 264, 266, 267, 271, 273, 274, 276, 277, 278, 283, 309, 321, 323, 345, 346, 358, 373, 384, 416, 433, 461, 472, 497, 499, 501, 510, 511, 512, 513, 514, 516, 522, 530, 531, 537, 543, 573, 576, 583, 584, 590, 591, 593, 595, 597, 599, 602, 604, 606, 610, 615, 619, 620, 625, 639, 640, 646, 647, 650, 655, 656, 657, 658, 659, 660, 662, 663, 667, 687, 691, 693, 696, 700, 704, 714, 715, 716, 717, 718, 719, 729, 730, 733, 745, 748, 749, 750, 755, 760, 761, 763, 764, 773, 785, 794, 795, 802, 804, 811, 816, 817, 821, 825, 836, 838, 842, 849, 851, 852, 855, 867, 883, 887, 893, 894, 915, 916, 928, 932, 946, 957, 992, 1009, 1026, 1033, 1044, 1051, 1069, 1071, 1073, 1082, 1083, 1084, 1085, 1086, 1088, 1094, 1101, 1119, 1125, 1126, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1143, 1144, 1145, 1152, 1156, 1157, 1161, 1175, 1176, 1182, 1183, 1186, 1191, 1192, 1193, 1196, 1198, 1199, 1203, 1217, 1223, 1231, 1242, 1267, 1271], "set_": 168, "set_ascii_t": 168, "set_auto_structifi": [247, 283, 309, 836, 855, 883], "set_decimal_separ": 27, "set_environ": 162, "set_except": [54, 795, 883], "set_fmt_float": 30, "set_fmt_str_length": [627, 636, 648, 1163, 1184], "set_index": [201, 309, 812, 883], "set_sort": [241, 279, 309, 589, 773, 817, 834, 883, 1242], "set_stat": 30, "set_streaming_chunk_s": [794, 883], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 47, "set_tbl_row": 168, "set_thousands_separ": 9, "set_verbos": 168, "setosa": [309, 312], "setup": 1271, "sever": [116, 118, 119, 120, 122, 138, 139, 147, 309, 883, 1271], "sfu": 132, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 245, 247, 249, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 548, 549, 550, 551, 552, 553, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 773, 788, 789, 791, 792, 794, 795, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 889, 891, 892, 895, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1106, 1112, 1113, 1115, 1116, 1117, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1149, 1150, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1212, 1214, 1215, 1216, 1218, 1219, 1220, 1225, 1227, 1228, 1229, 1230, 1231, 1233, 1242, 1250, 1251, 1252, 1253, 1255, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1268, 1269], "share": [152, 153, 154, 155, 187, 309, 1014, 1242], "shawshank": 1250, "sheet": [36, 134, 140, 309], "sheet1": [36, 309], "sheet_id": [134, 140], "sheet_nam": [134, 140], "sheet_zoom": [36, 309], "sheetnam": [134, 140], "shift": [201, 309, 361, 387, 453, 492, 570, 703, 773, 812, 883, 959, 1064, 1115, 1242], "short": [152, 154], "shorten": [152, 154], "shorter": [129, 130, 143, 522, 729, 730], "should": [10, 34, 36, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 182, 213, 216, 219, 242, 243, 244, 255, 263, 264, 275, 295, 309, 319, 383, 386, 433, 439, 442, 475, 476, 494, 531, 543, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 611, 619, 622, 687, 699, 719, 721, 733, 735, 749, 750, 763, 769, 773, 800, 801, 816, 817, 821, 838, 843, 850, 883, 889, 956, 1009, 1016, 1066, 1101, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1145, 1156, 1231, 1242, 1251], "show": [30, 36, 180, 184, 199, 217, 231, 309, 463, 773, 799, 802, 830, 841, 883, 1035, 1242, 1255, 1267], "show_graph": [217, 309, 883], "show_plot": [830, 883], "shrink": [253, 309, 614, 773, 1150, 1151, 1242], "shrink_dtyp": [773, 1242], "shrink_to_fit": [309, 1242], "shuffl": [150, 245, 271, 295, 309, 510, 610, 773, 867, 1082, 1143, 1242], "side": [36, 201, 241, 309, 468, 511, 512, 513, 514, 589, 592, 594, 596, 598, 600, 603, 605, 607, 611, 714, 715, 717, 718, 760, 761, 773, 812, 834, 883, 887, 1039, 1083, 1084, 1085, 1086, 1145, 1242], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 413, 581, 646, 647, 670, 773, 889, 989, 1123, 1182, 1183, 1206, 1242, 1261], "sign_x": 1262, "signed_integ": 889, "signific": [213, 219, 309, 531, 609, 773, 1101, 1142, 1242], "significantli": [134, 219, 295, 309, 1101, 1242, 1271], "silenc": 91, "silent": [665, 1201], "similar": [32, 41, 128, 165, 194, 216, 252, 274, 276, 309, 353, 419, 422, 515, 569, 613, 674, 732, 763, 773, 817, 840, 849, 851, 883, 923, 995, 998, 1087, 1149, 1242], "similarli": [36, 119, 201, 216, 241, 279, 309, 413, 417, 430, 589, 592, 594, 596, 598, 600, 603, 605, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 989, 993, 1006], "simpl": [36, 230, 309], "simpler": 889, "simpli": [143, 709, 723], "simplifi": [42, 43, 44, 45, 53, 54, 794, 795, 804, 830, 841, 883], "simplify_express": [42, 43, 44, 45, 53, 54, 794, 795, 804, 830, 841, 883], "sin": [773, 1242, 1261], "sinc": [35, 61, 62, 77, 131, 133, 143, 144, 146, 156, 157, 158, 159, 163, 166, 171, 267, 285, 290, 309, 398, 401, 433, 454, 530, 546, 583, 625, 632, 689, 698, 725, 773, 788, 804, 843, 857, 858, 862, 883, 970, 973, 978, 979, 1009, 1032, 1125, 1161, 1168, 1223, 1242], "sind": 1261, "sine": [328, 329, 530, 617, 618, 773, 898, 899, 1154, 1155, 1242, 1265], "sing": [668, 1204], "singl": [36, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 148, 157, 173, 182, 183, 184, 189, 196, 202, 211, 219, 232, 242, 244, 255, 266, 267, 309, 342, 373, 391, 413, 455, 458, 461, 491, 497, 530, 531, 580, 583, 585, 587, 622, 625, 638, 639, 643, 650, 661, 689, 699, 703, 704, 730, 734, 735, 753, 761, 769, 773, 791, 794, 795, 801, 802, 843, 883, 889, 912, 946, 963, 989, 1021, 1033, 1063, 1069, 1122, 1125, 1127, 1129, 1161, 1174, 1175, 1179, 1186, 1197, 1217, 1223, 1242, 1252], "sinh": [773, 1242], "sink_csv": 883, "sink_ipc": 883, "sink_ndjson": 883, "sink_parquet": 883, "site_id": [309, 313], "six": [611, 773], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 187, 277, 309, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 696, 729, 730, 749, 750, 773, 794, 883, 1014, 1127, 1137, 1242, 1271], "sizeunit": [187, 309, 1014, 1242], "skew": [601, 773, 1137, 1242], "skewtest": [619, 773, 1156, 1242], "skip": [129, 130, 134, 141, 143, 148, 216, 277, 309, 1101, 1242, 1257], "skip_empty_lin": 134, "skip_nul": [531, 773, 1101, 1242], "skip_row": [129, 130, 143], "skip_rows_after_head": [129, 130, 143], "sklearn": [271, 309], "slice": [42, 43, 44, 45, 48, 53, 54, 187, 203, 214, 260, 309, 500, 520, 531, 540, 542, 590, 591, 593, 595, 597, 599, 602, 604, 606, 638, 661, 773, 794, 795, 804, 821, 830, 841, 883, 887, 1014, 1034, 1072, 1092, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1174, 1197, 1214, 1242, 1263], "slice_pushdown": [42, 43, 44, 45, 53, 54, 794, 795, 804, 821, 830, 841, 883], "slide": [383, 773, 956, 1242], "slightli": [42, 43, 44, 45, 87, 452, 773, 883, 1264], "slot": [383, 387, 492, 773, 956, 959, 1064, 1242], "slow": [103, 119, 122, 129, 130, 131, 134, 138, 140, 143, 147, 309, 383, 531, 590, 640, 773, 867, 883, 956, 1131, 1176, 1242], "slower": [120, 122, 134, 200, 219, 232, 279, 295, 309, 531, 735, 773, 811, 867, 883, 1101, 1242], "small": [11, 132, 417, 883, 1271], "smaller": [41, 45, 187, 309, 883, 1014, 1242], "smallest": [172, 272, 309, 367, 368, 682, 773, 789, 848, 883, 936, 1242, 1258, 1260], "smooth": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "snappi": [31, 41, 45, 309, 883], "snippet": [802, 883], "snowflak": [131, 132], "snowi": [646, 647], "so": [1, 131, 132, 143, 165, 199, 201, 234, 241, 309, 335, 345, 386, 452, 468, 499, 522, 531, 589, 646, 647, 648, 655, 656, 657, 671, 773, 800, 812, 834, 883, 889, 915, 1071, 1182, 1183, 1184, 1191, 1192, 1193], "softwar": [32, 128, 309], "solut": [34, 309], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 143, 170, 184, 234, 244, 267, 309, 313, 769, 802, 883, 1044, 1242, 1271], "some_account": [634, 1170], "some_t": 1270, "someth": [530, 773], "sometim": [719, 772], "somewher": [634, 1170], "sort": [47, 48, 172, 201, 216, 226, 233, 234, 241, 250, 272, 279, 292, 303, 309, 334, 367, 368, 439, 448, 531, 569, 589, 612, 622, 681, 682, 687, 689, 699, 735, 773, 789, 804, 812, 817, 826, 829, 830, 834, 839, 841, 848, 864, 875, 883, 889, 904, 936, 1016, 1051, 1147, 1227, 1228, 1231, 1242, 1257, 1269, 1271], "sort_bi": [569, 773], "sort_column": [234, 309], "sorted_asc": [1026, 1242], "sorted_desc": [1026, 1242], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 773, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1268], "source_ac": 123, "source_actor_id": 123, "source_alia": [35, 309], "source_cha": 123, "source_channel_id": 123, "space": [20, 201, 309, 812, 883, 889], "spam": [222, 309, 634, 1170], "span": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "spanner": [309, 313], "spark": [41, 309], "sparklin": [36, 309], "speak": [619, 773, 1156, 1242], "spearman": 705, "speci": [309, 312], "special": [34, 129, 130, 132, 143, 271, 286, 309, 590, 634, 646, 647, 773, 859, 883, 1101, 1131, 1170, 1182, 1183, 1242], "specif": [1, 30, 35, 36, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 173, 213, 215, 216, 266, 309, 419, 422, 660, 662, 663, 667, 687, 773, 791, 816, 817, 883, 888, 889, 995, 998, 1196, 1198, 1199, 1203, 1221, 1231, 1242, 1257, 1268, 1271], "specifi": [33, 35, 36, 42, 47, 88, 91, 94, 109, 112, 134, 140, 160, 172, 173, 187, 188, 191, 196, 200, 201, 215, 232, 234, 241, 242, 244, 247, 248, 252, 255, 266, 272, 275, 283, 284, 288, 309, 368, 373, 438, 440, 441, 442, 447, 569, 582, 584, 591, 593, 595, 597, 599, 602, 604, 606, 613, 622, 674, 682, 699, 702, 703, 704, 714, 715, 717, 718, 719, 721, 751, 755, 760, 761, 769, 773, 789, 791, 805, 807, 811, 812, 816, 834, 836, 837, 840, 843, 848, 850, 855, 856, 860, 883, 889, 946, 1014, 1015, 1017, 1018, 1024, 1126, 1149, 1221, 1242, 1257, 1270], "speed": [45, 250, 309, 531, 773, 839, 883, 1271], "speedup": [47, 213, 219, 309, 531, 773, 1101, 1242], "split": [1, 36, 48, 214, 309, 632, 652, 653, 1168, 1188, 1189], "split_by_column_dtyp": 50, "split_inclus": 651, "splitfram": [1, 48], "spreadsheet": [32, 128, 134, 140, 234, 309], "spring": [646, 647], "sql": [0, 34, 106, 107, 115, 131, 132, 215, 252, 309, 353, 515, 613, 732, 753, 773, 785, 840, 883, 923, 1087, 1149, 1242, 1250, 1251, 1253, 1255, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1269, 1270], "sql_expr": 1268, "sqlalchemi": [34, 131, 151, 309], "sqlcontext": [256, 309, 752, 844, 883, 1267], "sqlite": [34, 131, 309], "sqrt": [531, 619, 674, 773, 1101, 1156, 1242, 1261], "sqrt_x": 1262, "squar": [1, 51, 295, 480, 585, 623, 773, 867, 1054, 1127, 1159, 1242, 1262], "st": 1271, "stabil": [202, 309, 461, 773, 1033, 1242], "stabl": [141, 178, 180, 181, 202, 245, 249, 256, 309, 386, 461, 527, 543, 773, 799, 800, 825, 838, 843, 844, 851, 883, 1033, 1242], "stack": [55, 205, 281, 309, 1251], "stai": [530, 773], "standalon": [157, 889], "standard": [10, 36, 257, 266, 271, 309, 404, 440, 602, 603, 619, 624, 641, 754, 769, 773, 845, 883, 976, 1017, 1156, 1160, 1177, 1242, 1258, 1271], "standardis": [36, 309], "start": [36, 127, 129, 130, 132, 135, 137, 140, 141, 143, 146, 147, 148, 165, 195, 200, 201, 217, 254, 279, 285, 286, 309, 362, 365, 366, 391, 399, 409, 414, 417, 430, 431, 442, 456, 498, 516, 588, 592, 594, 596, 598, 600, 603, 605, 607, 620, 626, 631, 634, 645, 650, 654, 655, 657, 658, 661, 670, 696, 701, 709, 713, 714, 715, 716, 717, 718, 721, 723, 729, 730, 760, 761, 763, 769, 773, 810, 811, 812, 830, 842, 858, 859, 883, 889, 935, 963, 965, 968, 971, 973, 974, 980, 982, 984, 985, 988, 990, 993, 997, 1006, 1007, 1029, 1070, 1088, 1130, 1157, 1167, 1170, 1181, 1186, 1190, 1191, 1193, 1197, 1206, 1242, 1257, 1263, 1271], "start_bi": [201, 309, 812, 883], "startbi": [201, 309, 812, 883], "starts_a": 1263, "starts_with": [48, 234, 309, 313, 362, 365, 537, 626, 631, 752, 844, 883, 889, 1167, 1261], "starts_with_expr": 366, "starts_with_lit": 366, "startup": [266, 309], "stat": [480, 619, 773, 1054, 1156, 1242], "state": [4, 99, 709, 785, 804, 830, 841, 883, 1268], "statement": [763, 1255, 1269], "static": [82, 867], "statist": [41, 45, 129, 130, 141, 148, 180, 309, 440, 441, 480, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 619, 773, 799, 883, 958, 1017, 1018, 1054, 1137, 1156, 1242], "std": [180, 309, 602, 603, 773, 799, 883, 958, 1138, 1242], "std_dev": [36, 309], "stddev": 1261, "stddev_samp": 1258, "stdev": [36, 309, 1258], "stdev_samp": 1258, "stdout": [168, 199, 309, 544], "step": [277, 309, 452, 696, 729, 730, 773], "steve": [226, 309, 826, 883], "still": [131, 132], "stock_1": [309, 312], "stock_2": [309, 312], "stop": [127, 129, 130, 135, 137, 141, 143, 146, 147, 148, 592, 594, 596, 598, 600, 603, 605, 607, 773, 965, 968, 973, 974, 980, 982, 984, 988, 993, 997], "storag": [35, 129, 133, 135, 137, 141, 143, 144, 145, 146, 309], "storage_opt": [35, 129, 133, 135, 137, 141, 143, 144, 145, 146, 148, 309], "store": [35, 129, 145, 189, 213, 243, 309, 370, 587, 773, 938, 1021, 1129, 1242], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 172, 173, 177, 180, 181, 182, 183, 184, 185, 187, 188, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 208, 210, 211, 213, 215, 216, 218, 220, 222, 224, 225, 226, 227, 229, 230, 232, 234, 236, 238, 239, 240, 241, 242, 243, 245, 249, 250, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 318, 319, 320, 341, 346, 358, 362, 363, 364, 365, 366, 368, 370, 378, 384, 386, 388, 396, 413, 416, 417, 419, 422, 430, 439, 442, 448, 450, 454, 455, 458, 465, 468, 489, 490, 499, 500, 501, 516, 520, 522, 531, 540, 542, 543, 544, 546, 553, 554, 555, 556, 557, 558, 559, 560, 566, 569, 573, 576, 582, 583, 584, 586, 588, 589, 592, 594, 596, 598, 600, 603, 605, 607, 614, 621, 622, 671, 672, 673, 682, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 769, 773, 780, 789, 791, 794, 795, 797, 799, 800, 801, 802, 804, 805, 808, 811, 812, 814, 816, 817, 825, 826, 829, 830, 832, 833, 834, 838, 839, 841, 842, 843, 844, 848, 849, 850, 851, 852, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 887, 888, 889, 892, 911, 916, 928, 933, 937, 938, 957, 958, 968, 989, 992, 993, 995, 998, 1006, 1016, 1024, 1061, 1062, 1073, 1094, 1110, 1111, 1119, 1124, 1125, 1126, 1146, 1207, 1209, 1210, 1218, 1219, 1220, 1221, 1231, 1242, 1247, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1263, 1264, 1268, 1269, 1271], "str_date": 1263, "str_timestamp": 1263, "strategi": [33, 42, 47, 55, 129, 156, 157, 158, 159, 160, 161, 163, 191, 201, 215, 216, 229, 278, 309, 447, 522, 531, 773, 807, 812, 816, 817, 852, 883, 1024, 1094, 1242], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 137, 200, 215, 274, 309, 530, 773, 794, 795, 804, 811, 816, 821, 825, 830, 841, 843, 849, 851, 883], "streamabl": [821, 825, 851, 883], "strftime": [87, 422, 998, 1261, 1263], "strict": [118, 119, 122, 126, 173, 182, 309, 363, 369, 626, 629, 637, 660, 662, 663, 665, 667, 773, 791, 801, 883, 889, 932, 937, 1162, 1165, 1173, 1196, 1198, 1199, 1201, 1203, 1242], "strictli": [33, 42, 46, 85, 309, 883], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 172, 173, 176, 181, 185, 187, 194, 196, 199, 200, 201, 216, 232, 234, 241, 244, 246, 247, 248, 249, 255, 265, 266, 272, 273, 277, 279, 283, 284, 288, 309, 318, 341, 346, 363, 364, 365, 368, 386, 413, 417, 419, 422, 430, 439, 442, 450, 454, 468, 501, 543, 544, 569, 573, 583, 584, 589, 592, 594, 596, 598, 600, 603, 605, 607, 622, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 674, 682, 690, 692, 694, 699, 702, 703, 704, 712, 714, 715, 717, 718, 724, 737, 739, 742, 751, 755, 757, 760, 761, 763, 769, 773, 785, 789, 791, 796, 800, 803, 804, 811, 812, 817, 834, 835, 836, 837, 838, 843, 848, 855, 856, 860, 883, 888, 889, 916, 932, 933, 934, 939, 989, 993, 995, 998, 1006, 1016, 1039, 1073, 1125, 1126, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1220, 1221, 1242, 1250, 1251, 1259, 1261, 1264, 1267, 1271], "stringcach": [84, 85, 215, 309, 785, 939, 940], "stringio": [138, 139, 454, 773], "strings_hex": 630, "strip": [28, 655, 656, 657, 658, 659, 1191, 1192, 1193, 1263], "strip_chars_end": [657, 659], "strip_chars_start": [656, 658], "strip_prefix": [657, 659], "strip_suffix": [656, 658], "strongli": [36, 165, 219, 242, 295, 309, 531, 773, 1101, 1242], "strpo": 1261, "strpost": 1263, "strptime": [241, 309, 416, 589, 773, 834, 883, 992, 1261], "struct": [8, 112, 123, 230, 247, 270, 275, 283, 309, 358, 384, 463, 522, 531, 554, 556, 558, 576, 587, 588, 635, 640, 652, 653, 687, 709, 710, 712, 734, 773, 836, 850, 855, 867, 883, 928, 957, 1094, 1101, 1119, 1129, 1171, 1176, 1188, 1189, 1223, 1242], "struct_col": [671, 673], "struct_seri": 867, "structarrai": [187, 309, 1014, 1242], "structfieldnotfounderror": 673, "structur": [36, 37, 38, 93, 96, 110, 126, 189, 233, 244, 261, 267, 309, 573, 773, 829, 883, 1021, 1217, 1242, 1268], "student": [234, 309], "style": [7, 20, 36, 131, 234, 309], "sub": [295, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 360, 501, 508, 773, 909, 910, 911, 914, 915, 916, 917, 918, 919, 920, 921, 925, 926, 930, 1073, 1080], "subarrai": [337, 338, 907, 908], "subclass": [1, 309], "subexpress": [53, 54, 794, 795, 804, 830, 841, 883], "subject": [234, 309], "sublist": [345, 487, 488, 490, 492, 496, 497, 498, 499, 500, 501, 502, 511, 516, 520, 522, 915, 1044, 1059, 1060, 1062, 1064, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1083, 1088, 1092, 1094, 1242], "subplan": [53, 54, 794, 795, 804, 830, 841, 883], "subsequ": [36, 237, 268, 309, 522, 752, 763, 804, 883, 1224, 1242, 1256], "subset": [184, 230, 274, 309, 802, 849, 883], "substr": [362, 365, 366, 626, 631, 637, 646, 647, 650, 651, 652, 653, 654, 889, 931, 934, 935, 1162, 1167, 1173, 1182, 1183, 1186, 1187, 1188, 1189, 1190, 1261], "subtl": [36, 309], "subtli": [452, 773], "subtract": [480, 675, 773, 1054, 1242], "succe": [129, 130, 143], "success": [628, 634, 1164, 1170], "suffix": [215, 216, 247, 283, 288, 309, 320, 365, 368, 475, 476, 477, 478, 536, 553, 555, 558, 559, 560, 569, 586, 631, 656, 659, 682, 773, 816, 817, 836, 855, 857, 860, 883, 889, 934, 1167, 1195], "sugar": [278, 309, 583, 584, 691, 693, 695, 706, 708, 711, 721, 726, 727, 728, 736, 738, 740, 741, 743, 745, 746, 751, 754, 756, 758, 762, 764, 773, 852, 883, 1125, 1126, 1159, 1242], "suitabl": [47, 55, 131, 157, 219, 309, 531, 611, 773, 1101, 1145, 1242], "sum": [36, 187, 194, 200, 201, 211, 234, 241, 259, 288, 309, 381, 382, 386, 435, 448, 522, 531, 540, 542, 543, 544, 545, 583, 584, 589, 604, 605, 689, 691, 709, 711, 712, 723, 735, 747, 757, 773, 794, 795, 800, 804, 811, 812, 828, 830, 834, 838, 841, 860, 883, 887, 889, 954, 955, 1012, 1014, 1139, 1242, 1250, 1257, 1259, 1261, 1268], "sum_": [619, 773, 1156, 1242], "sum_a": [241, 309, 589, 773, 834, 883], "sum_horizont": [47, 309, 756], "summari": [180, 309, 799, 883, 958, 1242, 1257], "summer": [646, 647], "sun": [660, 1196], "sundai": [201, 309, 391, 419, 422, 432, 701, 812, 883, 963, 995, 998, 1008], "sunni": [646, 647, 1182, 1183], "supercast": [194, 309], "supertyp": [55, 191, 267, 271, 309, 324, 703, 773, 807, 883, 887, 1242], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 192, 242, 266, 309, 448, 573, 773, 808, 883, 1221, 1242], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 148, 156, 160, 163, 168, 213, 214, 215, 216, 243, 244, 254, 255, 263, 268, 271, 309, 439, 516, 569, 583, 584, 620, 622, 638, 646, 647, 648, 650, 661, 769, 773, 779, 816, 817, 842, 843, 883, 889, 1016, 1088, 1125, 1126, 1157, 1174, 1182, 1183, 1184, 1186, 1197, 1224, 1226, 1242, 1259, 1263, 1264, 1266, 1267, 1268], "supportsinterchang": 117, "suppos": [234, 309, 531, 773, 1101, 1242], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 237, 309, 773, 887], "surreal": 131, "surreal_query_to_fram": 131, "surrealdb": 131, "surrealhttp": 131, "surrealql": 131, "suscept": 883, "swap": [832, 883], "swim": 704, "switch": [392, 964], "sy": 168, "sydnei": 716, "symbol": [32, 33, 42, 309, 773, 883], "symmetr": [513, 889, 1085], "symmetri": [797, 803, 835, 854, 883], "synchron": 878, "syntact": [278, 309, 583, 584, 691, 693, 695, 706, 708, 711, 721, 726, 727, 728, 736, 738, 740, 741, 743, 745, 746, 751, 754, 756, 758, 762, 764, 773, 852, 883, 1125, 1126, 1159, 1242], "syntax": [36, 107, 192, 219, 230, 309, 626, 633, 634, 637, 646, 647, 729, 730, 769, 808, 841, 883, 1162, 1169, 1170, 1173, 1182, 1183, 1242, 1264, 1266], "system": [32, 129, 130, 309, 396, 968], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 201, 216, 219, 233, 274, 277, 309, 383, 392, 400, 416, 435, 438, 440, 441, 494, 531, 573, 633, 637, 646, 647, 657, 660, 663, 763, 773, 812, 829, 849, 883, 889, 956, 992, 1012, 1015, 1017, 1018, 1066, 1101, 1169, 1173, 1182, 1183, 1192, 1193, 1196, 1199, 1242, 1253, 1254, 1263], "t_": [275, 309, 439, 773, 850, 883, 1016, 1242], "t_0": [241, 309, 589, 592, 594, 596, 598, 600, 603, 605, 607, 773, 834, 883], "t_1": [241, 309, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 773, 834, 883, 1016, 1242], "t_2": [439, 773, 1016, 1242], "t_a": [275, 309, 850, 883], "t_b": [275, 309, 850, 883], "t_c": [275, 309, 850, 883], "t_d": [275, 309, 850, 883], "t_i": [439, 773, 1016, 1242], "t_n": [241, 309, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 773, 834, 883, 1016, 1242], "t_struct": [275, 309, 850, 883], "tab_spann": [309, 313], "tab_stub": [309, 313], "tab_styl": [309, 313], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 144, 145, 215, 234, 256, 261, 268, 277, 278, 309, 313, 752, 785, 816, 844, 852, 883, 1251, 1252, 1253, 1254, 1256, 1257, 1267, 1268], "table_nam": [34, 36, 256, 309, 844, 883], "table_path": [35, 133, 144, 145, 309], "table_styl": [36, 309], "tablemerg": [35, 309], "tablenotfounderror": [35, 309], "tables_scale_100": [125, 130], "tail": [199, 203, 309, 324, 619, 773, 883, 1034, 1156, 1242], "take": [36, 126, 134, 140, 159, 160, 168, 194, 195, 201, 223, 226, 233, 234, 238, 309, 334, 391, 413, 448, 455, 456, 497, 498, 554, 556, 558, 622, 699, 701, 720, 722, 731, 773, 810, 812, 826, 832, 883, 904, 963, 989, 1028, 1029, 1069, 1070, 1233, 1242, 1259], "taken": [516, 650, 1088, 1186], "tan": [773, 1242, 1261], "tand": 1261, "tangent": [330, 331, 678, 679, 773, 900, 901, 1215, 1216, 1242, 1265], "tanh": [234, 309, 773, 1242], "target": [1, 34, 35, 36, 52, 134, 271, 309, 633, 660, 662, 663, 889, 1169, 1196, 1198, 1199, 1263], "target_alia": [35, 309], "target_t": [34, 309], "task": [54, 795, 883], "tb": [152, 154, 187, 309, 1014, 1242], "tbl": [125, 130, 1270], "tbl0": 1256, "tbl1": [1254, 1256], "tbl2": [1254, 1256], "tbl3": 1254, "tbl4": 1254, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 180, 309, 799, 883], "tbl_width_char": 719, "td1": 889, "td2": 889, "td3": 889, "tdf": [233, 309], "technic": 769, "tell": [627, 648, 1163, 1184], "tempor": [87, 173, 201, 213, 241, 243, 244, 263, 309, 373, 468, 589, 592, 594, 596, 598, 600, 603, 605, 607, 773, 785, 791, 812, 834, 883, 889, 946, 1039, 1242, 1261, 1267], "temporalliter": [373, 773, 946, 978, 979, 1242], "temporari": [34, 309], "temporarili": [165, 168, 201, 241, 309, 589, 773, 812, 834, 883], "tend": [152, 154], "tensor": [271, 309, 1226, 1242], "tensordataset": [271, 309], "term": [438, 440, 441, 638, 650, 661, 773, 1015, 1017, 1018, 1174, 1186, 1197, 1242], "termin": [33, 42, 309, 883], "test": [0, 34, 131, 132, 134, 140, 234, 309, 785, 813, 820, 883], "test1": 1256, "test2": 1256, "test3": 1256, "test_1": [234, 309], "test_1_math": [234, 309], "test_1_phys": [234, 309], "test_2": [234, 309], "test_2_math": [234, 309], "test_2_phys": [234, 309], "test_data": 131, "test_df_height": 159, "test_func": 734, "test_lf": [857, 883], "test_miscellan": 1271, "test_numer": 1271, "test_price_calcul": 1271, "test_series_len": 163, "test_tabl": 132, "test_unique_xyz": 157, "testdb": 132, "testing1234": 1256, "text": [128, 131, 439, 638, 642, 643, 646, 647, 649, 650, 661, 753, 773, 1016, 1174, 1178, 1179, 1185, 1186, 1197, 1242, 1256, 1271], "texttt": [619, 773, 1156, 1242], "th": [195, 309, 456, 498, 511, 619, 638, 661, 773, 810, 883, 1029, 1070, 1083, 1156, 1174, 1197, 1242], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 174, 200, 213, 215, 216, 219, 232, 242, 243, 245, 277, 295, 309, 452, 454, 457, 459, 468, 482, 510, 529, 530, 531, 544, 576, 588, 610, 619, 638, 642, 644, 645, 653, 661, 670, 705, 735, 773, 794, 795, 811, 816, 817, 867, 883, 1039, 1082, 1101, 1119, 1130, 1143, 1156, 1174, 1178, 1180, 1181, 1189, 1197, 1206, 1223, 1242, 1271], "the_aws_access_key_id": [35, 133, 144, 145, 309], "the_aws_region": [35, 309], "the_aws_secret_access_kei": [35, 133, 144, 145, 309], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 216, 217, 244, 309, 648, 656, 657, 773, 883, 887, 889], "them": [54, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 140, 141, 143, 147, 148, 188, 189, 201, 216, 226, 234, 241, 271, 279, 309, 346, 439, 468, 501, 561, 562, 569, 589, 703, 714, 715, 717, 718, 760, 761, 773, 795, 805, 812, 817, 826, 834, 883, 889, 916, 1016, 1021, 1073, 1110, 1111, 1242, 1259, 1268], "therebi": [143, 146, 147], "therefor": [187, 309, 531, 763, 773, 1014, 1242], "theta": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "thi": [1, 4, 10, 12, 14, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 175, 176, 178, 180, 181, 184, 187, 189, 193, 194, 199, 200, 201, 202, 206, 208, 210, 211, 212, 213, 215, 216, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 256, 257, 258, 261, 263, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 290, 295, 308, 309, 313, 321, 324, 325, 334, 346, 352, 353, 354, 359, 367, 368, 370, 373, 383, 384, 386, 392, 393, 404, 410, 411, 413, 416, 417, 419, 422, 433, 437, 444, 454, 461, 463, 465, 466, 468, 472, 494, 495, 501, 510, 511, 512, 513, 514, 515, 517, 522, 523, 527, 528, 530, 531, 535, 536, 537, 538, 539, 540, 541, 543, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 569, 576, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 612, 613, 614, 615, 620, 621, 622, 625, 627, 633, 636, 639, 640, 644, 645, 648, 655, 656, 657, 658, 659, 664, 670, 672, 674, 681, 682, 684, 685, 686, 687, 691, 695, 703, 706, 708, 709, 722, 723, 725, 727, 728, 731, 732, 735, 738, 740, 743, 745, 749, 750, 751, 754, 758, 762, 763, 764, 769, 773, 785, 788, 789, 790, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 811, 812, 814, 816, 817, 821, 825, 826, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 849, 851, 852, 854, 855, 856, 857, 858, 859, 862, 867, 881, 882, 883, 887, 889, 895, 904, 916, 922, 923, 924, 929, 936, 938, 940, 941, 946, 947, 956, 957, 964, 965, 967, 976, 986, 987, 989, 992, 993, 995, 998, 1009, 1011, 1014, 1020, 1021, 1029, 1030, 1033, 1035, 1044, 1053, 1066, 1067, 1073, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1095, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1114, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1157, 1158, 1160, 1161, 1163, 1169, 1172, 1175, 1176, 1180, 1181, 1184, 1191, 1192, 1193, 1200, 1206, 1207, 1209, 1212, 1213, 1217, 1219, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1230, 1231, 1232, 1242, 1246, 1250, 1251, 1252, 1256, 1263, 1266, 1267, 1268, 1269, 1271], "thing": [143, 150], "think": [410, 411, 986, 987], "third": [530, 773], "thoma": [226, 309, 826, 883], "those": [30, 36, 129, 244, 268, 278, 309, 452, 579, 633, 735, 773, 852, 883, 889, 1121, 1169, 1224, 1242], "though": [34, 131, 201, 309, 769, 812, 883], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 255, 309, 494, 531, 622, 699, 773, 795, 843, 883, 924, 1066, 1089, 1158, 1242], "thread_loc": [531, 773], "thread_pool_s": 166, "threadpool": 53, "three": [36, 241, 270, 309, 384, 576, 589, 611, 638, 661, 773, 834, 883, 928, 957, 1094, 1119, 1174, 1197, 1242], "threshold": [247, 309, 836, 883], "through": [117, 131, 769, 889, 1242, 1256], "throw": [35, 118, 119, 122, 173, 182, 309, 640, 641, 791, 801, 883, 1176, 1177, 1242], "thu": [36, 189, 309, 705, 1021, 1242], "thursdai": [201, 309, 391, 701, 812, 883, 963], "ti": [579, 773, 1121, 1242], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 143, 144, 146, 159, 160, 163, 180, 189, 201, 216, 241, 279, 309, 341, 367, 368, 392, 393, 395, 396, 397, 400, 401, 410, 411, 413, 416, 417, 419, 421, 422, 430, 433, 439, 489, 490, 522, 588, 589, 592, 594, 596, 598, 600, 603, 605, 607, 615, 660, 663, 667, 680, 681, 682, 703, 704, 714, 715, 716, 717, 718, 719, 725, 760, 761, 773, 794, 795, 799, 812, 817, 830, 834, 883, 889, 911, 936, 964, 965, 967, 968, 972, 973, 989, 992, 993, 995, 997, 998, 1006, 1009, 1016, 1021, 1061, 1062, 1130, 1152, 1196, 1199, 1203, 1225, 1227, 1242, 1250, 1256, 1264, 1271], "time_column": [279, 309], "time_format": [33, 42, 309, 883], "time_unit": [62, 64, 393, 395, 401, 421, 433, 663, 716, 717, 718, 719, 725, 889, 965, 967, 973, 997, 1009, 1199], "time_unit_m": [393, 965], "time_unit_n": [393, 965], "time_unit_u": 433, "time_zon": [62, 396, 398, 416, 663, 716, 717, 718, 889, 964, 968, 972, 992, 1199], "timedelta": [201, 216, 241, 279, 309, 413, 417, 430, 439, 589, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 605, 606, 607, 714, 715, 717, 718, 760, 761, 773, 812, 817, 834, 883, 889, 977, 983, 989, 993, 1006, 1016, 1110, 1111, 1160, 1232, 1242], "timeout": [54, 795, 883], "timestamp": [123, 133, 144, 201, 309, 416, 417, 430, 725, 812, 883, 992, 993, 1006, 1261], "timestamp_m": 421, "timestamp_n": 997, "timestamp_u": [421, 997], "timestep": 725, "timeunit": [33, 42, 62, 64, 309, 393, 395, 421, 433, 663, 716, 717, 718, 719, 883, 889, 965, 967, 997, 1009, 1199], "timezon": [62, 133, 144, 398, 889, 1264], "tip": [531, 773], "titl": [36, 309, 1250], "titlecas": [668, 1204], "tm": [395, 889, 1264], "to_arrow": [214, 309, 1223, 1242, 1268], "to_batch": [214, 309], "to_dict": [173, 309, 791, 883, 889], "to_dummi": [266, 271, 309, 1242], "to_fram": [370, 401, 417, 421, 430, 660, 957, 1119, 1144, 1146, 1188, 1189, 1196, 1242], "to_init_repr": [123, 309, 1242], "to_jax": [271, 309, 1242], "to_list": [123, 241, 309, 1162, 1173, 1242], "to_lowercas": 560, "to_numpi": [266, 271, 309, 530, 773, 1242], "to_panda": [309, 1242], "to_phys": [773, 940, 1242], "to_seri": [48, 196, 309, 660, 700, 748, 1196], "to_sql": [34, 309], "to_str": [419, 995], "to_struct": [309, 634], "to_torch": [266, 309, 1242], "to_uppercas": [320, 559, 635, 773], "togeth": 1263, "token": 145, "tokyo": [123, 889], "tokyo_tz": 889, "toler": [152, 153, 154, 155, 216, 309, 817, 883], "tone": [36, 309], "tonight": [627, 648, 1163, 1184], "too": [14, 234, 309, 883], "toomanyrowsreturnederror": [242, 309], "top": [36, 256, 272, 309, 682, 773, 844, 848, 883, 1268], "top_col": [36, 309], "top_k": [172, 309, 367, 368, 682, 773, 789, 883, 936, 1242], "top_k_bi": [367, 368, 681, 773], "top_row": [36, 309], "tor_id": 123, "torch": [151, 271, 309, 1226, 1242], "torchexporttyp": [271, 309], "tostructstrategi": [522, 1094], "total": [36, 187, 290, 309, 423, 424, 425, 426, 427, 428, 429, 483, 503, 773, 862, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1014, 1055, 1075, 1242], "total_gross": 1250, "toward": [290, 483, 503, 708, 773, 862, 1055, 1075, 1242], "tp": [1, 50], "tpch": [125, 130], "tpu": [266, 309, 1221, 1242], "traceback": [152, 153, 154, 155, 267, 309, 584, 773, 1126, 1223, 1242], "tracebacktyp": 1268, "track": [133, 144, 145, 219, 309, 522, 1268], "trail": [28, 199, 309, 655, 656, 1191, 1192], "train": [271, 309], "train_lf": [857, 883], "transfer": 132, "transferencod": [363, 364, 629, 630, 932, 933, 1165, 1166], "transform": [219, 256, 309, 530, 666, 668, 669, 752, 773, 844, 883], "translat": 131, "transpos": [234, 309], "travel": [133, 144], "travers": [591, 593, 595, 597, 599, 602, 604, 606, 773, 1132, 1133, 1135, 1138, 1139, 1140, 1242], "treat": [129, 130, 143, 439, 626, 628, 637, 646, 647, 763, 773, 1016, 1162, 1164, 1173, 1182, 1183, 1242], "tree": [544, 804, 883], "tree_format": [804, 883], "trend": [36, 309], "tri": [219, 309], "triangl": [295, 867], "trigger": [35, 268, 309, 773, 887, 1224, 1242], "trigonometri": [1261, 1267], "trim": [123, 1263], "trim_decimal_zero": 28, "trip": 131, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 170, 173, 174, 175, 180, 182, 186, 191, 192, 194, 196, 198, 199, 200, 201, 206, 208, 209, 210, 213, 215, 216, 217, 222, 223, 229, 230, 232, 234, 235, 242, 243, 244, 245, 247, 255, 256, 259, 261, 262, 264, 266, 267, 268, 271, 273, 274, 275, 277, 278, 279, 283, 289, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 319, 320, 321, 322, 323, 324, 335, 337, 338, 341, 345, 346, 354, 358, 362, 363, 365, 366, 368, 369, 378, 379, 380, 381, 382, 384, 391, 393, 396, 399, 401, 403, 410, 411, 413, 414, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 440, 441, 448, 455, 457, 458, 459, 460, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 490, 497, 499, 501, 517, 522, 529, 530, 531, 535, 536, 537, 538, 539, 540, 541, 544, 545, 563, 564, 566, 568, 571, 572, 576, 581, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 614, 619, 621, 622, 625, 626, 627, 628, 629, 631, 636, 637, 639, 640, 641, 646, 647, 651, 652, 654, 660, 662, 663, 665, 667, 671, 673, 682, 684, 687, 690, 691, 692, 693, 694, 696, 699, 700, 701, 705, 714, 717, 723, 729, 735, 745, 748, 752, 755, 760, 763, 764, 773, 791, 792, 793, 794, 795, 799, 801, 804, 807, 808, 811, 812, 816, 817, 819, 821, 825, 830, 836, 841, 843, 844, 849, 850, 851, 852, 855, 861, 863, 865, 868, 869, 870, 871, 872, 873, 874, 882, 883, 887, 889, 893, 894, 905, 907, 908, 911, 915, 916, 924, 931, 932, 934, 935, 937, 939, 941, 944, 945, 957, 963, 964, 965, 968, 971, 972, 973, 974, 975, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1015, 1017, 1018, 1025, 1031, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1057, 1058, 1062, 1069, 1071, 1073, 1089, 1101, 1107, 1113, 1116, 1117, 1119, 1122, 1123, 1137, 1156, 1158, 1161, 1162, 1163, 1164, 1165, 1167, 1172, 1173, 1175, 1176, 1177, 1182, 1183, 1187, 1188, 1190, 1196, 1198, 1199, 1201, 1203, 1217, 1218, 1223, 1224, 1231, 1233, 1242, 1250, 1251, 1253, 1255, 1259, 1260, 1263, 1268, 1271], "truediv": [452, 773], "truncat": [123, 129, 130, 143, 199, 201, 213, 243, 244, 263, 309, 812, 830, 883, 1267], "truncate_nod": [830, 883], "truncate_ragged_lin": [129, 130, 143], "truncate_str": 430, "truncate_td": 430, "trust": [386, 773, 800, 883], "try": [53, 54, 110, 129, 130, 135, 141, 143, 146, 148, 794, 795, 804, 830, 841, 883], "try_cast": 1261, "try_parse_d": [125, 129, 130, 143], "try_parse_hive_d": [141, 148], "ts_local": [416, 992], "tseri": [410, 411, 986, 987], "tstamp": 889, "tstamp_tokyo": 889, "tstamp_utc": 889, "tuesdai": [201, 309, 812, 883], "tupl": [36, 56, 132, 134, 140, 213, 219, 232, 242, 243, 244, 251, 271, 287, 309, 585, 773, 830, 841, 883, 888, 889, 1127, 1242], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 215, 216, 309, 668, 794, 795, 804, 816, 817, 821, 830, 883, 1204], "twice": [36, 309], "two": [36, 46, 84, 85, 118, 120, 122, 132, 194, 216, 225, 226, 243, 270, 276, 289, 295, 309, 313, 319, 388, 395, 452, 455, 458, 522, 576, 621, 697, 698, 703, 705, 707, 749, 750, 752, 773, 825, 826, 851, 861, 867, 883, 889, 928, 960, 967, 1094, 1119, 1242, 1256, 1257, 1260, 1269], "two_a": 1268, "tworld": [657, 1191, 1193], "txt": [1, 12, 143, 626, 637, 1173], "type": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 176, 185, 188, 194, 199, 201, 202, 214, 215, 219, 241, 246, 261, 266, 267, 270, 271, 274, 286, 309, 321, 323, 326, 327, 328, 329, 330, 331, 334, 339, 340, 341, 343, 346, 357, 358, 362, 363, 364, 365, 366, 369, 370, 373, 374, 375, 376, 377, 384, 385, 391, 392, 394, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 439, 442, 444, 455, 458, 461, 468, 469, 470, 471, 472, 473, 474, 483, 487, 488, 490, 495, 501, 503, 521, 522, 530, 531, 576, 578, 582, 583, 584, 585, 587, 588, 589, 617, 618, 625, 628, 629, 630, 632, 633, 634, 635, 638, 639, 641, 642, 643, 650, 651, 652, 653, 660, 661, 665, 678, 679, 680, 687, 696, 703, 706, 713, 714, 715, 716, 717, 718, 719, 721, 729, 730, 732, 733, 734, 735, 745, 748, 759, 760, 761, 764, 769, 773, 785, 794, 795, 803, 804, 805, 812, 816, 830, 834, 835, 841, 849, 859, 883, 888, 893, 894, 905, 907, 908, 909, 910, 911, 913, 915, 916, 927, 928, 929, 931, 932, 933, 937, 938, 946, 957, 958, 963, 964, 966, 968, 969, 970, 971, 972, 974, 975, 976, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1020, 1033, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1057, 1058, 1059, 1060, 1062, 1067, 1073, 1075, 1093, 1094, 1113, 1119, 1125, 1126, 1127, 1129, 1130, 1151, 1161, 1162, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1174, 1175, 1177, 1178, 1179, 1186, 1187, 1188, 1189, 1196, 1197, 1201, 1222, 1223, 1225, 1233, 1242, 1250, 1257, 1261, 1263, 1267, 1268], "type_coercion": [42, 43, 44, 45, 53, 54, 794, 795, 804, 830, 841, 883], "typeerror": [35, 309], "typenam": [36, 309], "typic": [119, 131, 148, 219, 309, 400, 889, 972, 1101, 1242], "tz": [663, 1199], "tzinfo": [133, 144, 889], "u": [36, 62, 64, 148, 161, 216, 309, 393, 395, 401, 421, 433, 660, 663, 692, 694, 716, 717, 718, 719, 725, 889, 965, 967, 973, 997, 1009, 1196, 1199, 1254, 1264], "u1": [267, 309], "u16": [143, 1266, 1271], "u32": [12, 131, 171, 173, 179, 231, 285, 286, 290, 294, 300, 302, 309, 319, 325, 332, 333, 334, 335, 336, 339, 340, 342, 351, 377, 378, 463, 483, 487, 488, 491, 503, 508, 551, 567, 579, 587, 588, 592, 594, 596, 598, 600, 603, 605, 607, 611, 628, 637, 642, 643, 680, 685, 687, 691, 695, 699, 700, 706, 708, 729, 732, 743, 773, 788, 791, 798, 828, 858, 859, 862, 866, 872, 874, 883, 889, 904, 905, 906, 909, 910, 912, 921, 937, 940, 951, 1035, 1059, 1060, 1063, 1075, 1080, 1121, 1129, 1130, 1145, 1164, 1173, 1178, 1179, 1225, 1229, 1231, 1242, 1250, 1258, 1259, 1263, 1268], "u64": [202, 286, 309, 461, 581, 773, 830, 859, 883, 889, 1033, 1123, 1242], "u8": [173, 264, 265, 277, 309, 584, 690, 773, 791, 883, 889, 1126, 1218, 1242, 1271], "udf": [165, 219, 233, 295, 309, 386, 531, 573, 735, 773, 800, 829, 867, 883, 1101, 1242], "ufunc": 90, "uid": 131, "uint": 1271, "uint16": [143, 381, 382, 676, 773, 889, 954, 955, 1213, 1223, 1226, 1242], "uint2": 1266, "uint32": [124, 151, 173, 187, 241, 286, 309, 334, 339, 340, 377, 439, 455, 458, 483, 487, 488, 503, 582, 587, 588, 589, 628, 642, 643, 680, 706, 729, 732, 773, 791, 834, 859, 883, 889, 905, 909, 910, 937, 1014, 1016, 1059, 1060, 1075, 1129, 1130, 1164, 1178, 1179, 1225, 1226, 1242], "uint4": 1268, "uint64": [124, 202, 241, 286, 309, 339, 340, 439, 461, 487, 488, 581, 589, 773, 834, 859, 883, 889, 909, 910, 1016, 1033, 1059, 1060, 1123, 1226, 1242], "uint8": [131, 173, 265, 266, 267, 277, 309, 381, 382, 584, 676, 690, 773, 791, 883, 889, 954, 955, 1126, 1213, 1226, 1242, 1271], "uint8_pair": 1271, "uit": [650, 1186], "uk": [634, 1170], "un": [217, 309], "unabl": [92, 134], "unari": [565, 773], "unbias": [440, 441, 773, 1017, 1018, 1242], "unchang": [187, 309, 583, 680, 773, 821, 867, 883, 1014, 1125, 1225, 1242], "uncompress": [31, 37, 38, 41, 45, 135, 146, 309, 883], "undefin": [683, 773], "under": [46, 48, 49, 50, 51, 84, 85, 256, 309, 765, 766, 768, 769, 774, 775, 778, 780, 781, 782, 844, 883, 1234, 1236, 1238, 1243, 1247, 1248, 1249], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 188, 189, 213, 214, 243, 261, 267, 309, 363, 393, 394, 395, 399, 402, 403, 404, 405, 406, 407, 408, 409, 412, 414, 415, 416, 418, 431, 432, 433, 434, 581, 608, 626, 629, 637, 773, 805, 883, 889, 932, 940, 965, 966, 967, 971, 974, 975, 976, 980, 981, 982, 984, 985, 988, 990, 991, 992, 994, 1007, 1008, 1009, 1010, 1021, 1123, 1141, 1151, 1162, 1165, 1173, 1217, 1223, 1242, 1268], "understood": 735, "undo": [545, 552, 553, 555, 557, 559, 560], "unexpect": [99, 108, 131, 530, 531, 773, 1101, 1242], "unhelpfulli": [152, 154], "unicod": [20, 638, 643, 650, 661, 889, 1174, 1179, 1186, 1197], "unifi": [36, 266, 271, 309, 889], "uniform": [36, 309, 576, 773, 1119, 1242], "unimod": [619, 773, 1156, 1242], "union": [53, 54, 55, 514, 794, 795, 804, 830, 841, 883, 889, 1086, 1267, 1268], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 171, 210, 215, 230, 234, 244, 300, 309, 325, 336, 351, 384, 479, 508, 551, 576, 660, 662, 663, 667, 685, 687, 695, 743, 773, 788, 816, 872, 883, 887, 906, 921, 957, 1052, 1080, 1108, 1119, 1196, 1198, 1199, 1203, 1229, 1231, 1242, 1257, 1259], "unique_column_valu": [234, 309], "unique_count": [773, 1242], "uniquekeepstrategi": [274, 309, 849, 883], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 187, 309, 393, 395, 401, 421, 433, 439, 445, 528, 541, 660, 663, 686, 716, 717, 718, 719, 725, 773, 830, 883, 887, 889, 965, 967, 973, 997, 1009, 1014, 1016, 1022, 1100, 1196, 1199, 1230, 1242, 1271], "unix": [61, 62, 401, 725, 973], "unknown": [633, 733, 1169], "unless": [36, 47, 118, 266, 271, 309, 655, 656, 748, 883, 1191, 1263], "unlik": [126, 201, 309, 812, 883], "unnam": [635, 1171], "unnest": [126, 309, 384, 576, 587, 634, 635, 652, 653, 673, 674, 687, 773, 883, 928, 957, 1094, 1119, 1129, 1188, 1189, 1242, 1261, 1267], "unoptim": [217, 309], "unpivot": [225, 309, 825, 883], "unregist": [1252, 1253, 1254, 1268, 1270], "unsaf": [773, 887], "unset": [34, 141, 158, 294, 309, 416, 522, 866, 992, 1250], "unsign": [78, 79, 80, 81, 581, 773, 889, 1123, 1242], "unsigned_integ": 889, "unstabl": [37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 261, 266, 271, 277, 278, 309, 313, 383, 384, 417, 463, 531, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 749, 750, 773, 794, 795, 804, 844, 852, 883, 941, 956, 957, 993, 1035, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1217, 1221, 1226, 1242], "unstack": 309, "unstackdirect": [277, 309], "unsuit": 115, "unsupport": [35, 309], "until": [84, 201, 217, 309, 644, 645, 670, 812, 883, 1180, 1181, 1206], "up": [10, 36, 76, 132, 213, 216, 234, 243, 244, 250, 263, 309, 372, 531, 638, 661, 773, 816, 817, 821, 839, 883, 889, 943, 1174, 1197, 1242], "upcast": [324, 773], "upcast_integer_typ": [1, 50], "updat": [35, 180, 309, 799, 883], "upgrad": 95, "upheld": [821, 883], "upon": 130, "upper": [129, 130, 131, 187, 201, 309, 373, 463, 468, 522, 554, 686, 696, 714, 715, 717, 718, 760, 761, 773, 812, 883, 946, 1014, 1035, 1039, 1100, 1230, 1242, 1259, 1261], "upper_bound": [201, 309, 373, 468, 522, 773, 812, 883, 946, 1039, 1100, 1242], "uppercas": [560, 669, 1205, 1263], "upsampl": [201, 309, 812, 883], "uri": [34, 35, 131, 132, 133, 144, 145, 309], "url": [131, 132, 141, 148, 633, 635, 1169, 1171], "urllib": 132, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 171, 172, 173, 176, 180, 182, 184, 190, 191, 192, 194, 200, 201, 208, 210, 212, 213, 214, 216, 219, 225, 229, 230, 232, 233, 234, 241, 242, 243, 244, 245, 247, 248, 250, 255, 256, 257, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 288, 295, 309, 312, 319, 321, 323, 325, 334, 335, 358, 363, 364, 368, 383, 386, 389, 390, 398, 416, 417, 419, 422, 430, 433, 435, 438, 439, 440, 441, 442, 446, 447, 448, 452, 463, 466, 467, 468, 480, 494, 510, 518, 522, 524, 530, 531, 534, 552, 555, 557, 559, 560, 569, 576, 579, 581, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 612, 614, 619, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 637, 642, 643, 646, 647, 648, 650, 652, 654, 656, 657, 658, 659, 660, 662, 663, 667, 670, 671, 674, 682, 688, 689, 691, 692, 693, 694, 695, 698, 699, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 723, 725, 729, 730, 732, 733, 735, 736, 737, 739, 741, 742, 745, 748, 749, 750, 751, 752, 754, 755, 756, 757, 760, 761, 762, 763, 764, 769, 772, 773, 784, 785, 788, 789, 790, 791, 794, 795, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 811, 812, 813, 817, 819, 820, 825, 834, 835, 836, 837, 839, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 867, 883, 888, 889, 893, 894, 924, 928, 932, 933, 941, 956, 958, 961, 962, 970, 978, 979, 992, 993, 995, 998, 1006, 1009, 1012, 1015, 1016, 1017, 1018, 1023, 1024, 1028, 1032, 1035, 1037, 1038, 1039, 1054, 1066, 1082, 1089, 1094, 1101, 1119, 1121, 1123, 1125, 1127, 1129, 1130, 1131, 1143, 1144, 1146, 1147, 1150, 1156, 1158, 1160, 1161, 1162, 1163, 1165, 1166, 1168, 1169, 1170, 1172, 1173, 1178, 1179, 1182, 1183, 1184, 1186, 1188, 1196, 1198, 1199, 1203, 1206, 1218, 1220, 1223, 1224, 1232, 1242, 1246, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1263, 1264, 1268, 1271], "usag": [159, 163, 253, 309, 889, 1151, 1242], "usd": [199, 309, 1271], "use_pyarrow": [41, 45, 129, 135, 137, 141, 267, 309, 883, 1223, 1242], "use_pyarrow_extension_arrai": [268, 309, 1224, 1242], "use_pyarrow_write_to_dataset": [41, 309], "use_statist": [141, 148], "user": [34, 131, 132, 219, 233, 295, 309, 530, 531, 573, 612, 735, 773, 829, 867, 883, 887, 1101, 1147, 1242], "user_conn": 131, "usernam": [129, 132, 135, 137, 146], "userwarn": 1, "usr": 131, "usual": [91, 132, 271, 309, 392, 964], "utc": [133, 144, 392, 396, 398, 400, 416, 660, 663, 889, 964, 968, 972, 992, 1196, 1199], "utc_tz": 889, "utf": [33, 42, 75, 309, 883], "utf8": [20, 129, 130, 143, 638, 650, 661, 1174, 1186, 1197], "utf8_borders_onli": 20, "utf8_ful": [20, 47, 123], "utf8_full_condens": [7, 20, 123], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [271, 309, 725, 883, 887], "uvw": [634, 1170], "v": [8, 9, 41, 187, 309, 611, 692, 694, 773, 1145, 1242, 1253, 1254], "v2": [8, 135, 146], "val": [36, 240, 309, 531, 573, 680, 763, 773, 833, 883], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 182, 187, 215, 309, 383, 626, 628, 633, 634, 635, 637, 641, 646, 647, 763, 773, 801, 816, 883, 889, 956, 1014, 1032, 1162, 1164, 1169, 1170, 1171, 1173, 1177, 1182, 1183, 1242, 1250, 1251], "validate_output_schema": [821, 883], "vals_phys": [680, 773], "valu": [4, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 141, 143, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 171, 172, 180, 184, 186, 189, 190, 191, 192, 196, 199, 201, 202, 203, 207, 211, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 232, 234, 235, 236, 238, 241, 242, 243, 244, 245, 252, 255, 257, 258, 259, 260, 262, 263, 267, 268, 272, 273, 276, 277, 278, 279, 280, 287, 290, 291, 293, 296, 297, 299, 300, 309, 313, 317, 318, 319, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 378, 379, 382, 383, 384, 387, 389, 390, 395, 399, 409, 414, 431, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 491, 492, 493, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 515, 517, 518, 519, 520, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 547, 548, 549, 550, 551, 561, 562, 563, 564, 567, 569, 570, 573, 574, 576, 577, 579, 582, 583, 584, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 616, 617, 618, 619, 621, 622, 623, 625, 626, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 661, 670, 672, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 699, 702, 703, 704, 706, 708, 709, 710, 711, 712, 722, 723, 728, 729, 730, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 747, 748, 749, 750, 756, 757, 763, 773, 788, 789, 799, 802, 806, 807, 808, 812, 814, 815, 816, 817, 822, 823, 824, 825, 827, 828, 831, 832, 834, 840, 843, 845, 846, 848, 851, 852, 853, 862, 863, 865, 868, 869, 871, 872, 883, 889, 891, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 929, 930, 932, 933, 934, 935, 937, 943, 946, 948, 949, 950, 951, 956, 957, 958, 959, 961, 962, 967, 971, 985, 990, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1087, 1089, 1090, 1091, 1092, 1095, 1096, 1101, 1102, 1103, 1105, 1106, 1108, 1110, 1111, 1112, 1114, 1115, 1118, 1119, 1120, 1121, 1125, 1126, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1149, 1153, 1154, 1155, 1156, 1158, 1161, 1162, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1188, 1189, 1190, 1197, 1206, 1209, 1213, 1214, 1215, 1216, 1223, 1224, 1225, 1229, 1231, 1233, 1242, 1250, 1255, 1257, 1259, 1260, 1262, 1263, 1264, 1266, 1268, 1270, 1271], "value1": [622, 773], "value2": [622, 773], "value_a": 1268, "value_b": 1268, "value_count": [685, 773, 1242], "value_cum_sum": [382, 773], "value_cum_sum_all_fil": [382, 773], "value_nam": [225, 276, 309, 825, 851, 883], "value_var": [225, 276, 309, 825, 851, 883], "valueerror": [15, 20], "valueexcept": 733, "var": [36, 164, 309, 606, 607, 773, 883, 1242, 1258], "var_samp": 1258, "vari": [392, 964, 1271], "variabl": [30, 72, 141, 143, 146, 148, 162, 165, 225, 264, 276, 309, 825, 851, 883, 1218, 1242, 1251, 1253, 1268], "variable_nam": [225, 276, 309, 825, 851, 883], "variad": 131, "varianc": [280, 309, 441, 480, 606, 607, 688, 762, 773, 853, 883, 1018, 1054, 1140, 1232, 1242, 1261], "variant": [666, 668, 669], "variou": [131, 176, 309, 773, 796, 883, 888, 889, 1242], "vector": [591, 593, 595, 597, 599, 602, 604, 606, 773, 1132, 1133, 1135, 1138, 1139, 1140, 1242], "vectoris": [410, 411, 986, 987], "vein": 168, "verbos": [29, 152, 154, 168, 634, 1170], "veri": [131, 213, 273, 309, 531, 773, 867, 1262], "versicolor": [309, 312], "version": [34, 35, 52, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 170, 171, 181, 202, 249, 256, 266, 267, 271, 285, 290, 309, 386, 398, 410, 411, 433, 454, 461, 537, 543, 546, 583, 625, 627, 632, 674, 689, 698, 747, 752, 773, 788, 800, 804, 838, 844, 857, 858, 862, 883, 889, 970, 978, 979, 986, 987, 1009, 1032, 1033, 1125, 1161, 1163, 1168, 1221, 1223, 1226, 1242], "versu": [180, 309, 799, 883], "vertic": [55, 189, 277, 281, 309, 625, 639, 1161, 1175], "vertical_relax": 55, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 181, 213, 243, 309, 386, 531, 635, 773, 800, 883, 1171], "view": [531, 773], "visibl": [17, 187, 309, 1014, 1242], "visit": [383, 773, 956, 1242], "visual": [208, 210, 309, 841, 883], "volk": 126, "vote": [633, 635, 1169, 1171], "vowel": [646, 647, 1182, 1183], "vstack": [55, 189, 309], "w": [36, 131, 201, 244, 309, 628, 633, 635, 692, 694, 812, 883, 889, 1164, 1169, 1171, 1192, 1253, 1254, 1257], "w_i": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "wa": [34, 52, 91, 134, 152, 181, 266, 267, 309, 386, 584, 648, 719, 773, 800, 883, 889, 1126, 1184, 1223, 1242], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 200, 214, 233, 255, 288, 309, 569, 573, 622, 633, 706, 769, 773, 797, 803, 811, 829, 835, 843, 854, 860, 867, 883, 1169], "walk": 704, "want": [54, 119, 121, 134, 189, 219, 230, 241, 256, 309, 391, 448, 530, 531, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 627, 642, 648, 701, 709, 723, 745, 748, 764, 773, 795, 813, 820, 844, 883, 889, 963, 1021, 1101, 1163, 1178, 1184, 1242, 1256], "warehous": 132, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 569, 773, 1242], "watermark": [41, 309], "wb": [36, 309], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 180, 181, 201, 216, 234, 241, 279, 309, 386, 413, 417, 430, 463, 494, 522, 530, 531, 589, 592, 594, 596, 598, 600, 603, 605, 607, 635, 665, 713, 714, 715, 716, 717, 718, 733, 760, 761, 763, 773, 799, 800, 812, 817, 821, 834, 883, 989, 993, 1006, 1035, 1066, 1101, 1171, 1201, 1242, 1253], "weather": [646, 647, 1182, 1183], "wednesdai": [201, 309, 419, 422, 812, 883, 995, 998], "week": [201, 216, 241, 279, 309, 391, 413, 417, 430, 432, 439, 589, 592, 594, 596, 598, 600, 603, 605, 607, 701, 714, 715, 717, 718, 719, 760, 761, 773, 812, 817, 834, 883, 889, 963, 989, 993, 1006, 1008, 1016, 1242, 1264], "week_mask": [391, 701, 963], "weekdai": [399, 414], "weekend": [391, 701, 963], "weekli": [201, 309, 430, 812, 883, 1006], "weghorst": [635, 1171], "weight": [126, 438, 439, 440, 441, 590, 591, 593, 595, 597, 599, 602, 604, 606, 619, 773, 1015, 1016, 1017, 1018, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1156, 1242], "wei\u00df": 1263, "welcom": [668, 1204], "well": [36, 129, 130, 131, 143, 309, 468, 752, 773, 1039, 1242, 1268], "were": [168, 583, 584, 769, 773, 1125, 1126, 1242], "what": [230, 309, 312, 391, 530, 627, 648, 773, 963, 1163, 1184, 1242, 1246], "whatev": 168, "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 140, 141, 143, 144, 146, 147, 149, 152, 153, 154, 155, 159, 163, 172, 180, 185, 187, 189, 191, 194, 201, 215, 219, 233, 242, 244, 247, 248, 252, 255, 264, 266, 267, 271, 272, 274, 278, 284, 309, 353, 373, 391, 438, 440, 441, 447, 515, 522, 541, 573, 583, 584, 613, 621, 622, 627, 632, 636, 638, 642, 643, 648, 650, 655, 656, 657, 660, 661, 699, 701, 709, 723, 773, 789, 799, 807, 812, 816, 821, 836, 837, 840, 843, 848, 849, 852, 856, 883, 923, 946, 958, 963, 1014, 1015, 1017, 1018, 1021, 1024, 1087, 1125, 1126, 1144, 1146, 1149, 1163, 1168, 1172, 1174, 1178, 1179, 1184, 1186, 1191, 1192, 1193, 1196, 1197, 1218, 1223, 1242, 1256, 1268], "when_matched_update_al": [35, 309], "when_not_matched_insert_al": [35, 309], "where": [36, 47, 91, 131, 132, 134, 184, 189, 192, 201, 213, 225, 234, 243, 256, 257, 266, 271, 276, 278, 280, 309, 335, 432, 435, 437, 439, 448, 518, 524, 530, 564, 582, 611, 619, 622, 624, 648, 688, 700, 705, 707, 749, 750, 752, 754, 762, 763, 773, 802, 808, 812, 825, 844, 845, 851, 852, 853, 883, 905, 1008, 1012, 1016, 1021, 1025, 1145, 1156, 1160, 1184, 1232, 1233, 1242, 1250, 1267, 1268, 1270], "wherea": [129, 143, 241, 309, 417, 430, 561, 562, 589, 773, 813, 820, 834, 883, 993, 1006, 1110, 1111, 1242], "wherev": [36, 219, 295, 309, 531, 773, 1101, 1242], "whether": [33, 42, 120, 122, 126, 141, 148, 163, 167, 186, 212, 216, 250, 255, 309, 321, 323, 337, 338, 403, 418, 460, 485, 486, 612, 622, 636, 699, 773, 821, 839, 843, 883, 889, 893, 894, 907, 908, 939, 941, 975, 994, 1013, 1031, 1057, 1058, 1172, 1242, 1253, 1268], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 140, 141, 143, 144, 145, 146, 148, 159, 162, 164, 172, 173, 180, 181, 184, 189, 190, 200, 201, 206, 216, 241, 249, 266, 267, 272, 274, 279, 309, 321, 358, 386, 391, 413, 417, 419, 430, 439, 445, 468, 470, 473, 475, 476, 477, 478, 522, 530, 531, 541, 543, 589, 592, 594, 596, 598, 600, 603, 605, 607, 665, 701, 714, 715, 717, 718, 719, 760, 761, 763, 773, 789, 791, 797, 799, 800, 802, 803, 804, 812, 817, 834, 838, 848, 849, 854, 883, 889, 928, 963, 989, 993, 995, 1006, 1016, 1021, 1022, 1039, 1042, 1045, 1047, 1048, 1049, 1050, 1094, 1146, 1201, 1221, 1223, 1242, 1251, 1257, 1268, 1271], "while": [35, 54, 130, 133, 134, 144, 159, 163, 168, 213, 225, 273, 276, 278, 309, 583, 643, 773, 795, 825, 851, 852, 883, 1032, 1125, 1179, 1242], "white": [36, 309], "whitespac": [123, 655, 656, 657, 1191, 1192, 1193, 1263], "whole": [530, 621, 622, 633, 773, 867, 883, 1169], "whose": [47, 216, 234, 309, 442, 721, 773, 817, 883, 889], "wide": [131, 199, 225, 234, 276, 277, 309, 825, 851, 883], "width": [26, 36, 56, 129, 130, 143, 309, 312, 521, 883, 1093], "wiki": 20, "wikipedia": 20, "wildcard": [442, 671, 709, 710, 723, 747, 769, 773, 887], "win_loss": [36, 309], "window": [129, 130, 143, 201, 241, 309, 383, 438, 440, 441, 531, 569, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 703, 749, 750, 773, 812, 834, 883, 956, 1015, 1017, 1018, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1242], "window_s": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 749, 750, 773, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1242], "windowmappingstrategi": [569, 773], "winter": [636, 646, 647, 1172], "wise": [36, 47, 131, 194, 309, 326, 327, 328, 329, 330, 331, 374, 375, 376, 443, 526, 616, 617, 618, 678, 679, 723, 747, 773, 896, 897, 898, 899, 900, 901, 948, 949, 950, 1019, 1098, 1099, 1153, 1154, 1155, 1215, 1216, 1242], "wish": [172, 272, 309, 367, 368, 681, 682, 773, 789, 848, 883, 936, 1227, 1242], "with_column": [1, 12, 50, 53, 54, 201, 233, 241, 271, 277, 284, 309, 318, 320, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 358, 363, 364, 369, 373, 378, 379, 380, 381, 382, 384, 387, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 434, 436, 437, 439, 446, 447, 452, 457, 459, 461, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 531, 548, 550, 552, 553, 555, 557, 559, 560, 563, 564, 565, 569, 570, 573, 574, 576, 579, 583, 584, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 609, 613, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 664, 665, 666, 668, 669, 670, 672, 674, 675, 680, 683, 690, 692, 694, 697, 701, 702, 703, 704, 709, 710, 712, 713, 715, 716, 720, 730, 734, 737, 739, 742, 753, 757, 759, 761, 763, 769, 773, 794, 795, 804, 812, 814, 829, 830, 834, 841, 856, 883, 889, 957, 992, 1119, 1242, 1268], "with_column_nam": 143, "with_columns_seq": [309, 883], "with_context": 883, "with_field": [531, 773], "with_replac": [245, 309, 510, 610, 773, 1082, 1143, 1242], "with_row_count": [309, 883], "with_row_index": [1, 241, 285, 309, 592, 594, 596, 598, 600, 603, 605, 607, 773, 858, 883, 1144, 1242], "within": [56, 72, 152, 153, 154, 155, 200, 201, 202, 216, 241, 279, 309, 461, 579, 622, 773, 812, 817, 834, 883, 1033, 1242, 1268], "without": [1, 37, 38, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 261, 266, 267, 271, 277, 278, 309, 313, 383, 384, 417, 463, 531, 576, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 627, 636, 648, 706, 749, 750, 751, 773, 794, 795, 804, 844, 852, 883, 939, 941, 956, 957, 993, 1035, 1119, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1163, 1172, 1184, 1217, 1221, 1223, 1226, 1242, 1270], "without_fil": [133, 144, 145], "wod": [657, 1193], "womp": [275, 309, 850, 883], "word": [132, 646, 647, 656, 657], "work": [36, 63, 65, 130, 149, 248, 284, 309, 321, 323, 359, 372, 373, 442, 451, 494, 523, 530, 531, 552, 553, 555, 557, 559, 560, 569, 638, 642, 643, 650, 661, 684, 773, 837, 856, 883, 889, 893, 894, 929, 943, 946, 1027, 1066, 1095, 1174, 1178, 1179, 1186, 1197, 1228, 1242], "workaround": 309, "workbook": [36, 134, 140, 309], "working_with_conditional_format": [36, 309], "working_with_sparklin": [36, 309], "worksheet": [36, 134, 140, 309], "world": [1, 20, 627, 648, 655, 656, 657, 668, 889, 1073, 1163, 1184, 1191, 1192, 1193, 1204, 1252, 1255], "wors": [843, 883], "worth": [494, 1066], "worthwhil": [152, 154], "would": [90, 129, 130, 143, 267, 271, 309, 334, 345, 391, 499, 530, 531, 540, 569, 579, 699, 701, 773, 904, 915, 963, 1071, 1121, 1223, 1242, 1266], "wrap": [74, 123, 369, 468, 530, 773, 937, 1242], "wrap_numer": [369, 773, 937, 1242], "wrapper": [54, 795, 883], "writabl": [31, 33, 37, 38, 39, 40, 41, 249, 267, 309, 1223, 1242], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 176, 261, 309, 373, 546, 773, 819, 841, 883, 889, 946, 1217, 1242], "write_ascii_frame_to_stdout": 168, "write_avro": 309, "write_clipboard": [128, 309], "write_csv": [32, 130, 143, 309], "write_databas": 309, "write_delta": 309, "write_excel": 309, "write_ipc": [135, 309], "write_ipc_stream": 309, "write_json": 309, "write_ndjson": [39, 309], "write_parquet": 309, "write_t": [41, 309], "write_to_dataset": [41, 309], "writeabl": [267, 309, 1223, 1242], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 249, 309, 543, 838, 883], "ww": [1263, 1270], "www": 673, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 143, 156, 157, 159, 170, 187, 205, 208, 210, 215, 234, 243, 244, 273, 276, 277, 309, 312, 318, 320, 322, 341, 346, 378, 385, 436, 437, 452, 457, 459, 461, 482, 489, 501, 527, 529, 530, 531, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 568, 574, 582, 583, 584, 588, 616, 619, 652, 674, 675, 680, 683, 690, 692, 694, 697, 698, 703, 709, 710, 712, 723, 733, 734, 737, 739, 742, 747, 752, 757, 763, 773, 816, 821, 842, 844, 851, 883, 889, 916, 940, 951, 1024, 1101, 1125, 1126, 1153, 1156, 1188, 1221, 1225, 1226, 1242, 1253, 1254, 1257, 1262, 1268, 1270], "x00": [362, 363, 364, 365, 366, 629, 931, 932, 933, 934, 935, 1165], "x00fvalu": [249, 309], "x81": [543, 838, 883], "x82": [249, 309], "x83": [249, 309], "x_0": [277, 309, 438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242], "x_1": [277, 309, 439, 773, 1016, 1242], "x_2": [438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242], "x_i": [439, 773, 1016, 1242], "x_invers": [574, 773], "x_n": [439, 773, 1016, 1242], "x_pow_8": 1262, "x_round": 1262, "x_round_1": 1262, "x_squar": [574, 773], "x_t": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "x_uniqu": [551, 773], "x_y": [346, 501], "xa1cagg": 543, "xa1csum": 543, "xa1fcolumncfoolpartition_bi": 543, "xa1fwindow": 543, "xa1gcolumn": [249, 309, 838, 883], "xa1kmapfunct": [838, 883], "xa1mdataframescan": [838, 883], "xa2einput": [838, 883], "xa4bdf": [838, 883], "xa4d": [838, 883], "xa4dnamecfoohdatatypeeint64lbit_set": [249, 309], "xa4hfunct": 543, "xdist": 1271, "xff": [362, 363, 364, 365, 366, 629, 931, 932, 933, 934, 935, 1165], "xi": [634, 1170], "xl": 134, "xlog2": [550, 574, 773], "xlsb": 134, "xlsx": [36, 134, 309], "xlsx2csv": [134, 151], "xlsxwriter": [36, 151, 309], "xor": 773, "xor_xi": [690, 773], "xx": [10, 48, 50, 163, 180, 256, 309, 799, 883, 889, 1257, 1263, 1270], "xxx": 673, "xy": [48, 50], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 318, 628, 634, 773, 1164, 1170, 1219, 1242], "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 170, 187, 208, 210, 215, 234, 243, 244, 273, 276, 277, 309, 312, 318, 320, 322, 341, 346, 419, 422, 436, 437, 457, 459, 482, 489, 501, 529, 531, 551, 553, 555, 557, 559, 560, 563, 564, 568, 582, 583, 584, 588, 660, 662, 663, 674, 683, 690, 692, 694, 697, 698, 712, 719, 733, 737, 739, 742, 752, 757, 773, 816, 842, 844, 851, 883, 889, 916, 940, 995, 998, 1125, 1126, 1196, 1198, 1199, 1242, 1257, 1263, 1264, 1270], "y_": [438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242], "y_0": [277, 309, 438, 439, 440, 441, 773, 1015, 1016, 1017, 1018, 1242], "y_1": [277, 309], "y_i": [439, 773, 1016, 1242], "y_mul": 674, "y_t": [438, 440, 441, 773, 1015, 1017, 1018, 1242], "y_uniqu": [551, 773], "ya": [650, 1186], "ya29": 145, "year": [133, 144, 201, 216, 241, 256, 279, 309, 391, 403, 404, 413, 414, 417, 430, 431, 589, 592, 594, 596, 598, 600, 603, 605, 607, 701, 713, 714, 715, 716, 717, 718, 760, 761, 773, 812, 817, 834, 883, 889, 963, 975, 976, 989, 990, 993, 1006, 1007, 1264], "yellow": [309, 313, 362, 363, 364, 365, 366], "yield": [120, 122, 129, 130, 131, 143, 187, 189, 212, 273, 309, 452, 530, 569, 773, 883, 1014, 1021, 1242], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 172, 189, 201, 212, 213, 219, 230, 234, 241, 242, 243, 244, 256, 263, 266, 272, 273, 274, 276, 295, 309, 312, 367, 368, 391, 410, 411, 413, 416, 419, 422, 442, 448, 468, 494, 522, 530, 531, 574, 581, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 627, 642, 646, 647, 648, 671, 681, 682, 701, 709, 719, 723, 735, 745, 748, 752, 764, 773, 789, 795, 802, 812, 813, 820, 834, 841, 844, 848, 849, 851, 867, 883, 887, 889, 936, 963, 986, 987, 992, 995, 998, 1021, 1039, 1066, 1101, 1123, 1163, 1178, 1182, 1183, 1184, 1221, 1227, 1242, 1246, 1251, 1256, 1271], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 213, 219, 243, 244, 247, 263, 283, 288, 295, 309, 396, 439, 454, 530, 531, 635, 660, 662, 663, 670, 735, 773, 813, 820, 821, 836, 855, 860, 867, 883, 968, 1016, 1101, 1171, 1196, 1198, 1199, 1206, 1242, 1271], "yy": [10, 48, 50, 163, 180, 256, 309, 799, 883, 889, 1257, 1263, 1270], "yyi": 673, "yyyi": [36, 309], "yz": [48, 50], "z": [36, 55, 76, 123, 157, 187, 208, 210, 215, 243, 244, 273, 276, 277, 309, 318, 320, 322, 461, 489, 531, 553, 555, 557, 559, 560, 568, 582, 583, 584, 627, 634, 636, 648, 660, 663, 692, 694, 712, 737, 739, 742, 748, 752, 757, 773, 816, 842, 844, 851, 883, 889, 1024, 1125, 1126, 1163, 1170, 1172, 1184, 1196, 1199, 1242, 1253, 1257, 1268, 1270], "z_0": [277, 309], "z_1": [277, 309], "zap": 889, "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 170, 191, 201, 213, 242, 256, 261, 267, 268, 309, 447, 522, 527, 611, 619, 670, 683, 773, 792, 807, 812, 883, 945, 1024, 1094, 1156, 1206, 1217, 1223, 1224, 1242, 1262, 1268], "zero_copy_onli": [1223, 1242], "zfill": [645, 690, 773, 1181], "zip": 1271, "zip_with": [194, 309, 1242], "zone": [62, 159, 160, 163, 392, 396, 416, 439, 663, 716, 717, 718, 773, 889, 964, 968, 992, 1016, 1199, 1242], "zoneinfo": [62, 889], "zoom": [36, 309], "zstd": [37, 38, 41, 43, 45, 309, 883], "zz": [163, 180, 256, 309, 799, 883, 1257, 1263, 1270], "zzz": 673, "\u03bc": [123, 173, 201, 213, 241, 243, 244, 263, 279, 309, 392, 393, 395, 396, 397, 398, 400, 402, 405, 407, 408, 410, 411, 412, 413, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 589, 592, 594, 596, 598, 600, 603, 605, 607, 660, 663, 716, 717, 718, 719, 725, 773, 791, 812, 817, 834, 883, 889, 964, 965, 967, 968, 969, 970, 972, 973, 974, 979, 980, 984, 986, 987, 988, 989, 992, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1196, 1199, 1263], "\u0441\u0438\u043d\u0438\u0439": 1263, "\u0967\u096f\u096f\u096f": 889, "\u0968\u0966\u096d\u096d": 889, "\u4eac\u90fd": 889, "\u5927\u962a": 889, "\u6771\u4eac": [642, 643, 889, 1178, 1179], "\u90fd\u5e02": 889, "\ud835\udf0b": 1262}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1257, 1269], "IF": 1260, "__dataframe__": 170, "__iter__": 287, "ab": [317, 891, 1262], "aco": 1265, "acosd": 1265, "add": 318, "add_business_dai": [391, 963], "agg": [288, 860], "agg_group": 319, "aggreg": [169, 316, 787, 890, 1258], "alia": [320, 892], "alias": [1258, 1262, 1263], "align_fram": 47, "all": [289, 321, 337, 485, 691, 861, 893, 907, 1057, 1269], "all_horizont": 692, "and_": 322, "ani": [323, 338, 486, 693, 894, 908, 1058], "any_horizont": 694, "api": [1, 48, 49, 50, 51, 785, 1268], "append": [324, 895], "approx_n_uniqu": [171, 325, 695, 788], "arang": 696, "arcco": [326, 896], "arccosh": [327, 897], "arcsin": [328, 898], "arcsinh": [329, 899], "arctan": [330, 900], "arctan2": 697, "arctan2d": 698, "arctanh": [331, 901], "arg_max": [332, 339, 487, 902, 909, 1059], "arg_min": [333, 340, 488, 903, 910, 1060], "arg_sort": [334, 904], "arg_sort_bi": 699, "arg_tru": [335, 905], "arg_uniqu": [336, 906], "arg_wher": 700, "arr": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930], "arrai": [56, 765, 1234, 1259], "array_agg": 1259, "array_contain": 1259, "array_get": 1259, "array_length": 1259, "array_low": 1259, "array_mean": 1259, "array_revers": 1259, "array_sum": 1259, "array_to_str": 1259, "array_uniqu": 1259, "array_upp": 1259, "asin": 1265, "asind": 1265, "assert": 1271, "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "atan": 1265, "atan2": 1265, "atan2d": 1265, "atand": 1265, "attribut": [304, 879, 1235], "avail": 1, "avg": 1258, "avro": 786, "backward_fil": 361, "base_utc_offset": [392, 964], "batched_read": 125, "batchedcsvread": 125, "bin": [362, 363, 364, 365, 366, 931, 932, 933, 934, 935], "binari": [57, 766, 779, 1236], "bit_length": 1263, "boolean": [58, 767, 1237], "bottom_k": [172, 367, 789, 936], "bottom_k_bi": 368, "build_info": 52, "business_day_count": 701, "cach": 790, "cancel": 876, "cast": [173, 369, 791, 937, 1266], "cast_time_unit": [393, 965], "cat": [370, 938, 939, 940, 941], "categor": 59, "categori": [768, 1238], "categoricalremappingwarn": 86, "cbrt": [371, 942, 1262], "ceil": [372, 943, 1262], "centuri": [394, 966], "chronoformatwarn": 87, "chunk_length": 944, "claus": 1257, "clear": [174, 792, 945], "clip": [373, 946], "clipboard": 786, "clone": [175, 793, 947], "co": [374, 948, 1265], "coalesc": [702, 1260], "col": 769, "collect": 794, "collect_al": 53, "collect_all_async": 54, "collect_async": 795, "collect_schema": [176, 796], "column": [156, 157, 177, 770, 797], "columnnotfounderror": 88, "combin": [395, 967], "comparison": 779, "comput": [305, 771, 1239], "computeerror": 89, "concat": [55, 489, 625, 1061, 1161, 1263], "concat_list": 703, "concat_str": 704, "concat_w": 1263, "condit": 1260, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "conjunct": 779, "contain": [341, 362, 490, 626, 911, 931, 1062, 1162], "contains_ani": [627, 1163], "context": 168, "convers": 784, "convert_time_zon": [396, 968], "corr": [178, 705], "cosd": 1265, "cosh": [375, 949], "cot": [376, 950, 1265], "cotd": 1265, "count": [179, 290, 377, 706, 798, 862, 1258], "count_match": [342, 491, 628, 912, 1063, 1164], "cov": 707, "creat": 1270, "create_list_strategi": 158, "csv": [125, 786], "cum_count": [378, 708, 951], "cum_fold": 709, "cum_max": [379, 952], "cum_min": [380, 953], "cum_prod": [381, 954], "cum_reduc": 710, "cum_sum": [382, 711, 955], "cum_sum_horizont": 712, "cumulative_ev": [383, 956], "customufuncwarn": 90, "cut": [384, 957], "dai": [399, 971], "data": 314, "databas": 786, "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309], "dataorientationwarn": 91, "dataset": 786, "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 314], "date": [61, 397, 713, 969, 1263], "date_part": 1264, "date_rang": [714, 715], "datetim": [62, 398, 716, 970], "datetime_rang": [717, 718], "decim": 63, "decod": [363, 629, 932, 1165], "decor": 168, "degre": [385, 1265], "delta": 786, "describ": [180, 799, 958], "descript": [306, 880, 1240], "deseri": [181, 386, 800], "diff": [387, 492, 959, 1064], "disable_string_cach": 84, "distinct": 1257, "div": 1262, "document": 1268, "dot": [388, 960], "drop": [182, 801, 1270], "drop_in_plac": 183, "drop_nan": [389, 961], "drop_nul": [184, 390, 493, 802, 962, 1065], "dst_offset": [400, 972], "dt": [391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "dtype": [160, 185, 803, 1011], "duplicateerror": 92, "durat": [64, 719], "element": 720, "enable_string_cach": 85, "encod": [364, 630, 933, 1166], "ends_with": [365, 631, 934, 1167, 1263], "entropi": [435, 1012], "enum": 65, "epoch": [401, 973], "eq": [436, 535], "eq_miss": 437, "equal": [186, 1013], "error": 315, "estimated_s": [187, 1014], "eval": [494, 1066], "ewm_mean": [438, 1015], "ewm_mean_bi": [439, 1016], "ewm_std": [440, 1017], "ewm_var": [441, 1018], "exampl": [1, 312, 889, 1246, 1271], "excel": 786, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 315, 1269], "exclud": [442, 721], "execut": 1250, "execute_glob": 1251, "exp": [443, 1019, 1262], "explain": [804, 1270], "explod": [188, 343, 444, 495, 632, 805, 913, 1020, 1067, 1168], "export": [307, 1241], "expr": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "express": [773, 1268], "extend": [1, 189, 1021], "extend_const": [445, 1022], "extract": [633, 1169, 1264], "extract_al": [634, 1170], "extract_group": [635, 1171], "extract_mani": [636, 1172], "feather": 786, "fetch": 877, "fetch_block": 878, "field": [671, 1207, 1208], "fill_nan": [190, 446, 806, 1023], "fill_nul": [191, 447, 807, 1024], "filter": [192, 448, 808, 1025], "find": [637, 1173], "first": [291, 344, 449, 496, 722, 809, 863, 914, 1068, 1258], "flag": [193, 1026], "flatten": 450, "float32": 66, "float64": 67, "floor": [451, 1027, 1262], "floordiv": 452, "fold": [194, 723], "format": 724, "forward_fil": 453, "frame": 1268, "from": 1257, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_epoch": 725, "from_json": 454, "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "function": [1, 772, 784, 889, 1261], "gather": [455, 497, 1028, 1069], "gather_everi": [195, 456, 498, 810, 1029, 1070], "ge": 457, "get": [345, 458, 499, 915, 1071], "get_categori": [370, 938], "get_chunk": 1030, "get_column": [196, 198], "get_column_index": 197, "get_index_typ": 124, "glimps": 199, "global": 1268, "greatest": 1260, "group": [726, 1257], "group_bi": [200, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 811, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "group_by_dynam": [201, 812], "groupbi": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 881], "gt": 459, "has_multiple_output": 536, "has_nul": [460, 1031], "has_valid": 1032, "hash": [461, 1033], "hash_row": 202, "have": 1257, "head": [203, 292, 462, 500, 638, 727, 813, 864, 1034, 1072, 1174], "height": 204, "helper": 1271, "hist": [463, 1035], "hour": [402, 974], "hstack": 205, "iceberg": 786, "ifnul": 1260, "implod": [464, 728, 1036], "import": 889, "in_process": [876, 877, 878], "index": 0, "initcap": 1263, "inprocessqueri": [876, 877, 878, 882], "input": 786, "insert_column": 206, "inspect": [465, 814], "int16": 68, "int32": 69, "int64": 70, "int8": 71, "int_rang": [729, 730], "interfac": 1267, "interpol": [207, 466, 815, 1037], "interpolate_bi": [467, 1038], "intersect": 1269, "introduct": 1268, "invalidoperationerror": 93, "io": 125, "ipc": 786, "is_between": [468, 1039], "is_column_select": 537, "is_dupl": [208, 469, 1040], "is_empti": [209, 1041], "is_finit": [470, 1042], "is_first_distinct": [471, 1043], "is_in": [472, 1044], "is_infinit": [473, 1045], "is_last_distinct": [474, 1046], "is_leap_year": [403, 975], "is_loc": 939, "is_nan": [475, 1047], "is_not_nan": [476, 1048], "is_not_nul": [477, 1049], "is_nul": [478, 1050], "is_regex_project": 538, "is_sort": 1051, "is_uniqu": [210, 479, 1052], "iso_year": [404, 976], "item": [211, 1053], "iter_column": 212, "iter_row": 213, "iter_slic": 214, "join": [215, 346, 501, 639, 816, 916, 1073, 1175, 1257], "join_asof": [216, 817], "json": 786, "json_decod": [640, 1176], "json_encod": [672, 1209], "json_norm": 126, "json_path_match": [641, 1177], "keep": 552, "kurtosi": [480, 1054], "lake": 786, "last": [293, 347, 481, 502, 731, 818, 865, 917, 1074, 1258], "lazi": [217, 819], "lazyfram": [42, 43, 44, 45, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883], "lazygroupbi": [860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "le": 482, "least": 1260, "left": 1263, "len": [294, 483, 503, 732, 866, 1055, 1075], "len_byt": [642, 1178], "len_char": [643, 1179], "length": 1263, "limit": [218, 484, 820, 1056, 1257], "list": [72, 161, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 774, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1243], "lit": 733, "ln": 1262, "load": [2, 168], "load_from_fil": 3, "load_profil": 162, "log": [525, 1097, 1262], "log10": [526, 1098, 1262], "log1p": [527, 1099, 1262], "log2": 1262, "lower": 1263, "lower_bound": [528, 1100], "lt": 529, "ltrim": 1263, "manag": 168, "manipul": [311, 777, 885, 1245], "map": 553, "map_batch": [530, 734, 821], "map_el": [531, 1101], "map_field": 554, "map_group": [295, 735, 867], "map_row": 219, "mapwithoutreturndtypewarn": 94, "math": 1262, "max": [220, 296, 348, 504, 532, 736, 822, 868, 918, 977, 1076, 1102, 1258], "max_horizont": [221, 737], "mean": [222, 297, 505, 533, 738, 823, 869, 978, 1077, 1103], "mean_horizont": [223, 739], "median": [224, 298, 349, 506, 534, 740, 824, 870, 919, 979, 1078, 1104, 1258], "melt": [225, 825], "merge_sort": [226, 826], "meta": [535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 775], "metadata": 886, "method": 1268, "microsecond": [405, 980], "millennium": [406, 981], "millisecond": [407, 982], "min": [227, 299, 350, 507, 547, 741, 827, 871, 920, 983, 1079, 1105, 1258], "min_horizont": [228, 742], "minut": [408, 984], "miscellan": [310, 776, 784, 884, 1244], "mod": [548, 1262], "mode": [549, 1106], "moduleupgraderequirederror": 95, "month": [409, 985], "month_end": [410, 986], "month_start": [411, 987], "mul": 550, "n_chunk": [229, 1107], "n_uniqu": [230, 300, 351, 508, 551, 743, 872, 921, 1080, 1108], "name": [552, 553, 554, 555, 556, 557, 558, 559, 560, 770, 778, 1109, 1269], "nan_max": [561, 1110], "nan_min": [562, 1111], "nanosecond": [412, 988], "ne": [539, 563], "ne_miss": 564, "neg": 565, "nest": 314, "new": 1, "new_from_index": 1112, "next_batch": 125, "nodataerror": 96, "norowsreturnederror": 97, "not_": [566, 1113], "nth": 744, "null": 73, "null_count": [231, 567, 828, 1114], "nullif": 1260, "numer": [314, 779], "object": 74, "octet_length": 1263, "od": 786, "offset": 1257, "offset_bi": [413, 989], "ones": 745, "oper": [779, 889, 1269, 1270], "option": 168, "or_": 568, "order": 1257, "ordinal_dai": [414, 990], "other": 314, "outofboundserror": 98, "output": 786, "output_nam": 540, "over": 569, "pad_end": [644, 1180], "pad_start": [645, 1181], "panic": 315, "panicexcept": 99, "parallel": 784, "parametercollisionerror": 100, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1271], "parquet": 786, "partition_bi": 232, "pct_chang": [570, 1115], "peak_max": [571, 1116], "peak_min": [572, 1117], "performancewarn": 101, "pi": 1262, "pipe": [233, 573, 829], "pivot": 234, "plot": [312, 1246], "plugin": 887, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1271], "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "pop": 541, "pow": [574, 1262], "prefix": 555, "prefix_field": 556, "product": [235, 575, 1118], "profil": [830, 1271], "provid": 1, "pyarrow": 786, "python": [785, 1268], "qcut": [576, 1119], "quantil": [236, 301, 577, 746, 831, 873, 1120], "quarter": [415, 991], "queri": 1268, "radian": [578, 1265], "random": 784, "rank": [579, 1121], "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "rechunk": [237, 580, 1122], "reduc": 747, "refer": 785, "regexp_lik": 1263, "regist": 1252, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_glob": 1253, "register_lazyframe_namespac": 50, "register_mani": 1254, "register_series_namespac": 51, "registr": 1, "reinterpret": [581, 1123], "renam": [238, 832, 1124], "rename_field": [673, 1210], "repeat": 748, "repeat_bi": 582, "replac": [583, 646, 1125, 1182, 1263], "replace_al": [647, 1183], "replace_column": 239, "replace_mani": [648, 1184], "replace_strict": [584, 1126], "replace_time_zon": [416, 992], "reshap": [585, 1127], "restore_default": 4, "revers": [240, 352, 509, 586, 649, 833, 922, 1081, 1128, 1185, 1263], "right": 1263, "rle": [587, 1129], "rle_id": [588, 1130], "roll": [241, 589, 834], "rolling_corr": 749, "rolling_cov": 750, "rolling_map": [590, 1131], "rolling_max": [591, 1132], "rolling_max_bi": 592, "rolling_mean": [593, 1133], "rolling_mean_bi": 594, "rolling_median": [595, 1134], "rolling_median_bi": 596, "rolling_min": [597, 1135], "rolling_min_bi": 598, "rolling_quantil": [599, 1136], "rolling_quantile_bi": 600, "rolling_skew": [601, 1137], "rolling_std": [602, 1138], "rolling_std_bi": 603, "rolling_sum": [604, 1139], "rolling_sum_bi": 605, "rolling_var": [606, 1140], "rolling_var_bi": 607, "root_nam": 542, "round": [417, 608, 993, 1141, 1262], "round_sig_fig": [609, 1142], "row": [242, 243], "rows_by_kei": 244, "rowserror": 105, "rtrim": 1263, "sampl": [245, 510, 610, 1082, 1143], "save": [5, 168], "save_to_fil": 6, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "scatter": 1144, "schema": [246, 835, 888, 1211], "schemaerror": 108, "schemafieldnotfounderror": 109, "search_sort": [611, 1145], "second": [418, 994], "select": [247, 311, 751, 777, 836, 885, 1245, 1257], "select_seq": [248, 837], "selector": 889, "seri": [163, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242], "serial": [249, 310, 543, 838, 884], "set": [889, 1146, 1269], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [511, 1083], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [512, 1084], "set_profil": 164, "set_random_se": 150, "set_sort": [250, 612, 839, 1147], "set_streaming_chunk_s": 14, "set_symmetric_differ": [513, 1085], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [514, 1086], "set_verbos": 29, "shape": [251, 1148], "shapeerror": 110, "shift": [252, 353, 515, 613, 840, 923, 1087, 1149], "show": 1270, "show_graph": 841, "show_vers": 151, "shrink_dtyp": [614, 1150], "shrink_to_fit": [253, 1151], "shuffl": [615, 1152], "sign": [616, 1153, 1262], "sin": [617, 1154, 1265], "sind": 1265, "sinh": [618, 1155], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "skew": [619, 1156], "slice": [254, 516, 620, 650, 842, 1088, 1157, 1186], "sort": [255, 354, 517, 621, 843, 924, 1089, 1158], "sort_bi": 622, "split": [651, 1187], "split_exact": [652, 1188], "splitn": [653, 1189], "sql": [256, 752, 844, 1257, 1261, 1267, 1268], "sql_expr": 753, "sqlcontext": [1250, 1251, 1252, 1253, 1254, 1255, 1256, 1268], "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "sqrt": [623, 1159, 1262], "starts_with": [366, 654, 935, 1190, 1263], "state": [30, 168], "std": [257, 355, 518, 624, 754, 845, 925, 1090, 1160], "stddev": 1258, "str": [625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206], "strategi": 1271, "strftime": [419, 995, 1264], "string": [75, 314, 780, 1247, 1263], "stringcach": [46, 784], "stringcachemismatcherror": 111, "strip_char": [655, 1191], "strip_chars_end": [656, 1192], "strip_chars_start": [657, 1193], "strip_prefix": [658, 1194], "strip_suffix": [659, 1195], "strpo": 1263, "strptime": [660, 1196, 1263], "struct": [76, 671, 672, 673, 674, 755, 781, 1207, 1208, 1209, 1210, 1211, 1212, 1248], "structfieldnotfounderror": 112, "style": 313, "sub": 675, "substr": 1263, "suffix": 557, "suffix_field": 558, "sum": [258, 302, 356, 519, 676, 756, 846, 874, 926, 1091, 1213, 1258], "sum_horizont": [259, 757], "tabl": [1255, 1270], "tail": [260, 303, 520, 661, 677, 758, 847, 875, 1092, 1197, 1214], "tan": [678, 1215, 1265], "tand": 1265, "tanh": [679, 1216], "tempor": [314, 782, 1249, 1264], "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1271], "thread_pool_s": 165, "threadpool_s": 166, "time": [77, 420, 759, 996], "time_rang": [760, 761], "timestamp": [421, 997, 1263], "to_arrai": [521, 1093], "to_arrow": [261, 1217], "to_dat": [662, 1198], "to_datetim": [663, 1199], "to_decim": [664, 1200], "to_dict": [262, 263], "to_dummi": [264, 1218], "to_fram": 1219, "to_init_repr": [265, 1220], "to_integ": [665, 1201], "to_jax": [266, 1221], "to_list": [357, 927, 1222], "to_loc": 940, "to_lowercas": [559, 666, 1202], "to_numpi": [267, 1223], "to_panda": [268, 1224], "to_phys": [680, 1225], "to_seri": 269, "to_str": [422, 998], "to_struct": [270, 358, 522, 928, 1094], "to_tim": [667, 1203], "to_titlecas": [668, 1204], "to_torch": [271, 1226], "to_uppercas": [560, 669, 1205], "toomanyrowsreturnederror": 113, "top_k": [272, 681, 848, 1227], "top_k_bi": 682, "total_dai": [423, 999], "total_hour": [424, 1000], "total_microsecond": [425, 1001], "total_millisecond": [426, 1002], "total_minut": [427, 1003], "total_nanosecond": [428, 1004], "total_second": [429, 1005], "transpos": 273, "tree_format": 544, "trigonometri": 1265, "truediv": 683, "truncat": [430, 1006, 1270], "try_cast": 1266, "type": [314, 1266], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "undo_alias": 545, "union": 1269, "uniqu": [274, 359, 523, 684, 849, 929, 1095, 1228], "unique_count": [685, 1229], "unknown": 82, "unnest": [275, 850, 1212, 1259, 1270], "unpivot": [276, 851], "unregist": 1256, "unstablewarn": 114, "unstack": 277, "unsuitablesqlerror": 115, "updat": [278, 852], "upper": 1263, "upper_bound": [686, 1230], "upsampl": 279, "us": 168, "uses_lexical_ord": 941, "using_string_cach": 167, "utf8": 83, "value_count": [687, 1231], "var": [280, 360, 524, 688, 762, 853, 930, 1096, 1232], "varianc": 1258, "vstack": 281, "warn": 315, "week": [431, 1007], "weekdai": [432, 1008], "when": 763, "where": [689, 1257], "width": [282, 854], "window": 783, "with_column": [283, 855], "with_columns_seq": [284, 856], "with_context": 857, "with_field": 674, "with_row_count": [285, 858], "with_row_index": [286, 859], "with_time_unit": [433, 1009], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 546], "write_ndjson": 40, "write_parquet": 41, "xor": 690, "year": [434, 1010], "zero": 764, "zfill": [670, 1206], "zip_with": 1233}})